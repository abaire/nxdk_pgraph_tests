name: Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - 'README.md'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  BuildISO:
    name: Build ISO
    runs-on: ubuntu-latest
    steps:
      - name: Clone tree
        uses: actions/checkout@v3
        with:
          submodules: recursive
          path: nxdk_pgraph_tests

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            llvm \
            lld \
            libsdl2-dev \
            libsdl2-image-dev \
            ninja-build
          pip3 install nv2a-vsh

      - name: Prewarm nxdk
        working-directory: nxdk_pgraph_tests
        run: bash ${GITHUB_WORKSPACE}/nxdk_pgraph_tests/prewarm-nxdk.sh

      - name: Compile
        run: |
          cd nxdk_pgraph_tests
          export NXDK_DIR="${GITHUB_WORKSPACE}/nxdk_pgraph_tests/third_party/nxdk"
          cmake -B build \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_TOOLCHAIN_FILE="${NXDK_DIR}/share/toolchain-nxdk.cmake"
          cmake --build build -- -j$(grep -c processor /proc/cpuinfo)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nxdk_pgraph_tests_xiso.iso
          path: nxdk_pgraph_tests/build/src/xiso/nxdk_pgraph_tests_xiso/nxdk_pgraph_tests_xiso.iso

  RunWithXemuLatest:
    needs: [ BuildISO ]
            nxdk_pgraph_tests_xiso.iso

    name: Run against Xemu
    runs-on: ubuntu-latest

    steps:
      - name: Download Xemu
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getLatestRelease({
                owner: "xemu-project",
                repo: "xemu"
            });

            const asset = release.data.assets.find(
                asset => asset.name.endsWith("x86_64.AppImage") && !asset.name.includes("dbg")
            );
            if (!asset) {
              core.setFailed("Failed to retrieve Xemu AppImage.");
              return;
            }

            const response = await github.rest.repos.getReleaseAsset({
                owner: "xemu-project",
                repo: "xemu",
                asset_id: asset.id,
                headers: { "Accept": "application/octet-stream" }
            });

            const fs = require('fs');
            fs.writeFileSync("xemu.AppImage", Buffer.from(response.data));

      - name: Download xemu-hdd-image
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getLatestRelease({
                owner: "xemu-project",
                repo: "xemu-hdd-image"
            });

            const asset = release.data.assets.find(
                asset => asset.name.endsWith(".zip") && !asset.name.includes("dbg")
            );
            if (!asset) {
              core.setFailed("Failed to retrieve xemu-hdd-image.");
              return;
            }

            const response = await github.rest.repos.getReleaseAsset({
                owner: "xemu-project",
                repo: "xemu-hdd-image",
                asset_id: asset.id,
                headers: { "Accept": "application/octet-stream" }
            });

            const fs = require('fs');
            fs.writeFileSync("xemu-hdd-image.zip", Buffer.from(response.data));

      - name: Extract HDD image
        run: |
          unzip xemu-hdd-image.zip

      - uses: actions/download-artifact@v4
        with:
          name: nxdk_pgraph_tests_xiso.iso
          path: .

      - name: Clone tree
        uses: actions/checkout@v3
        with:
          path: nxdk_pgraph_tests

      - name: Run Xemu
        uses: ./nxdk_pgraph_tests/.github/run-xemu-action
        id: run-xemu
        with:
          xemu-image: xemu.AppImage
          iso-image: nxdk_pgraph_tests_xiso.iso
          hdd-image: xbox_hdd.qcow2

  CreateRelease:
    needs: [ BuildISO ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Clone tree
        uses: actions/checkout@v3
        with:
          path: nxdk_pgraph_tests

      - name: Calculate version
        id: calculate-version
        run: |
          echo "version=$(date +'%Y-%m-%d_%H-%M-%S-%N')" >> $GITHUB_OUTPUT

      - name: Create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.calculate-version.outputs.version }}

      - uses: actions/download-artifact@v4
        with:
          name: nxdk_pgraph_tests_xiso.iso
          path: .

      - name: Create release
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: "NV2A PGRAPH tests ${{ steps.tag_version.outputs.new_version }}"
          prerelease: false
          draft: false
          files: |
            nxdk_pgraph_tests_xiso.iso
