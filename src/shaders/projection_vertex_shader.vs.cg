struct vIn {
  float3 norm : NORMAL;
  float2 tex : TEXCOORD;
  float3 pos : POSITION;
};

struct vOut {
  float4 pos : POSITION;
  float4 col : COLOR;
  float fog : FOG;
  float2 tex0 : TEXCOORD0;
};

vOut main(vIn I,
          uniform float4x4 model_matrix,
          uniform float4x4 view_matrix,
          uniform float4x4 projection_matrix,
          uniform float4 camera_pos,
          uniform float4 light_dir) {
  vOut result;

  // Transform position and normal
  float4 pos = mul(float4(I.pos.xyz, 1.0), model_matrix);
  float3 norm = normalize(mul(float4(I.norm.xyz, 0.0f), model_matrix).xyz);

  // Calculate diffuse light direction and intensity
  float3 light_direction = normalize(light_dir.xyz);
  float light_diffuse = max(dot(norm.xyz, light_direction), 0);

  // Transform pos to screen space
  pos = mul(pos, view_matrix);
  pos = mul(pos, projection_matrix);
  pos.xyz = pos.xyz / pos.w;

  result.pos = pos;
  result.col = light_diffuse;
  result.fog = result.pos.w;
  result.tex0 = I.tex;

  return result;
}
