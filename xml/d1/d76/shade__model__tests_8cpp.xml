<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d1/d76/shade__model__tests_8cpp" kind="file" language="C++">
    <compoundname>shade_model_tests.cpp</compoundname>
    <includes refid="d0/dbf/shade__model__tests_8h" local="yes">shade_model_tests.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes refid="d7/d31/pbkit__ext_8h" local="yes">pbkit_ext.h</includes>
    <includes refid="d7/d3a/perspective__vertex__shader__no__lighting_8h" local="yes">shaders/perspective_vertex_shader_no_lighting.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes local="yes">texture_generator.h</includes>
    <includes local="yes">vertex_buffer.h</includes>
    <incdepgraph>
      <node id="6">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>shaders/perspective_vertex_shader_no_lighting.h</label>
        <link refid="d7/d3a/perspective__vertex__shader__no__lighting_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/shade_model_tests.cpp</label>
        <link refid="d1/d76/shade__model__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>shade_model_tests.h</label>
        <link refid="d0/dbf/shade__model__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>atomic</label>
      </node>
      <node id="24">
        <label>chrono</label>
      </node>
      <node id="12">
        <label>cstdint</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="29">
        <label>list</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="16">
        <label>nv2astate.h</label>
      </node>
      <node id="17">
        <label>nxdk_ext.h</label>
      </node>
      <node id="15">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="9">
        <label>printf/printf.h</label>
      </node>
      <node id="18">
        <label>pushbuffer.h</label>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="31">
        <label>shaders/perspective_vertex_shader.h</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="19">
        <label>texture_format.h</label>
      </node>
      <node id="32">
        <label>texture_generator.h</label>
      </node>
      <node id="20">
        <label>texture_stage.h</label>
      </node>
      <node id="14">
        <label>thread</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="21">
        <label>vertex_buffer.h</label>
      </node>
      <node id="7">
        <label>windows.h</label>
      </node>
      <node id="22">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1ada228e7e9825e0aa7ab7f00fae74581a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kShadeModel[]</definition>
        <argsstring>[]</argsstring>
        <name>kShadeModel</name>
        <initializer>= {
    NV097_SET_SHADE_MODEL_FLAT,
    NV097_SET_SHADE_MODEL_SMOOTH,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="12" column="27" bodyfile="src/tests/shade_model_tests.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1a28d1f998264a6b901572f45f16e74681" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kProvokingVertex[]</definition>
        <argsstring>[]</argsstring>
        <name>kProvokingVertex</name>
        <initializer>= {
    NV097_SET_FLAT_SHADE_OP_VERTEX_FIRST,
    NV097_SET_FLAT_SHADE_OP_VERTEX_LAST,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="17" column="27" bodyfile="src/tests/shade_model_tests.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1aa4b94248f7d0ffa62bf1da7159703bd3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kFixedUntextured[]</definition>
        <argsstring>[]</argsstring>
        <name>kFixedUntextured</name>
        <initializer>= &quot;Fixed&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="22" column="29" bodyfile="src/tests/shade_model_tests.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1a333d4dbf371164b0ea9d5de4e8ea721e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kFixedTextured[]</definition>
        <argsstring>[]</argsstring>
        <name>kFixedTextured</name>
        <initializer>= &quot;FixedTex&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="23" column="29" bodyfile="src/tests/shade_model_tests.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1abab06e216ae360a93e72650440907d99" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kUntextured[]</definition>
        <argsstring>[]</argsstring>
        <name>kUntextured</name>
        <initializer>= &quot;Prog&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="24" column="29" bodyfile="src/tests/shade_model_tests.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1a63a5044a382a6d1aeec7c063a99f273f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kTextured[]</definition>
        <argsstring>[]</argsstring>
        <name>kTextured</name>
        <initializer>= &quot;ProgTex&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="25" column="29" bodyfile="src/tests/shade_model_tests.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1a36d37b95f404c3f71ea6de6e32215abb" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr TestHost::DrawPrimitive</type>
        <definition>constexpr TestHost::DrawPrimitive kPrimitives[]</definition>
        <argsstring>[]</argsstring>
        <name>kPrimitives</name>
        <initializer>= {
    TestHost::PRIMITIVE_TRIANGLES, TestHost::PRIMITIVE_TRIANGLE_STRIP, TestHost::PRIMITIVE_TRIANGLE_FAN,
    TestHost::PRIMITIVE_QUADS,     TestHost::PRIMITIVE_QUAD_STRIP,     TestHost::PRIMITIVE_POLYGON,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="27" column="42" bodyfile="src/tests/shade_model_tests.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1a2834ed480a253f86d753de0e2a6f5b9c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kLeft</definition>
        <argsstring></argsstring>
        <name>kLeft</name>
        <initializer>= -2.75f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="32" column="24" bodyfile="src/tests/shade_model_tests.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1afeae9e530dd58946aa85573d30568106" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kRight</definition>
        <argsstring></argsstring>
        <name>kRight</name>
        <initializer>= 2.75f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="33" column="24" bodyfile="src/tests/shade_model_tests.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1a27e9dd9aa7305c5a29239a28fd6d30ce" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kTop</definition>
        <argsstring></argsstring>
        <name>kTop</name>
        <initializer>= 1.75f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="34" column="24" bodyfile="src/tests/shade_model_tests.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1ad68582093cb08505ce80e7f96c5825ce" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kBottom</definition>
        <argsstring></argsstring>
        <name>kBottom</name>
        <initializer>= -1.75f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="35" column="24" bodyfile="src/tests/shade_model_tests.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1ab06b0d3d79f15cf9b06b9ad35a53aa41" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTextureSize</definition>
        <argsstring></argsstring>
        <name>kTextureSize</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="37" column="20" bodyfile="src/tests/shade_model_tests.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1a02d8d1062fa9a52c7461bd0748cd5be1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kTestNormals[][3]</definition>
        <argsstring>[][3]</argsstring>
        <name>kTestNormals</name>
        <initializer>= {
    {0.5773502691896258f, -0.5773502691896258f, 0.5773502691896258f},
    {0.0f, 0.0f, 1.0f},
    {0.4082482904638631f, 0.4082482904638631f, 0.8164965809277261f},
    {-0.66667f, 0.66667f, 0.3333333f},
    {0.3015, 0.3015, 0.9045},
    {0.4851, 0.4851, 0.7276},
    {0.6247, 0.6247, 0.4685},
    {0.2673, 0.5345, 0.8018},
    {0.6767, 0.6767, 0.29},
    {0.7317, 0.3049, 0.6097},
    {0.6172, 0.7715, 0.1543},
    {0.6527, 0.272, 0.7071},
    {0.7861, 0.3276, 0.5241},
    {0.6509, 0.6509, 0.3906},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="121" column="24" bodyfile="src/tests/shade_model_tests.cpp" bodystart="121" bodyend="136"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d76/shade__model__tests_8cpp_1ad97f94bd981afc0b82ab458dfc8c0ab8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTestDiffuse[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestDiffuse</name>
        <initializer>= {
    0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFCCCCCC, 0xFFFF33CC, 0xFFFFCC33, 0xFFCCFF33,
    0xFF33FFCC, 0xFF33CCFF, 0xFFCC33FF, 0xFF991111, 0xFF119911, 0xFF111199, 0xFF666666,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="138" column="27" bodyfile="src/tests/shade_model_tests.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a1321b5cdd9c539f9c897c171fba7ee8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string MakeTestName</definition>
        <argsstring>(const char *prefix, uint32_t shade_model, uint32_t provoking_vertex, TestHost::DrawPrimitive)</argsstring>
        <name>MakeTestName</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shade_model</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>provoking_vertex</declname>
        </param>
        <param>
          <type>TestHost::DrawPrimitive</type>
          <defname>primitive</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="461" column="20" bodyfile="src/tests/shade_model_tests.cpp" bodystart="461" bodyend="498" declfile="src/tests/shade_model_tests.cpp" declline="39" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a1da3d5289065b4c3f7044651c7507486" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetLightAndMaterial</definition>
        <argsstring>()</argsstring>
        <name>SetLightAndMaterial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="42" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="42" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a5681c02ddebea68c954c5bd9e0aad888" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void add_vertex</definition>
        <argsstring>(TestHost &amp;host, float x, float y, uint32_t index, float u, float v, float w=1.0f)</argsstring>
        <name>add_vertex</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>float</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="143" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a9b7ac404a736e081028ce1ebb7a50194" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DrawTriangles</definition>
        <argsstring>(TestHost &amp;host, float w, float w_inc)</argsstring>
        <name>DrawTriangles</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w_inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="150" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="150" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a47b1cc2d09f541a39aa3531d53b02baa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DrawTriangleStrip</definition>
        <argsstring>(TestHost &amp;host, float w, float w_inc)</argsstring>
        <name>DrawTriangleStrip</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w_inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="175" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="175" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1ac6ec4e464621b688b4d99dadde09c8f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DrawTriangleFan</definition>
        <argsstring>(TestHost &amp;host, float w, float w_inc)</argsstring>
        <name>DrawTriangleFan</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w_inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="202" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="202" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1aa45eea1e07398ac36400f2ebb017c051" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DrawQuads</definition>
        <argsstring>(TestHost &amp;host, float w, float w_inc)</argsstring>
        <name>DrawQuads</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w_inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="228" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="228" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a46fd62f3361940fc061ed3a2d9b6bff0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DrawQuadStrip</definition>
        <argsstring>(TestHost &amp;host, float w, float w_inc)</argsstring>
        <name>DrawQuadStrip</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w_inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="252" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="252" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a8698d6bfd9be166f5d46d7dfc82f3062" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DrawPolygon</definition>
        <argsstring>(TestHost &amp;host, float w, float w_inc)</argsstring>
        <name>DrawPolygon</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w_inc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="270" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="270" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1a8e44b03036d87c1a523f12548f3bdd9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Draw</definition>
        <argsstring>(TestHost &amp;host, TestHost::DrawPrimitive primitive, float w=1.0f, float w_inc=0.0f)</argsstring>
        <name>Draw</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>TestHost::DrawPrimitive</type>
          <declname>primitive</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
          <defval>1.0f</defval>
        </param>
        <param>
          <type>float</type>
          <declname>w_inc</declname>
          <defval>0.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="285" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="285" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="d1/d76/shade__model__tests_8cpp_1ad48006484cd812baa4cfa0e4da2a2cd6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetShader</definition>
        <argsstring>(TestHost &amp;host_)</argsstring>
        <name>SetShader</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/shade_model_tests.cpp" line="362" column="13" bodyfile="src/tests/shade_model_tests.cpp" bodystart="362" bodyend="375"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;shade_model_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pbkit_ext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/perspective_vertex_shader_no_lighting.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vertex_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kShadeModel[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_SHADE_MODEL_FLAT,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_SHADE_MODEL_SMOOTH,</highlight></codeline>
<codeline lineno="15"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kProvokingVertex[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_FLAT_SHADE_OP_VERTEX_FIRST,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_FLAT_SHADE_OP_VERTEX_LAST,</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kFixedUntextured[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Fixed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kFixedTextured[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FixedTex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kUntextured[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Prog&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTextured[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ProgTex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>TestHost::DrawPrimitive<sp/>kPrimitives[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>TestHost::PRIMITIVE_TRIANGLES,<sp/>TestHost::PRIMITIVE_TRIANGLE_STRIP,<sp/>TestHost::PRIMITIVE_TRIANGLE_FAN,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>TestHost::PRIMITIVE_QUADS,<sp/><sp/><sp/><sp/><sp/>TestHost::PRIMITIVE_QUAD_STRIP,<sp/><sp/><sp/><sp/><sp/>TestHost::PRIMITIVE_POLYGON,</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>-2.75f;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kRight<sp/>=<sp/>2.75f;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>1.75f;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kBottom<sp/>=<sp/>-1.75f;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTextureSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>MakeTestName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/>uint32_t<sp/>shade_model,<sp/>uint32_t<sp/>provoking_vertex,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::DrawPrimitive);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetLightAndMaterial()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_PARAMS,<sp/>0xbf34dce5);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(0x09e4,<sp/>0xc020743f);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(0x09e8,<sp/>0x40333d06);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(0x09ec,<sp/>0xbf003612);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(0x09f0,<sp/>0xbff852a5);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(0x09f4,<sp/>0x401c1bce);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_COLOR_MATERIAL,<sp/>NV097_SET_COLOR_MATERIAL_ALL_FROM_MATERIAL);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SCENE_AMBIENT_COLOR,<sp/>0x0,<sp/>0x0,<sp/>0x0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_MATERIAL_EMISSION,<sp/>0x0,<sp/>0x0,<sp/>0x0);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_MATERIAL_ALPHA,<sp/>1.0f);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_AMBIENT_COLOR,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_LIGHT_DIFFUSE_COLOR,<sp/>0.0f,<sp/>1.0f,<sp/>0.7f);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_SPECULAR_COLOR,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_LOCAL_RANGE,<sp/>0x7149f2ca);<sp/><sp/></highlight><highlight class="comment">//<sp/>1e30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_INFINITE_HALF_VECTOR,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_LIGHT_INFINITE_DIRECTION,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_ENABLE_MASK,<sp/>NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">ShadeModelTests::ShadeModelTests(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config&amp;<sp/>config)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Shade<sp/>model&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>primitive<sp/>:<sp/>kPrimitives)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>provoking_vertex<sp/>:<sp/>kProvokingVertex)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>model<sp/>:<sp/>kShadeModel)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(kFixedUntextured,<sp/>model,<sp/>provoking_vertex,<sp/>primitive);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>model,<sp/>provoking_vertex,<sp/>primitive]()<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestShadeModelFixed(model,<sp/>provoking_vertex,<sp/>primitive,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;W_&quot;</highlight><highlight class="normal"><sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>model,<sp/>provoking_vertex,<sp/>primitive]()<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestShadeModelFixed_W(model,<sp/>provoking_vertex,<sp/>primitive,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0.5f,<sp/>0.05f);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(kFixedTextured,<sp/>model,<sp/>provoking_vertex,<sp/>primitive);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>model,<sp/>provoking_vertex,<sp/>primitive]()<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestShadeModelFixed(model,<sp/>provoking_vertex,<sp/>primitive,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;W_&quot;</highlight><highlight class="normal"><sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>model,<sp/>provoking_vertex,<sp/>primitive]()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestShadeModelFixed_W(model,<sp/>provoking_vertex,<sp/>primitive,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0.5f,<sp/>0.05f);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(kUntextured,<sp/>model,<sp/>provoking_vertex,<sp/>primitive);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>model,<sp/>provoking_vertex,<sp/>primitive]()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestShadeModel(model,<sp/>provoking_vertex,<sp/>primitive,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(kTextured,<sp/>model,<sp/>provoking_vertex,<sp/>primitive);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>model,<sp/>provoking_vertex,<sp/>primitive]()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestShadeModel(model,<sp/>provoking_vertex,<sp/>primitive,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/dff/classShadeModelTests_1ad03d1094e691ec1a95a6a93b68e8ce34" kindref="member">ShadeModelTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>SetLightAndMaterial();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerSize<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerboardA<sp/>=<sp/>0xFF20C0C0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerboardB<sp/>=<sp/>0xFF000070;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBACheckerboard(host_.GetTextureMemory(),<sp/>0,<sp/>0,<sp/>kTextureSize,<sp/>kTextureSize,<sp/>kTextureSize<sp/>*<sp/>4,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kCheckerboardA,<sp/>kCheckerboardB,<sp/>kCheckerSize);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kTestNormals[][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.5773502691896258f,<sp/>-0.5773502691896258f,<sp/>0.5773502691896258f},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.0f,<sp/>0.0f,<sp/>1.0f},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.4082482904638631f,<sp/>0.4082482904638631f,<sp/>0.8164965809277261f},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{-0.66667f,<sp/>0.66667f,<sp/>0.3333333f},</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.3015,<sp/>0.3015,<sp/>0.9045},</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.4851,<sp/>0.4851,<sp/>0.7276},</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6247,<sp/>0.6247,<sp/>0.4685},</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.2673,<sp/>0.5345,<sp/>0.8018},</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6767,<sp/>0.6767,<sp/>0.29},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.7317,<sp/>0.3049,<sp/>0.6097},</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6172,<sp/>0.7715,<sp/>0.1543},</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6527,<sp/>0.272,<sp/>0.7071},</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.7861,<sp/>0.3276,<sp/>0.5241},</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6509,<sp/>0.6509,<sp/>0.3906},</highlight></codeline>
<codeline lineno="136"><highlight class="normal">};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTestDiffuse[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>0xFFFF0000,<sp/>0xFF00FF00,<sp/>0xFF0000FF,<sp/>0xFFCCCCCC,<sp/>0xFFFF33CC,<sp/>0xFFFFCC33,<sp/>0xFFCCFF33,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>0xFF33FFCC,<sp/>0xFF33CCFF,<sp/>0xFFCC33FF,<sp/>0xFF991111,<sp/>0xFF119911,<sp/>0xFF111199,<sp/>0xFF666666,</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_vertex(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/>uint32_t<sp/>index,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>1.0f)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>host.SetNormal(kTestNormals[index][0],<sp/>kTestNormals[index][1],<sp/>kTestNormals[index][2]);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>host.SetDiffuse(kTestDiffuse[index]);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>host.SetTexCoord0(u,<sp/>v);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>host.SetVertex(x,<sp/>y,<sp/>0.1f,<sp/>w);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawTriangles(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_TRIANGLES);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>kTop,<sp/>index++,<sp/>0.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>kTop,<sp/>index++,<sp/>1.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>0.0f,<sp/>index++,<sp/>0.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>kTop,<sp/>index++,<sp/>1.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.10f,<sp/>kBottom,<sp/>index++,<sp/>0.1f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.25f,<sp/>0.0f,<sp/>index++,<sp/>0.25f,<sp/>0.5f,<sp/>w);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-0.4f,<sp/>kBottom,<sp/>index++,<sp/>0.5f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-1.4f,<sp/>-1.4,<sp/>index++,<sp/>0.2f,<sp/>0.5f,<sp/>w);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>0.0f,<sp/>index++,<sp/>1.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawTriangleStrip(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_TRIANGLE_STRIP);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>0.0f,<sp/>index++,<sp/>0.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-2.25f,<sp/>kTop,<sp/>index++,<sp/>0.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-2.0f,<sp/>kBottom,<sp/>index++,<sp/>0.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-1.3f,<sp/>1.6,<sp/>index++,<sp/>1.15f,<sp/>0.25f,<sp/>w);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>-1.5f,<sp/>index++,<sp/>1.3f,<sp/>0.75f,<sp/>w);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.4f,<sp/>1.0f,<sp/>index++,<sp/>1.7f,<sp/>0.33f,<sp/>w);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>1.4f,<sp/>-0.6f,<sp/>index++,<sp/>0.7f,<sp/>0.7f,<sp/>w);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>kTop,<sp/>index++,<sp/>0.5f,<sp/>0.5f,<sp/>w);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawTriangleFan(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_TRIANGLE_FAN);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>-0.75f,<sp/>index++,<sp/>1.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-2.25f,<sp/>kBottom,<sp/>index++,<sp/>0.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-2.0f,<sp/>kTop,<sp/>index++,<sp/>0.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-0.6f,<sp/>0.65f,<sp/>index++,<sp/>1.15f,<sp/>0.25f,<sp/>w);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>1.5f,<sp/>index++,<sp/>1.3f,<sp/>0.75f,<sp/>w);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.4f,<sp/>1.0f,<sp/>index++,<sp/>1.7f,<sp/>0.33f,<sp/>w);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>2.4f,<sp/>0.6f,<sp/>index++,<sp/>0.7f,<sp/>0.7f,<sp/>w);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>kBottom,<sp/>index++,<sp/>0.5f,<sp/>0.5f,<sp/>w);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawQuads(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>kTop,<sp/>index++,<sp/>0.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-0.4f,<sp/>kTop,<sp/>index++,<sp/>1.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-0.4f,<sp/>kBottom,<sp/>index++,<sp/>1.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>kBottom,<sp/>index++,<sp/>0.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.15f,<sp/>kTop,<sp/>index++,<sp/>0.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>kTop,<sp/>index++,<sp/>1.0f,<sp/>0.0f,<sp/>w);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>kBottom,<sp/>index++,<sp/>1.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>kBottom,<sp/>index++,<sp/>0.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawQuadStrip(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_QUAD_STRIP);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>kBottom,<sp/>index++,<sp/>0.33f,<sp/>0.33f,<sp/>w);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>kTop,<sp/>index++,<sp/>1.0f,<sp/>1.0f,<sp/>w);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>-1.35f,<sp/>index++,<sp/>0.7f,<sp/>0.1f,<sp/>w);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>0.0f,<sp/>1.0f,<sp/>index++,<sp/>0.0f,<sp/>0.9f,<sp/>w);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>kBottom,<sp/>index++,<sp/>0.33f,<sp/>0.33f,<sp/>w);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>kTop,<sp/>index++,<sp/>0.0f,<sp/>0.7f,<sp/>w);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawPolygon(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_POLYGON);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kLeft,<sp/>kBottom,<sp/>index++,<sp/>0.33f,<sp/>0.33f,<sp/>w);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-1.4f,<sp/>1.1f,<sp/>index++,<sp/>0.7f,<sp/>0.1f,<sp/>w);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>-0.3f,<sp/>kTop,<sp/>index++,<sp/>0.1f,<sp/>0.7f,<sp/>w);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>2.0f,<sp/>0.3f,<sp/>index++,<sp/>0.0f,<sp/>0.9f,<sp/>w);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>w<sp/>+=<sp/>w_inc;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>add_vertex(host,<sp/>kRight,<sp/>-1.5f,<sp/>index++,<sp/>0.7f,<sp/>0.7f,<sp/>w);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Draw(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>TestHost::DrawPrimitive<sp/>primitive,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>1.0f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc<sp/>=<sp/>0.0f)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(primitive)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_LINES:</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_POINTS:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_LINE_LOOP:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_LINE_STRIP:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(!</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_TRIANGLES:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DrawTriangles(host,<sp/>w,<sp/>w_inc);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_TRIANGLE_STRIP:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DrawTriangleStrip(host,<sp/>w,<sp/>w_inc);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_TRIANGLE_FAN:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DrawTriangleFan(host,<sp/>w,<sp/>w_inc);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_QUADS:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DrawQuads(host,<sp/>w,<sp/>w_inc);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_QUAD_STRIP:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DrawQuadStrip(host,<sp/>w,<sp/>w_inc);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_POLYGON:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DrawPolygon(host,<sp/>w,<sp/>w_inc);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShadeModelTests::TestShadeModelFixed(uint32_t<sp/>model,<sp/>uint32_t<sp/>provoking_vertex,<sp/>TestHost::DrawPrimitive<sp/>primitive,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>texture)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(texture<sp/>?<sp/>kFixedTextured<sp/>:<sp/>kFixedUntextured,<sp/>model,<sp/>provoking_vertex,<sp/>primitive);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF2C302E;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHTING_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SHADE_MODEL,<sp/>model);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_FLAT_SHADE_OP,<sp/>provoking_vertex);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_CONTROL,<sp/>0x10001);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texture)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX0);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>texture_stage<sp/>=<sp/>host_.GetTextureStage(0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetTextureDimensions(kTextureSize,<sp/>kTextureSize);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>Draw(host_,<sp/>primitive);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texture)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_NONE);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetShader(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host_)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depth_buffer_max_value<sp/>=<sp/>host_.GetMaxDepthBufferValue();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;PerspectiveVertexShaderNoLighting&gt;(host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight(),</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>depth_buffer_max_value,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>1.0f,<sp/>200.0f);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUseD3DStyleViewport();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>camera_position<sp/>=<sp/>{0.0f,<sp/>0.0f,<sp/>-7.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>camera_look_at<sp/>=<sp/>{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;LookAt(camera_position,<sp/>camera_look_at);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShadeModelTests::TestShadeModel(uint32_t<sp/>model,<sp/>uint32_t<sp/>provoking_vertex,<sp/>TestHost::DrawPrimitive<sp/>primitive,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>texture)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>SetShader(host_);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(texture<sp/>?<sp/>kTextured<sp/>:<sp/>kUntextured,<sp/>model,<sp/>provoking_vertex,<sp/>primitive);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF2C302E;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHTING_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SHADE_MODEL,<sp/>model);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_FLAT_SHADE_OP,<sp/>provoking_vertex);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_CONTROL,<sp/>0x10001);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texture)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX0);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>texture_stage<sp/>=<sp/>host_.GetTextureStage(0);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetTextureDimensions(kTextureSize,<sp/>kTextureSize);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>Draw(host_,<sp/>primitive);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texture)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_NONE);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShadeModelTests::TestShadeModelFixed_W(uint32_t<sp/>model,<sp/>uint32_t<sp/>provoking_vertex,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::DrawPrimitive<sp/>primitive,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>texture,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w_inc)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;W_&quot;</highlight><highlight class="normal"><sp/>+<sp/>MakeTestName(texture<sp/>?<sp/>kFixedTextured<sp/>:<sp/>kFixedUntextured,<sp/>model,<sp/>provoking_vertex,<sp/>primitive);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF2C302E;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHTING_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SHADE_MODEL,<sp/>model);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_FLAT_SHADE_OP,<sp/>provoking_vertex);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_CONTROL,<sp/>0x10001);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texture)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX0);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>texture_stage<sp/>=<sp/>host_.GetTextureStage(0);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetTextureDimensions(kTextureSize,<sp/>kTextureSize);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>Draw(host_,<sp/>primitive,<sp/>w,<sp/>w_inc);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(texture)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_NONE);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>MakeTestName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/>uint32_t<sp/>shade_model,<sp/>uint32_t<sp/>provoking_vertex,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::DrawPrimitive<sp/>primitive)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>primitive_name;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(primitive)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_TRIANGLES:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Tri&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_TRIANGLE_STRIP:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TriStrip&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_TRIANGLE_FAN:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TriFan&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_QUADS:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Quad&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_QUAD_STRIP:</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;QuadStrip&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TestHost::PRIMITIVE_POLYGON:</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>primitive_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Poly&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT(!</highlight><highlight class="stringliteral">&quot;Not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[32]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;%s_%s_%s_%s&quot;</highlight><highlight class="normal">,<sp/>prefix,<sp/>primitive_name,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shade_model<sp/>==<sp/>NV097_SET_SHADE_MODEL_SMOOTH<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Smooth&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Flat&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provoking_vertex<sp/>==<sp/>NV097_SET_FLAT_SHADE_OP_VERTEX_FIRST<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;First&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Last&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/shade_model_tests.cpp"/>
  </compounddef>
</doxygen>
