<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d1/d80/pvideo__tests_8cpp" kind="file" language="C++">
    <compoundname>pvideo_tests.cpp</compoundname>
    <includes refid="da/db8/pvideo__tests_8h" local="yes">pvideo_tests.h</includes>
    <includes local="no">windows.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes refid="dc/d9f/pvideo__control_8h" local="yes">pvideo_control.h</includes>
    <includes local="yes">shaders/passthrough_vertex_shader.h</includes>
    <includes local="yes">texture_generator.h</includes>
    <includes local="yes">xbox-swizzle/swizzle.h</includes>
    <incdepgraph>
      <node id="6">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>pvideo_control.h</label>
        <link refid="dc/d9f/pvideo__control_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/pvideo_tests.cpp</label>
        <link refid="d1/d80/pvideo__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pvideo_tests.h</label>
        <link refid="da/db8/pvideo__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>atomic</label>
      </node>
      <node id="24">
        <label>chrono</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="29">
        <label>list</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="16">
        <label>nv2astate.h</label>
      </node>
      <node id="17">
        <label>nxdk_ext.h</label>
      </node>
      <node id="15">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="8">
        <label>printf/printf.h</label>
      </node>
      <node id="18">
        <label>pushbuffer.h</label>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="31">
        <label>shaders/passthrough_vertex_shader.h</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="19">
        <label>texture_format.h</label>
      </node>
      <node id="32">
        <label>texture_generator.h</label>
      </node>
      <node id="20">
        <label>texture_stage.h</label>
      </node>
      <node id="13">
        <label>thread</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="21">
        <label>vertex_buffer.h</label>
      </node>
      <node id="7">
        <label>windows.h</label>
      </node>
      <node id="33">
        <label>xbox-swizzle/swizzle.h</label>
      </node>
      <node id="22">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1ad6ca52c3ec462aeb78aeaf82f62a9af6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kStopBehaviorTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kStopBehaviorTest</name>
        <initializer>= &quot;Stop&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="18" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a32ec9e5bfa2ea283c5e3a7e5f30892c5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInMaxUnityTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInMaxUnityTest</name>
        <initializer>= &quot;Size In Max - dI/dO = 1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="21" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1affa9ad0f1ff66540def18882e71f3ee5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInMaxLargeTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInMaxLargeTest</name>
        <initializer>= &quot;Size In Max - dI/dO &gt; 1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="22" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a3f59d5f4db9b51362376874362434dfa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInMaxSmallTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInMaxSmallTest</name>
        <initializer>= &quot;Size In Max - dI/dO &lt; 1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="23" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1ad4922baccdb3d7edfe65d21a88ff3019" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInMaxOutSmallUnityTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInMaxOutSmallUnityTest</name>
        <initializer>= &quot;Size In Max Out Small - dI/dO = 1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="24" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a275e4d9a856fd5fbadda91d653580db8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInMaxOutSmallCorrectTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInMaxOutSmallCorrectTest</name>
        <initializer>= &quot;Size In Max Out Small - dI/d0 Correct&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="25" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a5b6234fea3706aaf6c0a7863c30726ea" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInLargerThanSizeOutUnityTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInLargerThanSizeOutUnityTest</name>
        <initializer>= &quot;Size In larger than out - dI/dO = 1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="26" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a81b8963926c8bae45f46733b9f6e28a5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInLargerThanSizeOutCorrectTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInLargerThanSizeOutCorrectTest</name>
        <initializer>= &quot;Size In larger than out - dI/d0 Correct&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="27" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a1a3c42a0b1f08028e5247098d3a36ef9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInSmallerThanSizeOutUnityTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInSmallerThanSizeOutUnityTest</name>
        <initializer>= &quot;Size In smaller than out - dI/dO = 1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="28" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a6695ed9f835e23dbd8d912da85066d63" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kSizeInSmallerThanSizeOutCorrectTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kSizeInSmallerThanSizeOutCorrectTest</name>
        <initializer>= &quot;Size In smaller than out - dI/d0 Correct&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="29" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1aae017dcf60e471c5c578b1d699b17dd2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kPitchTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kPitchTest</name>
        <initializer>= &quot;Pitch&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="30" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1aae6a364fd53bd3d7dafeef7381eac60c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kPitchLessThanCompactTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kPitchLessThanCompactTest</name>
        <initializer>= &quot;Pitch less than compact&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="31" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1aba2240c700fbfe63baf4cd64d16dced4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kPitchLargerThanCompactTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kPitchLargerThanCompactTest</name>
        <initializer>= &quot;Pitch larger than compact&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="32" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1acb654e804c5dfd160ab74a37ece94926" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kPALIntoNTSCTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kPALIntoNTSCTest</name>
        <initializer>= &quot;PAL into NTSC overlay&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="33" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a88d1edfe1e7f41146cf3f811185e61bf" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kOverlay0Test[]</definition>
        <argsstring>[]</argsstring>
        <name>kOverlay0Test</name>
        <initializer>= &quot;Overlay0&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="35" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1acff5fed7d2261e80e71d4be6422696b0" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kOverlay1Test[]</definition>
        <argsstring>[]</argsstring>
        <name>kOverlay1Test</name>
        <initializer>= &quot;Overlay1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="36" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a4e70a7cc49ae21621a0d9bfcc2f944f8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kOverlappedOverlaysTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kOverlappedOverlaysTest</name>
        <initializer>= &quot;Overlapped overlays&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="37" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a78c3bc40cad8f8ba75e88f3ac9f1e654" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kColorKeyTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kColorKeyTest</name>
        <initializer>= &quot;Color key&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="38" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a551ecbc81a20348343253659659005b8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kInPointTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kInPointTest</name>
        <initializer>= &quot;In point&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="39" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a5094628ef1ddff6c66ed44fe578fc64e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kInSizeTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kInSizeTest</name>
        <initializer>= &quot;In size&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="40" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a9ee42a4c9042b3661923ced563f12674" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kOutPointTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kOutPointTest</name>
        <initializer>= &quot;Out point&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="41" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a5b36f5da553084738f447ca937683194" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kOutSizeTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kOutSizeTest</name>
        <initializer>= &quot;Out size&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="42" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d80/pvideo__tests_8cpp_1a1f009f45470d0b2c3dfb8f381f73cd08" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kRatioTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kRatioTest</name>
        <initializer>= &quot;Ratio&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="43" column="29" bodyfile="src/tests/pvideo_tests.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d1/d80/pvideo__tests_8cpp_1a32bdbdc5c73ed1ab4ec4aeb59ad4d7f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetVideoFrameCR8YB8CB8YA8</definition>
        <argsstring>(uint8_t *dest, const void *pixels, uint32_t width, uint32_t height)</argsstring>
        <name>SetVideoFrameCR8YB8CB8YA8</name>
        <param>
          <type>uint8_t *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pixels</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="109" column="13" bodyfile="src/tests/pvideo_tests.cpp" bodystart="109" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d1/d80/pvideo__tests_8cpp_1ac093d3cf62df34e945fa059d77218ff7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DrawBorder</definition>
        <argsstring>(uint8_t *target, uint32_t width, uint32_t height, uint32_t color=0xFFFFFFFF)</argsstring>
        <name>DrawBorder</name>
        <param>
          <type>uint8_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
          <defval>0xFFFFFFFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="132" column="13" bodyfile="src/tests/pvideo_tests.cpp" bodystart="132" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="d1/d80/pvideo__tests_8cpp_1a9594db93450d974a987dd29bed892ac4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetCheckerboardVideoFrameCR8YB8CB8YA8</definition>
        <argsstring>(uint8_t *target, uint32_t first_color, uint32_t second_color, uint32_t checker_size, uint32_t width, uint32_t height, uint32_t x_offset=0, uint32_t y_offset=0)</argsstring>
        <name>SetCheckerboardVideoFrameCR8YB8CB8YA8</name>
        <param>
          <type>uint8_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>first_color</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>second_color</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>checker_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>x_offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="149" column="13" bodyfile="src/tests/pvideo_tests.cpp" bodystart="149" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="d1/d80/pvideo__tests_8cpp_1a06a554fc64947e52c49bbbd6b286e91e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetTestPatternVideoFrameCR8YB8CB8YA8</definition>
        <argsstring>(uint8_t *target, uint32_t width, uint32_t height, uint32_t column_interval=0)</argsstring>
        <name>SetTestPatternVideoFrameCR8YB8CB8YA8</name>
        <param>
          <type>uint8_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>column_interval</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="159" column="13" bodyfile="src/tests/pvideo_tests.cpp" bodystart="159" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="d1/d80/pvideo__tests_8cpp_1adb7aafcb29eeb1ac690f45d65bd3b96e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetStepPatternVideoFrameCR8YB8CB8YA8</definition>
        <argsstring>(uint8_t *target, uint32_t width, uint32_t height, uint32_t line_spacing=16, uint32_t background_color=0, bool draw_border=false)</argsstring>
        <name>SetStepPatternVideoFrameCR8YB8CB8YA8</name>
        <param>
          <type>uint8_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>line_spacing</declname>
          <defval>16</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>background_color</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>draw_border</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="179" column="13" bodyfile="src/tests/pvideo_tests.cpp" bodystart="179" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="d1/d80/pvideo__tests_8cpp_1acbc205616a569016bd9c277495a14715" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetLadderPatternVideoFrameCR8YB8CB8YA8</definition>
        <argsstring>(uint8_t *target, uint32_t width, uint32_t height, uint32_t column_interval=16)</argsstring>
        <name>SetLadderPatternVideoFrameCR8YB8CB8YA8</name>
        <param>
          <type>uint8_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>column_interval</declname>
          <defval>16</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="194" column="13" bodyfile="src/tests/pvideo_tests.cpp" bodystart="194" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="d1/d80/pvideo__tests_8cpp_1af414262a088d4858888c253032c4b7d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RenderColorKeyTargetScreen</definition>
        <argsstring>(TestHost &amp;host)</argsstring>
        <name>RenderColorKeyTargetScreen</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/pvideo_tests.cpp" line="790" column="13" bodyfile="src/tests/pvideo_tests.cpp" bodystart="790" bodyend="837"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;pvideo_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>pbkit<sp/>eats<sp/>any<sp/>PVIDEO<sp/>interrupts<sp/>in<sp/>`DPC`,<sp/>so<sp/>they<sp/>cannot<sp/>be<sp/>used<sp/>to<sp/>feed<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wmacro-redefined&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pvideo_control.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/passthrough_vertex_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xbox-swizzle/swizzle.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">PvideoControl;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kStopBehaviorTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Stop&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>constexpr<sp/>const<sp/>char<sp/>kAlternateStop[]<sp/>=<sp/>&quot;Stop<sp/>Alt&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInMaxUnityTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>Max<sp/>-<sp/>dI/dO<sp/>=<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInMaxLargeTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>Max<sp/>-<sp/>dI/dO<sp/>&gt;<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInMaxSmallTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>Max<sp/>-<sp/>dI/dO<sp/>&lt;<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInMaxOutSmallUnityTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>Max<sp/>Out<sp/>Small<sp/>-<sp/>dI/dO<sp/>=<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInMaxOutSmallCorrectTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>Max<sp/>Out<sp/>Small<sp/>-<sp/>dI/d0<sp/>Correct&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInLargerThanSizeOutUnityTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>larger<sp/>than<sp/>out<sp/>-<sp/>dI/dO<sp/>=<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInLargerThanSizeOutCorrectTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>larger<sp/>than<sp/>out<sp/>-<sp/>dI/d0<sp/>Correct&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInSmallerThanSizeOutUnityTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>smaller<sp/>than<sp/>out<sp/>-<sp/>dI/dO<sp/>=<sp/>1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kSizeInSmallerThanSizeOutCorrectTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>In<sp/>smaller<sp/>than<sp/>out<sp/>-<sp/>dI/d0<sp/>Correct&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPitchTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Pitch&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPitchLessThanCompactTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Pitch<sp/>less<sp/>than<sp/>compact&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPitchLargerThanCompactTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Pitch<sp/>larger<sp/>than<sp/>compact&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPALIntoNTSCTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PAL<sp/>into<sp/>NTSC<sp/>overlay&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kOverlay0Test[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Overlay0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kOverlay1Test[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Overlay1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kOverlappedOverlaysTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Overlapped<sp/>overlays&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kColorKeyTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Color<sp/>key&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kInPointTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>point&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kInSizeTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;In<sp/>size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kOutPointTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>point&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kOutSizeTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kRatioTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Ratio&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">PvideoTests::PvideoTests(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config<sp/>&amp;config)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;PVIDEO&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>tests_[kPALIntoNTSCTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestPALIntoNTSC();<sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>tests_[kStopBehaviorTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestStopBehavior();<sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>seems<sp/>to<sp/>permanently<sp/>kill<sp/>video<sp/>output<sp/>on<sp/>1.0<sp/>devkit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>tests_[kAlternateStop]<sp/>=<sp/>[this]()<sp/>{<sp/>TestAlternateStopBehavior();<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>tests_[kSizeInMaxUnityTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeInMaxUnityDeltas();<sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>tests_[kSizeInMaxLargeTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeInMaxLargeDelta();<sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>tests_[kSizeInMaxSmallTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeInMaxSmallDelta();<sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>tests_[kSizeInMaxOutSmallUnityTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeMaxOutSmallUnityDeltas();<sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>tests_[kSizeInMaxOutSmallCorrectTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeMaxOutSmallCorrectDeltas();<sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>tests_[kSizeInLargerThanSizeOutUnityTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeInLargerThanSizeOutUnityDeltas();<sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>tests_[kSizeInLargerThanSizeOutCorrectTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeInLargerThanSizeOutCorrectDeltas();<sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>tests_[kSizeInSmallerThanSizeOutUnityTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeInSmallerThanSizeOutUnityDeltas();<sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>tests_[kSizeInSmallerThanSizeOutCorrectTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSizeInSmallerThanSizeOutCorrectDeltas();<sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>tests_[kPitchTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestPitch();<sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>tests_[kPitchLessThanCompactTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestPitchLessThanCompact();<sp/>};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>tests_[kPitchLargerThanCompactTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestPitchLargerThanCompact();<sp/>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>tests_[kColorKeyTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestColorKey();<sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>tests_[kOverlay0Test]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestSimpleFullscreenOverlay0();<sp/>};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>tests_[kOverlay1Test]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestOverlay1();<sp/>};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>tests_[kOverlappedOverlaysTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestOverlappedOverlays();<sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>tests_[kInPointTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestInPoint();<sp/>};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>tests_[kInSizeTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestInSize();<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>tests_[kOutPointTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestOutPoint();<sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>tests_[kOutSizeTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestOutSize();<sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>tests_[kRatioTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestRatios();<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d4d/classPvideoTests_1a32786f982aa8f8ee6efadf57602aa163" kindref="member">PvideoTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::make_shared&lt;PassthroughVertexShader&gt;();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Twice<sp/>the<sp/>actual<sp/>space<sp/>needed<sp/>is<sp/>allocated<sp/>to<sp/>facilitate<sp/>tests<sp/>with<sp/>pitch<sp/>&gt;<sp/>compact.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>size<sp/>=<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>4<sp/>*<sp/>host_.GetFramebufferHeight();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>video_<sp/>=<sp/>(uint8_t<sp/>*)MmAllocateContiguousMemory(size);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>memset(video_,<sp/>0x7F,<sp/>size);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>video2_<sp/>=<sp/>(uint8_t<sp/>*)MmAllocateContiguousMemory(size);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>memset(video2_,<sp/>0x7F,<sp/>size);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d4d/classPvideoTests_1a6f3c1a985d068f196bc7b106e588ee8b" kindref="member">PvideoTests::Deinitialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a28742e0a5438926d43d0814c9694836f" kindref="member">TestSuite::Deinitialize</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(video_)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>MmFreeContiguousMemory(video_);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>video_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(video2_)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>MmFreeContiguousMemory(video2_);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>video2_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetVideoFrameCR8YB8CB8YA8(uint8_t<sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pixels,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pixels);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x<sp/>+=<sp/>2,<sp/>source<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R0,<sp/>G0,<sp/>B0,<sp/>R1,<sp/>G1,<sp/>B1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(source[0]<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((source[0]<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((source[0]<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>R1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(source[1]<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((source[1]<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((source[1]<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((0.257f<sp/>*<sp/>R0)<sp/>+<sp/>(0.504f<sp/>*<sp/>G0)<sp/>+<sp/>(0.098f<sp/>*<sp/>B0)<sp/>+<sp/>16);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-(0.148f<sp/>*<sp/>R1)<sp/>-<sp/>(0.291f<sp/>*<sp/>G1)<sp/>+<sp/>(0.439f<sp/>*<sp/>B1)<sp/>+<sp/>128);<sp/><sp/></highlight><highlight class="comment">//<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[2]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((0.257f<sp/>*<sp/>R1)<sp/>+<sp/>(0.504f<sp/>*<sp/>G1)<sp/>+<sp/>(0.098f<sp/>*<sp/>B1)<sp/>+<sp/>16);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest[3]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((0.439f<sp/>*<sp/>R1)<sp/>-<sp/>(0.368f<sp/>*<sp/>G1)<sp/>-<sp/>(0.071f<sp/>*<sp/>B1)<sp/>+<sp/>128);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DrawBorder(uint8_t<sp/>*target,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,<sp/>uint32_t<sp/>color<sp/>=<sp/>0xFFFFFFFF)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*pixel<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(target);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bottom_row_offset<sp/>=<sp/>(height<sp/>-<sp/>1)<sp/>*<sp/>width;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>*(pixel<sp/>+<sp/>bottom_row_offset)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>pixel<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(target);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>*(pixel<sp/>+<sp/>width<sp/>-<sp/>1)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>width;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(uint8_t<sp/>*target,<sp/>uint32_t<sp/>first_color,<sp/>uint32_t<sp/>second_color,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>checker_size,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>x_offset<sp/>=<sp/>0,<sp/>uint32_t<sp/>y_offset<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pitch<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint8_t[pitch<sp/>*<sp/>height];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>GenerateRGBACheckerboard(temp,<sp/>x_offset,<sp/>y_offset,<sp/>width,<sp/>height,<sp/>pitch,<sp/>first_color,<sp/>second_color,<sp/>checker_size);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>SetVideoFrameCR8YB8CB8YA8(target,<sp/>temp,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>temp;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetTestPatternVideoFrameCR8YB8CB8YA8(uint8_t<sp/>*target,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>column_interval<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pitch<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint8_t[pitch<sp/>*<sp/>height];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>GenerateRGBATestPattern(temp,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(column_interval)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>x<sp/>+=<sp/>column_interval)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*pixel<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(temp<sp/>+<sp/>(x<sp/>*<sp/>4));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>width;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>SetVideoFrameCR8YB8CB8YA8(target,<sp/>temp,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>temp;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetStepPatternVideoFrameCR8YB8CB8YA8(uint8_t<sp/>*target,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>line_spacing<sp/>=<sp/>16,<sp/>uint32_t<sp/>background_color<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>draw_border<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pitch<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint8_t[pitch<sp/>*<sp/>height];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>GenerateRGBDiagonalLinePattern(temp,<sp/>width,<sp/>height,<sp/>line_spacing,<sp/>background_color);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(draw_border)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawBorder(temp,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>SetVideoFrameCR8YB8CB8YA8(target,<sp/>temp,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>temp;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetLadderPatternVideoFrameCR8YB8CB8YA8(uint8_t<sp/>*target,<sp/>uint32_t<sp/>width,<sp/>uint32_t<sp/>height,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>column_interval<sp/>=<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pitch<sp/>=<sp/>width<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint8_t[pitch<sp/>*<sp/>height];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*pixel<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(temp);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>kColors[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xFFFF0000,<sp/>0xFF000000,<sp/>0xFF00FF00,<sp/>0xFF000000,<sp/>0xFF0000FF,<sp/>0xFF000000,<sp/>0xFF007F7F,<sp/>0xFF000000,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xFFFF00FF,<sp/>0xFF000000,<sp/>0xFFFFFF00,<sp/>0xFF000000,<sp/>0xFFFFFFFF,<sp/>0xFF000000,<sp/>0xFF7F007F,<sp/>0xFF000000,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>color<sp/>=<sp/>kColors[y<sp/>%<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kColors)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kColors[0]))];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>width;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(column_interval<sp/>&amp;&amp;<sp/>(x<sp/>%<sp/>column_interval)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel++<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel++<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>SetVideoFrameCR8YB8CB8YA8(target,<sp/>temp,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>temp;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestStopBehavior()<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF00FFFF,<sp/>0xFF000000,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Displaying<sp/>video<sp/>overlay...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawFullscreenOverlay();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>key<sp/>value,<sp/>if<sp/>stop&apos;s<sp/>low<sp/>bit<sp/>is<sp/>set,<sp/>the<sp/>PVIDEO<sp/>overlay<sp/>is<sp/>torn<sp/>down<sp/>completely.<sp/>If<sp/>it<sp/>is<sp/>not,<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stays<sp/>up<sp/>in<sp/>spite<sp/>of<sp/>being<sp/>stopped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetPvideoStop(0xFFFFFFFE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>SetPvideoStop(1);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>ClearPvideoInterrupts();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_OFFSET)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_BASE)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_LUMINANCE)<sp/>=<sp/>0x1000;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_CHROMINANCE)<sp/>=<sp/>0x1000;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kStopBehaviorTest);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestAlternateStopBehavior()<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF00FFFF,<sp/>0xFF000000,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Displaying<sp/>video<sp/>overlay...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>DrawFullscreenOverlay();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Immediately<sp/>stopping<sp/>video<sp/>overlay<sp/>with<sp/>unknown<sp/>registers\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>const<sp/>uint32_t<sp/>NV_PVIDEO_UNKNOWN_88<sp/>=<sp/>0x00008088;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>const<sp/>uint32_t<sp/>NV_PVIDEO_UNKNOWN_8C<sp/>=<sp/>0x0000808C;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>VIDEOREG(NV_PVIDEO_UNKNOWN_88)<sp/>=<sp/>0x04000400;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>VIDEOREG(NV_PVIDEO_UNKNOWN_88)<sp/>=<sp/>0x04000400;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>VIDEOREG(NV_PVIDEO_UNKNOWN_8C)<sp/>=<sp/>0x04000400;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>VIDEOREG(NV_PVIDEO_UNKNOWN_8C)<sp/>=<sp/>0x04000400;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>SetPvideoLuminanceChrominance();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>SetPvideoLuminanceChrominance();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sequence<sp/>used<sp/>in<sp/>bootup<sp/>and<sp/>in<sp/>Ultimate<sp/>Beach<sp/>Soccer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PMC_ENABLE)<sp/>=<sp/>0x0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PMC_ENABLE)<sp/>=<sp/>0x0;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PMC_ENABLE)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PMC_ENABLE)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PMC_ENABLE)<sp/>=<sp/>0x0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PMC_ENABLE)<sp/>=<sp/>0x1000;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kStopBehaviorTest);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>Sleep(2000);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeInMaxUnityDeltas()<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Displaying<sp/>video<sp/>overlay...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFFFFFF00,<sp/>0xFF333333,<sp/>16,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawFullscreenOverlay();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>0xFFFFFFFF,<sp/>out_size<sp/>to<sp/>fullscreen,<sp/>dI/dO<sp/>unity...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF113311,<sp/>0xFF33FF33,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>SetDsDx(host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferWidth());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>SetDtDy(host_.GetFramebufferHeight(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInMaxUnityTest);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeInMaxLargeDelta()<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Displaying<sp/>video<sp/>overlay...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFFFFFF00,<sp/>0xFF333333,<sp/>16,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawFullscreenOverlay();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>0xFFFFFFFF,<sp/>out_size<sp/>to<sp/>fullscreen,<sp/>dI/dO<sp/>implies<sp/>larger...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF113311,<sp/>0xFF88FF33,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>SetDsDx(host_.GetFramebufferWidth()<sp/>&lt;&lt;<sp/>1,<sp/>host_.GetFramebufferWidth());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>SetDtDy(host_.GetFramebufferHeight()<sp/>&lt;&lt;<sp/>1,<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInMaxLargeTest);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeInMaxSmallDelta()<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Displaying<sp/>video<sp/>overlay...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFFFFFF00,<sp/>0xFF333333,<sp/>16,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawFullscreenOverlay();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>0xFFFFFFFF,<sp/>out_size<sp/>to<sp/>fullscreen,<sp/>dI/dO<sp/>implies<sp/>smaller...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF113311,<sp/>0xFF33FF88,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>SetDsDx(host_.GetFramebufferWidth()<sp/>&gt;&gt;<sp/>2,<sp/>host_.GetFramebufferWidth());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>SetDtDy(host_.GetFramebufferHeight()<sp/>&gt;&gt;<sp/>2,<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInMaxSmallTest);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeMaxOutSmallUnityDeltas()<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>0xFFFFFFFF,<sp/>out_size<sp/>to<sp/>subscreen,<sp/>dI/dO<sp/>unity...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF111133,<sp/>0xFF3333FF,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>SetDsDx(host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferWidth());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>SetDtDy(host_.GetFramebufferHeight(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>SetPvideoOut(10,<sp/>10,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInMaxOutSmallUnityTest);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeMaxOutSmallCorrectDeltas()<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>0xFFFFFFFF,<sp/>out_size<sp/>to<sp/>subscreen,<sp/>dI/dO<sp/>correct...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF111133,<sp/>0xFF3377FF,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_POINT_IN)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>VIDEOREG(NV_PVIDEO_SIZE_IN)<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>SetDsDx(host_.GetFramebufferWidth(),<sp/>128);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>SetDtDy(host_.GetFramebufferHeight(),<sp/>64);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>SetPvideoOut(10,<sp/>10,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInMaxOutSmallCorrectTest);</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeInLargerThanSizeOutUnityDeltas()<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>2x<sp/>size_out,<sp/>dI/dO<sp/>unity...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF113311,<sp/>0xFF33FF33,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>256,<sp/>128);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>SetDsDx(host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferWidth());</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>SetDtDy(host_.GetFramebufferHeight(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>SetPvideoOut(64,<sp/>64,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInLargerThanSizeOutUnityTest);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeInLargerThanSizeOutCorrectDeltas()<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>2x<sp/>size_out,<sp/>dI/dO<sp/>correct...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF113311,<sp/>0xFF33FF33,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>256,<sp/>128);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>SetDsDx(256,<sp/>128);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>SetDtDy(128,<sp/>64);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>SetPvideoOut(64,<sp/>64,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInLargerThanSizeOutCorrectTest);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestPALIntoNTSC()<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>PAL<sp/>rendering<sp/>to<sp/>NTSC,<sp/>dI/dO<sp/>correct...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>SetTestPatternVideoFrameCR8YB8CB8YA8(video_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>720,<sp/>576);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>SetDsDx(720,<sp/>640);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>SetDtDy(576,<sp/>480);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>640,<sp/>480);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInLargerThanSizeOutCorrectTest);</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeInSmallerThanSizeOutUnityDeltas()<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>2x<sp/>size_out,<sp/>dI/dO<sp/>unity...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>memset(video_,<sp/>0xFF,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2<sp/>*<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF666600,<sp/>0xFF33337F,<sp/>8,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>SetDsDx(11,<sp/>11);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>SetDtDy(11,<sp/>11);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>256,<sp/>128);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInSmallerThanSizeOutUnityTest);</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSizeInSmallerThanSizeOutCorrectDeltas()<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>size_in<sp/>to<sp/>2x<sp/>size_out,<sp/>dI/dO<sp/>correct...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>memset(video_,<sp/>0x7F,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2<sp/>*<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF666600,<sp/>0xFF7F3333,<sp/>8,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>128,<sp/>64);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>SetDsDx(128,<sp/>256);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>SetDtDy(64,<sp/>128);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>SetPvideoOut(256,<sp/>128,<sp/>256,<sp/>128);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kSizeInSmallerThanSizeOutCorrectTest);</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestPitchLessThanCompact()<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>pitch<sp/>&lt;<sp/>width<sp/>*<sp/>2...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>SetTestPatternVideoFrameCR8YB8CB8YA8(video_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>pitch<sp/>to<sp/>the<sp/>width<sp/>(1/2<sp/>of<sp/>a<sp/>YUYV<sp/>line,<sp/>which<sp/>is<sp/>2bpp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kPitchLessThanCompactTest);</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestPitchLargerThanCompact()<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Setting<sp/>pitch<sp/>&gt;<sp/>width<sp/>*<sp/>2<sp/>(likely<sp/>would<sp/>crash<sp/>if<sp/>limit<sp/>did<sp/>not<sp/>allow<sp/>reads<sp/>past<sp/>the<sp/>buffer)...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>SetTestPatternVideoFrameCR8YB8CB8YA8(video_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>4,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kPitchLargerThanCompactTest);</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestPitch()<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTestRegion<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>SetLadderPatternVideoFrameCR8YB8CB8YA8(video_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>kTestRegion<sp/>/<sp/>2,<sp/>kTestRegion,<sp/>0);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>SetPvideoOut((host_.GetFramebufferWidth()<sp/>-<sp/>kTestRegion)<sp/>/<sp/>2,<sp/>(host_.GetFramebufferHeight()<sp/>-<sp/>kTestRegion)<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kTestRegion,<sp/>kTestRegion,<sp/>0);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pitches[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kTestRegion,<sp/>kTestRegion<sp/>*<sp/>2,<sp/>kTestRegion<sp/>*<sp/>4,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pitch<sp/>:<sp/>pitches)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;Pitch<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>pitch);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_print(</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Source<sp/>is<sp/>a<sp/>ladder<sp/>with<sp/>each<sp/>color<sp/>spanning<sp/>a<sp/>single<sp/>row\nfollowed<sp/>by<sp/>a<sp/>black<sp/>row.\nIn<sp/>and<sp/>Out<sp/>size<sp/>is<sp/>set<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kTestRegion);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kPitchTest);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>pitch,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(250);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kPitchTest);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderColorKeyTargetScreen(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>64.f;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>148.f;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kColors[]{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xFFFF0000,<sp/>0x7FFF0000,<sp/>0x00FF0000,<sp/>0xFF000000,<sp/>0x80000000,<sp/>0x7F000000,<sp/>0x01000000,<sp/>0x00000000,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kNumQuads<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kColors)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kColors[0]);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>host.GetFramebufferWidthF();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>host.GetFramebufferWidthF()<sp/>-<sp/>kTop;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quads_per_row<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(width<sp/>/<sp/>kQuadSize);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>kNumQuads<sp/>/<sp/>quads_per_row;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_start<sp/>=<sp/>floorf((width<sp/>-<sp/>kQuadSize<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(quads_per_row))<sp/>*<sp/>0.5f);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y_start<sp/>=<sp/>floorf((height<sp/>-<sp/>kQuadSize<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rows))<sp/>*<sp/>0.5f);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kZ<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>x_start;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>y_start;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text_row<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text_column<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>color<sp/>:<sp/>kColors)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetDiffuse(color);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>host.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(x,<sp/>y,<sp/>kZ);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(x<sp/>+<sp/>kQuadSize,<sp/>y,<sp/>kZ);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(x<sp/>+<sp/>kQuadSize,<sp/>y<sp/>+<sp/>kQuadSize,<sp/>kZ);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(x,<sp/>y<sp/>+<sp/>kQuadSize,<sp/>kZ);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(text_row,<sp/>text_column,<sp/></highlight><highlight class="stringliteral">&quot;0x%X&quot;</highlight><highlight class="normal">,<sp/>color);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++quad<sp/>&gt;=<sp/>quads_per_row)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x_start;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text_row<sp/>+=<sp/>6;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text_column<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>text_column<sp/>+=<sp/>15;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestColorKey()<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kFramesPerColorKey<sp/>=<sp/>40;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kColorKeys[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xFF000000,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x030000FF,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SurfaceFormatInfo<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>TestHost::SurfaceColorFormat<sp/>format;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>SurfaceFormatInfo<sp/>kSurfaceFormats[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>change<sp/>video<sp/>mode<sp/>via<sp/>XVideoSetMode<sp/>to<sp/>test<sp/>16bpp<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{&quot;Fmt_X1R5G5B5_Z1R5G5B5&quot;,<sp/>TestHost::SCF_X1R5G5B5_Z1R5G5B5},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{&quot;Fmt_X1R5G5B5_O1R5G5B5&quot;,<sp/>TestHost::SCF_X1R5G5B5_O1R5G5B5},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{&quot;Fmt_R5G6B5&quot;,<sp/>TestHost::SCF_R5G6B5},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Fmt_X8R8G8B8_Z8R8G8B8&quot;</highlight><highlight class="normal">,<sp/>TestHost::SCF_X8R8G8B8_Z8R8G8B8},</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Reenable<sp/>when<sp/>xemu#2427<sp/>is<sp/>fixed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{&quot;Fmt_X8R8G8B8_O8R8G8B8&quot;,<sp/>TestHost::SCF_X8R8G8B8_O8R8G8B8},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Reenable<sp/>when<sp/>xemu#2426<sp/>is<sp/>fixed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{&quot;Fmt_X1A7R8G8B8_Z1A7R8G8B8&quot;,<sp/>TestHost::SCF_X1A7R8G8B8_Z1A7R8G8B8},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>{&quot;Fmt_X1A7R8G8B8_O1A7R8G8B8&quot;,<sp/>TestHost::SCF_X1A7R8G8B8_O1A7R8G8B8},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Fmt_A8R8G8B8&quot;</highlight><highlight class="normal">,<sp/>TestHost::SCF_A8R8G8B8},</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Alpha<sp/>blending<sp/>is<sp/>disabled<sp/>so<sp/>that<sp/>the<sp/>alpha<sp/>values<sp/>written<sp/>into<sp/>the<sp/>framebuffer<sp/>will<sp/>be<sp/>dictated<sp/>by<sp/>the<sp/>quads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>SetTestPatternVideoFrameCR8YB8CB8YA8(video_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;surface_format_info<sp/>:<sp/>kSurfaceFormats)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>color_key<sp/>:<sp/>kColorKeys)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetSurfaceFormat(surface_format_info.format,<sp/>TestHost::SZF_Z24S8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.PrepareDraw(0xFF250530);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RenderColorKeyTargetScreen(host_);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pb_printat(1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Surface<sp/>format:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>surface_format_info.name);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pb_printat(2,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Gradient<sp/>overlay<sp/>color<sp/>key:<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>color_key);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kColorKeyTest);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetSquareDsDxDtDy();</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoColorKey(color_key);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kFramesPerColorKey;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>host_.SetSurfaceFormat(TestHost::SCF_A8R8G8B8,<sp/>TestHost::SZF_Z24S8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF116611);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>RenderColorKeyTargetScreen(host_);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kColorKeyTest);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>inline<sp/>uint32_t<sp/>abgr_to_argb(uint32_t<sp/>color)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>(color<sp/>&amp;<sp/>0xFF000000)<sp/>|<sp/>(color<sp/>&amp;<sp/>0xFF)<sp/>&lt;&lt;<sp/>16<sp/>|<sp/>(color<sp/>&amp;<sp/>0x0000FF00)<sp/>|<sp/>((color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestSimpleFullscreenOverlay0()<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF666600,<sp/>0xFFAAAA55,<sp/>160,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;PVIDEO<sp/>overlay<sp/>0\n160x160<sp/>checkerboard&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kOverlay0Test);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>Sleep(33<sp/>*<sp/>30);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>pb_printat(1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Video<sp/>was<sp/>displayed<sp/>using<sp/>overlay<sp/>0\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kOverlay0Test);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestOverlay1()<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>SetTestPatternVideoFrameCR8YB8CB8YA8(video2_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight(),<sp/>16);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;PVIDEO<sp/>overlay<sp/>1\nGradient<sp/>test<sp/>pattern\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kOverlay1Test);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video2_),<sp/>1);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(1);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight(),<sp/>1);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>1);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>1);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>Sleep(3000);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>Sleep(33<sp/>*<sp/>30);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>pb_printat(1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Video<sp/>was<sp/>displayed<sp/>using<sp/>overlay<sp/>1\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kOverlay1Test);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestOverlappedOverlays()<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF250535);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>SetTestPatternVideoFrameCR8YB8CB8YA8(video_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video2_,<sp/>0xFF777733,<sp/>0xFF006666,<sp/>64,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video2_),<sp/>1);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>1);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(1);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>half_width<sp/>=<sp/>host_.GetFramebufferWidth()<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>64,<sp/>half_width,<sp/>host_.GetFramebufferHeight()<sp/>-<sp/>64,<sp/>0);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>SetPvideoOut(half_width,<sp/>64,<sp/>half_width,<sp/>host_.GetFramebufferHeight()<sp/>-<sp/>64,<sp/>1);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>1);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(33);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kColorKeyTest);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestInPoint()<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBoxSize<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF666600,<sp/>0xFFAAAA55,<sp/>kBoxSize,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>(kBoxSize<sp/>*<sp/>2<sp/>&lt;&lt;<sp/>4);<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;S<sp/>8.4<sp/>-<sp/>Texture<sp/>moves<sp/>2<sp/>boxes<sp/>from<sp/>right<sp/>to<sp/>left&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;S:<sp/>0x%X<sp/>(%d)<sp/>-<sp/>%d.%d&quot;</highlight><highlight class="normal">,<sp/>s,<sp/>s,<sp/>s<sp/>&gt;&gt;<sp/>4,<sp/>s<sp/>&amp;<sp/>0xF);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoIn(s,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(10);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>(kBoxSize<sp/>*<sp/>2<sp/>&lt;&lt;<sp/>3);<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>-<sp/>Texture<sp/>moves<sp/>2<sp/>boxes<sp/>from<sp/>bottom<sp/>to<sp/>top&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;T:<sp/>0x%X<sp/>(%d)<sp/>-<sp/>%d.%d&quot;</highlight><highlight class="normal">,<sp/>t,<sp/>t,<sp/>t<sp/>&gt;&gt;<sp/>3,<sp/>t<sp/>&amp;<sp/>0x7);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoIn(0,<sp/>t,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(10);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestInSize()<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>SetStepPatternVideoFrameCR8YB8CB8YA8(video_,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTestWidthTexels<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kMeasurementBoxSize<sp/>=<sp/>8.f;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kMeasurementStripTop<sp/>=<sp/>96.f;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kZ<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_measurement_boxes<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>kMeasurementStripTop;<sp/>y<sp/>&lt;<sp/>host_.GetFramebufferHeightF()<sp/>-<sp/>kMeasurementBoxSize;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>kMeasurementBoxSize)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(x,<sp/>y,<sp/>kZ);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(x<sp/>+<sp/>kMeasurementBoxSize,<sp/>y,<sp/>kZ);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(x<sp/>+<sp/>kMeasurementBoxSize,<sp/>y<sp/>+<sp/>kMeasurementBoxSize,<sp/>kZ);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(x,<sp/>y<sp/>+<sp/>kMeasurementBoxSize,<sp/>kZ);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>kMeasurementBoxSize;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>host_.GetFramebufferWidthF()<sp/>-<sp/>kMeasurementBoxSize)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>out<sp/>target<sp/>is<sp/>intentionally<sp/>twice<sp/>the<sp/>actual<sp/>draw<sp/>to<sp/>demonstrate<sp/>clamping<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>SetPvideoOut(kMeasurementBoxSize,<sp/>kMeasurementStripTop,<sp/>kTestWidthTexels<sp/>*<sp/>4,<sp/>kTestWidthTexels<sp/>*<sp/>2,<sp/>0);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>1;<sp/>w<sp/>&lt;=<sp/>kTestWidthTexels;<sp/>++w)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_measurement_boxes();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;W:<sp/>%d<sp/>texels<sp/>(%d<sp/>pixels)&quot;</highlight><highlight class="normal">,<sp/>w,<sp/>w<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;White<sp/>squares<sp/>are<sp/>%d<sp/>pixels<sp/>via<sp/>3D<sp/>for<sp/>measurement&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMeasurementBoxSize));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInSizeTest);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>w,<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(250);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>1;<sp/>h<sp/>&lt;=<sp/>kTestWidthTexels;<sp/>++h)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_measurement_boxes();</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;H:<sp/>%d<sp/>texels<sp/>(%d<sp/>pixels)&quot;</highlight><highlight class="normal">,<sp/>h,<sp/>h);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;White<sp/>squares<sp/>are<sp/>%d<sp/>pixels<sp/>via<sp/>3D<sp/>for<sp/>measurement&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMeasurementBoxSize));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInSizeTest);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>h,<sp/>0);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(250);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInSizeTest);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestOutPoint()<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>272;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>192;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kMaxDelta<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kOutSize<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF666600,<sp/>0xFF333399,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kZ<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kRight<sp/>=<sp/>kLeft<sp/>+<sp/>kMaxDelta<sp/>+<sp/>kOutSize;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kBottom<sp/>=<sp/>kTop<sp/>+<sp/>kMaxDelta<sp/>+<sp/>kOutSize;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_measurement_bars<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(0xFF888888);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft<sp/>-<sp/>16.f,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kBottom,<sp/>kZ);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft<sp/>-<sp/>16.f,<sp/>kBottom,<sp/>kZ);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kTop<sp/>-<sp/>16.f,<sp/>kZ);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kRight,<sp/>kTop<sp/>-<sp/>16.f,<sp/>kZ);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kRight,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>kMaxDelta;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_measurement_bars();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;X:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>kLeft<sp/>+<sp/>x);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoOut(kLeft<sp/>+<sp/>x,<sp/>kTop,<sp/>kOutSize,<sp/>kOutSize,<sp/>0);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(10);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>kMaxDelta;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_measurement_bars();</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Y:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>kTop<sp/>+<sp/>y);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoOut(kLeft,<sp/>kTop<sp/>+<sp/>y,<sp/>kOutSize,<sp/>kOutSize,<sp/>0);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(10);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestOutSize()<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kMaxDelta<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kZ<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kRight<sp/>=<sp/>kLeft<sp/>+<sp/>kMaxDelta;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kBottom<sp/>=<sp/>kTop<sp/>+<sp/>kMaxDelta;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_measurement_bars<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(0xFF888888);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft<sp/>-<sp/>16.f,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kBottom,<sp/>kZ);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft<sp/>-<sp/>16.f,<sp/>kBottom,<sp/>kZ);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kTop<sp/>-<sp/>16.f,<sp/>kZ);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kRight,<sp/>kTop<sp/>-<sp/>16.f,<sp/>kZ);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kRight,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kTop,<sp/>kZ);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFF666600,<sp/>0xFF333399,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight(),<sp/>0);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>0;<sp/>w<sp/>&lt;<sp/>kMaxDelta;<sp/>++w)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_measurement_bars();</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Width:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>w);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoOut(kLeft,<sp/>kTop,<sp/>w,<sp/>256,<sp/>0);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(10);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0;<sp/>h<sp/>&lt;<sp/>kMaxDelta;<sp/>++h)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_measurement_bars();</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Height:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>h);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoOut(kLeft,<sp/>kTop,<sp/>256,<sp/>h,<sp/>0);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(10);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>Sleep(1500);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::TestRatios()<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kBackgroundColor<sp/>=<sp/>0xFF250535;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>PvideoInit();</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTestRegion<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>SetCheckerboardVideoFrameCR8YB8CB8YA8(video_,<sp/>0xFFCCCC33,<sp/>0xFF222222,<sp/>8,<sp/>host_.GetFramebufferWidth(),</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(kBackgroundColor);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_),<sp/>0);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>kTestRegion<sp/>/<sp/>2,<sp/>kTestRegion,<sp/>0);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/>SetPvideoOut((host_.GetFramebufferWidth()<sp/>-<sp/>kTestRegion)<sp/>/<sp/>2,<sp/>(host_.GetFramebufferHeight()<sp/>-<sp/>kTestRegion)<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kTestRegion,<sp/>kTestRegion,<sp/>0);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX,<sp/>0);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kRatioNumerators[]<sp/>=<sp/>{10,<sp/><sp/>25,<sp/><sp/>50,<sp/><sp/>60,<sp/><sp/>75,<sp/><sp/>80,<sp/><sp/>85,<sp/><sp/>90,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100,<sp/>110,<sp/>125,<sp/>150,<sp/>175,<sp/>200,<sp/>250,<sp/>400};</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ratio_numerator<sp/>:<sp/>kRatioNumerators)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DsDx:<sp/>%d<sp/>:<sp/>100&quot;</highlight><highlight class="normal">,<sp/>ratio_numerator);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDsDx(ratio_numerator,<sp/>100,<sp/>0);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(200);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy(0);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ratio_numerator<sp/>:<sp/>kRatioNumerators)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_erase_text_screen();</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DtDy:<sp/>%d<sp/>:<sp/>100&quot;</highlight><highlight class="normal">,<sp/>ratio_numerator);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kInPointTest);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDtDy(ratio_numerator,<sp/>100,<sp/>0);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(200);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>DbgPrint(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>video<sp/>overlay\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>PvideoTeardown();</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;DONE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>output_dir_,<sp/>suite_name_,<sp/>kPitchTest);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>host_.SetBlend();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PvideoTests::DrawFullscreenOverlay()<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>SetPvideoStop();</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>SetPvideoColorKey(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>SetPvideoOffset(VRAM_ADDR(video_));</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>SetPvideoIn(0,<sp/>0,<sp/>host_.GetFramebufferWidth()<sp/>/<sp/>2,<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>SetSquareDsDxDtDy();</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>SetPvideoOut(0,<sp/>0,<sp/>host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight());</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>SetPvideoFormat(NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8,<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dragon<sp/>Ball<sp/>Z<sp/>Sagas<sp/>just<sp/>sets<sp/>the<sp/>limit<sp/>to<sp/>the<sp/>maximum<sp/>possible,<sp/>it<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>set<sp/>it<sp/>to<sp/>the<sp/>actual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculated<sp/>limit<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>SetPvideoLimit(VRAM_MAX);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>uint32_t<sp/>end<sp/>=<sp/>VRAM_ADDR(video_)<sp/>+<sp/>2<sp/>*<sp/>host_.GetFramebufferWidth()<sp/>*<sp/>host_.GetFramebufferHeight();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>SetPvideoLimit(end);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>SetPvideoInterruptEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>SetPvideoBuffer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/pvideo_tests.cpp"/>
  </compounddef>
</doxygen>
