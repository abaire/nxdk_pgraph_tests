<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d4/d25/namespacePvideoControl" kind="namespace" language="C++">
    <compoundname>PvideoControl</compoundname>
    <sectiondef kind="var">
      <memberdef kind="variable" id="dc/db5/pvideo__control_8cpp_1a0026e2a139511fe11148762416f38b2e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t PvideoControl::kNumPvideoOverlays</definition>
        <argsstring></argsstring>
        <name>kNumPvideoOverlays</name>
        <qualifiedname>PvideoControl::kNumPvideoOverlays</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="12" column="27" bodyfile="src/pvideo_control.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1ab333ef410d322d5ef5c499177fe8fd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::ClearPvideoInterrupts</definition>
        <argsstring>()</argsstring>
        <name>ClearPvideoInterrupts</name>
        <qualifiedname>PvideoControl::ClearPvideoInterrupts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears all active PVIDEO interrupt flags. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="14" column="6" bodyfile="src/pvideo_control.cpp" bodystart="14" bodyend="14" declfile="src/pvideo_control.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a4e7ab6e2c016d9b3ab4f4b7c2c853fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoInterruptEnabled</definition>
        <argsstring>(bool enable_zero, bool enable_one)</argsstring>
        <name>SetPvideoInterruptEnabled</name>
        <qualifiedname>PvideoControl::SetPvideoInterruptEnabled</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable_buffer_zero</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_buffer_one</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets interrupt enable flag for the PVIDEO buffers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable_buffer_zero</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether interrupts should be enabled for PVIDEO overlay 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_buffer_one</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether interrupts should be enabled for PVIDEO overlay 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="16" column="6" bodyfile="src/pvideo_control.cpp" bodystart="16" bodyend="19" declfile="src/pvideo_control.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a3839d3bb5d6856e756d41d2dbecc8210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoBuffer</definition>
        <argsstring>(bool enable_zero, bool enable_one)</argsstring>
        <name>SetPvideoBuffer</name>
        <qualifiedname>PvideoControl::SetPvideoBuffer</qualifiedname>
        <param>
          <type>bool</type>
          <declname>enable_buffer_zero</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_buffer_one</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables or disables PVIDEO overlays.</para>
<para>Note that this needs to be called after each frame</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable_buffer_zero</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether PVIDEO overlay 0 should be enabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_buffer_one</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether PVIDEO overlay 1 should be enabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="21" column="6" bodyfile="src/pvideo_control.cpp" bodystart="21" bodyend="24" declfile="src/pvideo_control.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a369fe7b05a4341004a06ffaf6c342db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoStop</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>SetPvideoStop</name>
        <qualifiedname>PvideoControl::SetPvideoStop</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="26" column="6" bodyfile="src/pvideo_control.cpp" bodystart="26" bodyend="26" declfile="src/pvideo_control.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a975f3071aa50e88d7a59440132b69ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoBase</definition>
        <argsstring>(uint32_t addr, uint32_t buffer)</argsstring>
        <name>SetPvideoBase</name>
        <qualifiedname>PvideoControl::SetPvideoBase</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the base address of the PVIDEO overlay content. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address from which PVIDEO data should be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer whose base should be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="28" column="6" bodyfile="src/pvideo_control.cpp" bodystart="28" bodyend="31" declfile="src/pvideo_control.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a95cfb9b15df2cee8778d386e9a6d84a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoLimit</definition>
        <argsstring>(uint32_t limit, uint32_t buffer)</argsstring>
        <name>SetPvideoLimit</name>
        <qualifiedname>PvideoControl::SetPvideoLimit</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="33" column="6" bodyfile="src/pvideo_control.cpp" bodystart="33" bodyend="33" declfile="src/pvideo_control.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1ad5a61d7d7789dfe485622790235f9349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoOffset</definition>
        <argsstring>(uint32_t offset, uint32_t buffer)</argsstring>
        <name>SetPvideoOffset</name>
        <qualifiedname>PvideoControl::SetPvideoOffset</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the offset address of the PVIDEO overlay content. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>offset added to the base address configured via SetPvideoBase from which PVIDEO data should be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer whose base should be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="35" column="6" bodyfile="src/pvideo_control.cpp" bodystart="35" bodyend="35" declfile="src/pvideo_control.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a81346ee9663ad67b00f1cbef6788af55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoIn</definition>
        <argsstring>(uint32_t x, uint32_t y, uint32_t width, uint32_t height, uint32_t buffer)</argsstring>
        <name>SetPvideoIn</name>
        <qualifiedname>PvideoControl::SetPvideoIn</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the region in the source video buffer that the overlay will read from.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal offset in .4 fixed point format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical offset in .3 fixed point format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the buffer in texels. Each texel is 2 pixels wide. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the buffer in texels. Each texel is 1 pixel high. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer whose input region should be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="37" column="6" bodyfile="src/pvideo_control.cpp" bodystart="37" bodyend="41" declfile="src/pvideo_control.h" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a566676242c0f36382dadc04d34f26c4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoOut</definition>
        <argsstring>(uint32_t x, uint32_t y, uint32_t width, uint32_t height, uint32_t buffer)</argsstring>
        <name>SetPvideoOut</name>
        <qualifiedname>PvideoControl::SetPvideoOut</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the screen region that will be covered by the overlay.</para>
<para>Note: If the output region is larger than the input region specified via SetPvideoIn excess values will be clamped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The horizontal screen position in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The vertical screen position in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the region in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the region in pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer whose input region should be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="43" column="6" bodyfile="src/pvideo_control.cpp" bodystart="43" bodyend="48" declfile="src/pvideo_control.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a3d637921e0c0a2e59a3ad080188342ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoFormat</definition>
        <argsstring>(uint32_t format, uint32_t pitch, bool color_keyed, uint32_t buffer)</argsstring>
        <name>SetPvideoFormat</name>
        <qualifiedname>PvideoControl::SetPvideoFormat</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>color_keyed</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the format of the PVIDEO input buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The color format (e.g., NV_PVIDEO_FORMAT_COLOR_LE_CR8YB8CB8YA8). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>The pitch of the output overlay. As the overlay is always fullscreen, this should be framebuffer width<itemizedlist>
<listitem><para>2. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_keyed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the overlay should be color keyed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer whose format should be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="50" column="6" bodyfile="src/pvideo_control.cpp" bodystart="50" bodyend="54" declfile="src/pvideo_control.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a50adda2ad48ce1563cf3e441fe48fbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoColorKey</definition>
        <argsstring>(uint8_t r, uint8_t g, uint8_t b, uint8_t a)</argsstring>
        <name>SetPvideoColorKey</name>
        <qualifiedname>PvideoControl::SetPvideoColorKey</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>g</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>a</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the RGB value for PVIDEO overlay color keying.</para>
<para>Any pixels in the VGA framebuffer within the PVIDEO overlay region that match the given RGB value will be replaced with the content of the overlay.</para>
<para>NOTE: alpha is ignored by nv2a hardware. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="56" column="6" bodyfile="src/pvideo_control.cpp" bodystart="56" bodyend="59" declfile="src/pvideo_control.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1ab49d1c0023593ce7d030743c76a80788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoLuminanceChrominance</definition>
        <argsstring>(uint32_t buffer)</argsstring>
        <name>SetPvideoLuminanceChrominance</name>
        <qualifiedname>PvideoControl::SetPvideoLuminanceChrominance</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="61" column="6" bodyfile="src/pvideo_control.cpp" bodystart="61" bodyend="64" declfile="src/pvideo_control.h" declline="99" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1af48e794e4bea89119b47ba9d9e7966ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::PvideoInit</definition>
        <argsstring>()</argsstring>
        <name>PvideoInit</name>
        <qualifiedname>PvideoControl::PvideoInit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="66" column="6" bodyfile="src/pvideo_control.cpp" bodystart="66" bodyend="76" declfile="src/pvideo_control.h" declline="8" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1ae886119b3007388171ec31028674afe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::PvideoTeardown</definition>
        <argsstring>()</argsstring>
        <name>PvideoTeardown</name>
        <qualifiedname>PvideoControl::PvideoTeardown</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="78" column="6" bodyfile="src/pvideo_control.cpp" bodystart="78" bodyend="98" declfile="src/pvideo_control.h" declline="10" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a26c4f0dd2107aa592969012665e3c01c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t PvideoControl::CalculateDelta</definition>
        <argsstring>(uint32_t in_size, uint32_t out_size)</argsstring>
        <name>CalculateDelta</name>
        <qualifiedname>PvideoControl::CalculateDelta</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>in_size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="100" column="24" bodyfile="src/pvideo_control.cpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a4a6031d272279680ad7e86e599fe675a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetDsDx</definition>
        <argsstring>(uint32_t in_width, uint32_t out_width, uint32_t buffer)</argsstring>
        <name>SetDsDx</name>
        <qualifiedname>PvideoControl::SetDsDx</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>in_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>out_width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="106" column="6" bodyfile="src/pvideo_control.cpp" bodystart="106" bodyend="108" declfile="src/pvideo_control.h" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1aa44146d74baa6ac135010b16ed1bffaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetDtDy</definition>
        <argsstring>(uint32_t in_height, uint32_t out_height, uint32_t buffer)</argsstring>
        <name>SetDtDy</name>
        <qualifiedname>PvideoControl::SetDtDy</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>in_height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>out_height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="110" column="6" bodyfile="src/pvideo_control.cpp" bodystart="110" bodyend="112" declfile="src/pvideo_control.h" declline="102" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/db5/pvideo__control_8cpp_1a4f41dd4c780b6826ac1ad307f71e591e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetSquareDsDxDtDy</definition>
        <argsstring>(uint32_t buffer)</argsstring>
        <name>SetSquareDsDxDtDy</name>
        <qualifiedname>PvideoControl::SetSquareDsDxDtDy</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the texel mapping to 1:1 for both X and Y. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.cpp" line="115" column="6" bodyfile="src/pvideo_control.cpp" bodystart="115" bodyend="118" declfile="src/pvideo_control.h" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d9f/pvideo__control_8h_1a9af75db60ecc7b383a2d7cc5fd501db9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PvideoControl::SetPvideoColorKey</definition>
        <argsstring>(uint32_t color_key)</argsstring>
        <name>SetPvideoColorKey</name>
        <qualifiedname>PvideoControl::SetPvideoColorKey</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>color_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pvideo_control.h" line="94" column="13" bodyfile="src/pvideo_control.h" bodystart="94" bodyend="96"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/pvideo_control.cpp" line="10" column="1"/>
  </compounddef>
</doxygen>
