<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d6/d38/combiner__tests_8cpp" kind="file" language="C++">
    <compoundname>combiner_tests.cpp</compoundname>
    <includes refid="df/d03/combiner__tests_8h" local="yes">combiner_tests.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes refid="d7/d31/pbkit__ext_8h" local="yes">pbkit_ext.h</includes>
    <includes local="yes">shaders/passthrough_vertex_shader.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes local="yes">texture_generator.h</includes>
    <includes local="yes">vertex_buffer.h</includes>
    <incdepgraph>
      <node id="5">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/combiner_tests.cpp</label>
        <link refid="d6/d38/combiner__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>combiner_tests.h</label>
        <link refid="df/d03/combiner__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>atomic</label>
      </node>
      <node id="24">
        <label>chrono</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="29">
        <label>list</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="16">
        <label>nv2astate.h</label>
      </node>
      <node id="17">
        <label>nxdk_ext.h</label>
      </node>
      <node id="15">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="8">
        <label>printf/printf.h</label>
      </node>
      <node id="18">
        <label>pushbuffer.h</label>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="30">
        <label>shaders/passthrough_vertex_shader.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="19">
        <label>texture_format.h</label>
      </node>
      <node id="31">
        <label>texture_generator.h</label>
      </node>
      <node id="20">
        <label>texture_stage.h</label>
      </node>
      <node id="13">
        <label>thread</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="21">
        <label>vertex_buffer.h</label>
      </node>
      <node id="6">
        <label>windows.h</label>
      </node>
      <node id="22">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a5d41fb31d7f9776fb5638cfb06016121" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kMuxTestName</definition>
        <argsstring></argsstring>
        <name>kMuxTestName</name>
        <initializer>= &quot;Mux&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="11" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a33c6ff354795185882a98a767cb1f920" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kIndependenceTestName</definition>
        <argsstring></argsstring>
        <name>kIndependenceTestName</name>
        <initializer>= &quot;Independence&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="12" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a75754a6b95cca5c1700bf814919fa64f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kColorAlphaIndependenceTestName</definition>
        <argsstring></argsstring>
        <name>kColorAlphaIndependenceTestName</name>
        <initializer>= &quot;ColorAlphaIndependence&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="13" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1ad97f6757deee83baa0df98bd6e62e2a4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kFlagsTestName</definition>
        <argsstring></argsstring>
        <name>kFlagsTestName</name>
        <initializer>= &quot;Flags&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="14" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a1637352a9fd1ba33df04952e332db672" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kUnboundTextureSamplerTestName</definition>
        <argsstring></argsstring>
        <name>kUnboundTextureSamplerTestName</name>
        <initializer>= &quot;UnboundTexSampler&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="15" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a1cad2e361f579c17a1de2c80ce9cf512" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kAlphaFromBlueTestName</definition>
        <argsstring></argsstring>
        <name>kAlphaFromBlueTestName</name>
        <initializer>= &quot;AlphaFromBlue&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="16" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a59bf2d958f0da581eb838312e952b354" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kCombinerOpsTestName</definition>
        <argsstring></argsstring>
        <name>kCombinerOpsTestName</name>
        <initializer>= &quot;CombinerOps&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="17" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1aaafa19f21726c8de3020c5d5a7625533" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char *</type>
        <definition>constexpr const char* kFinalCombinerSpecialInputsTestName</definition>
        <argsstring></argsstring>
        <name>kFinalCombinerSpecialInputsTestName</name>
        <initializer>= &quot;SpecialInputs&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="18" column="29" bodyfile="src/tests/combiner_tests.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a776ece7aaa994e76dac8ef3ae3f721fa" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDiffuseUL</definition>
        <argsstring></argsstring>
        <name>kDiffuseUL</name>
        <initializer>{1.f, 0.f, 0.f, 1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="20" column="27" bodyfile="src/tests/combiner_tests.cpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1ab91482751798aa0d96976727f7ff9116" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDiffuseUR</definition>
        <argsstring></argsstring>
        <name>kDiffuseUR</name>
        <initializer>{0.f, 1.f, 0.f, 1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="21" column="27" bodyfile="src/tests/combiner_tests.cpp" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a9f88b18fed15d4d8d746b540c03a3b8c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDiffuseLR</definition>
        <argsstring></argsstring>
        <name>kDiffuseLR</name>
        <initializer>{0.f, 0.f, 1.f, 1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="22" column="27" bodyfile="src/tests/combiner_tests.cpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d38/combiner__tests_8cpp_1a8ab81fd5cbfbe8d7a4bc9b56693870c4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDiffuseLL</definition>
        <argsstring></argsstring>
        <name>kDiffuseLL</name>
        <initializer>{0.5f, 0.5f, 0.5f, 1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/combiner_tests.cpp" line="23" column="27" bodyfile="src/tests/combiner_tests.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;combiner_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pbkit_ext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/passthrough_vertex_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vertex_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kMuxTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Mux&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kIndependenceTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Independence&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kColorAlphaIndependenceTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ColorAlphaIndependence&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kFlagsTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Flags&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kUnboundTextureSamplerTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;UnboundTexSampler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kAlphaFromBlueTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;AlphaFromBlue&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kCombinerOpsTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;CombinerOps&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kFinalCombinerSpecialInputsTestName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SpecialInputs&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDiffuseUL{1.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDiffuseUR{0.f,<sp/>1.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDiffuseLR{0.f,<sp/>0.f,<sp/>1.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDiffuseLL{0.5f,<sp/>0.5f,<sp/>0.5f,<sp/>1.f};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="dd/d5f/classCombinerTests_1a22e1b490ddafbcb985d1aae44ccf9017" kindref="member">CombinerTests::CombinerTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config&amp;<sp/>config)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Combiner&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>tests_[kMuxTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestMux();<sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>tests_[kIndependenceTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestCombinerIndependence();<sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>tests_[kColorAlphaIndependenceTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestCombinerColorAlphaIndependence();<sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>tests_[kFlagsTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestFlags();<sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>tests_[kUnboundTextureSamplerTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestUnboundTextureSamplers();<sp/>};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>tests_[kAlphaFromBlueTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestAlphaFromBlue();<sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>tests_[kCombinerOpsTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestCombinerOps();<sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>tests_[kFinalCombinerSpecialInputsTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestFinalCombinerSpecialInputs();<sp/>};</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d5f/classCombinerTests_1a2de3abfaade6867f4c479256ddab858b" kindref="member">CombinerTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>CreateGeometry();</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d5f/classCombinerTests_1a5363aa981ea95859bd58708b75ffb585" kindref="member">CombinerTests::Deinitialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>buffer<sp/>:<sp/>vertex_buffers_)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.reset();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a28742e0a5438926d43d0814c9694836f" kindref="member">TestSuite::Deinitialize</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::CreateGeometry()<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>-2.75f;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kRight<sp/>=<sp/>2.75f;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>1.85f;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kBottom<sp/>=<sp/>-1.75f;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kSpacing<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kWidth<sp/>=<sp/>kRight<sp/>-<sp/>kLeft;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kHeight<sp/>=<sp/>kTop<sp/>-<sp/>kBottom;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kUnitWidth<sp/>=<sp/>(kWidth<sp/>-<sp/>(3.0f<sp/>*<sp/>kSpacing))<sp/>/<sp/>4.0f;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kUnitHeight<sp/>=<sp/>(kHeight<sp/>-<sp/>(2.0f<sp/>*<sp/>kSpacing))<sp/>/<sp/>3.0f;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>Color<sp/>c_one{0.0f,<sp/>1.0f,<sp/>0.0f};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>Color<sp/>c_two{0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>Color<sp/>c_three{1.0f,<sp/>0.0f,<sp/>0.0f};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>Color<sp/>c_four{0.25f,<sp/>0.25f,<sp/>0.25f};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>kLeft;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>kTop<sp/>-<sp/>kSpacing;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>buffer<sp/>:<sp/>vertex_buffers_)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_quads<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>host_.AllocateVertexBuffer(6<sp/>*<sp/>num_quads);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;DefineBiTri(0,<sp/>left,<sp/>top,<sp/>left<sp/>+<sp/>kUnitWidth,<sp/>top<sp/>-<sp/>kUnitHeight,<sp/>z,<sp/>z,<sp/>z,<sp/>z,<sp/>c_one,<sp/>c_two,<sp/>c_three,<sp/>c_four);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>+=<sp/>kUnitWidth<sp/>+<sp/>kSpacing;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&gt;=<sp/>(kRight<sp/>-<sp/>kUnitWidth))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>kLeft;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>top<sp/>-=<sp/>kUnitHeight<sp/>+<sp/>kSpacing<sp/>*<sp/>4.0f;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestMux()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF303030;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vertex_elements<sp/>=<sp/>host_.POSITION<sp/>|<sp/>host_.DIFFUSE<sp/>|<sp/>host_.SPECULAR;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Test<sp/>behavior<sp/>when<sp/>r0<sp/>is<sp/>not<sp/>explicitly<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::OneInput(),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>host_.SetOutputAlphaCombiner(0,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(1,<sp/>1.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC1(1,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(1,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput(),</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::ColorInput(TestHost::SRC_C1),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(1,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_DIFFUSE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::SM_MUX);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>host_.SetInputAlphaCombiner(1,<sp/>TestHost::OneInput(),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>host_.SetOutputAlphaCombiner(1,<sp/>TestHost::DST_DIFFUSE);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>an<sp/>alpha<sp/>value<sp/>with<sp/>the<sp/>MSB<sp/>set<sp/>and<sp/>the<sp/>LSB<sp/>unset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>uint32_t<sp/>c0<sp/>=<sp/>0x82000000;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>c0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>host_.SetInputAlphaCombiner(0,<sp/>TestHost::AlphaInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>pb_printat(row,<sp/>11,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;LSB<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>(c0<sp/>&gt;&gt;<sp/>24));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[0]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>pb_printat(row,<sp/>21,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;MSB<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>(c0<sp/>&gt;&gt;<sp/>24));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[1]);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>an<sp/>alpha<sp/>value<sp/>with<sp/>the<sp/>MSB<sp/>and<sp/>LSB<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>c0<sp/>=<sp/>0x81000000;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>c0);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>pb_printat(row,<sp/>31,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;LSB<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>(c0<sp/>&gt;&gt;<sp/>24));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[2]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>pb_printat(row,<sp/>41,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;MSB<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>(c0<sp/>&gt;&gt;<sp/>24));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[3]);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>row<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>an<sp/>alpha<sp/>value<sp/>with<sp/>the<sp/>MSB<sp/>and<sp/>LSB<sp/>unset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>c0<sp/>=<sp/>0x00000000;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>c0);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>pb_printat(row,<sp/>11,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;LSB<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>(c0<sp/>&gt;&gt;<sp/>24));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[4]);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>pb_printat(row,<sp/>21,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;MSB<sp/>0x%x&quot;</highlight><highlight class="normal">,<sp/>(c0<sp/>&gt;&gt;<sp/>24));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[5]);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kMuxTestName);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>pb_printat(1,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;Unset<sp/>=<sp/>Red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>pb_printat(2,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;Set<sp/>=<sp/>Blue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kMuxTestName);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestCombinerIndependence()<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF303030;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vertex_elements<sp/>=<sp/>host_.POSITION<sp/>|<sp/>host_.DIFFUSE<sp/>|<sp/>host_.SPECULAR;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(2);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>R0<sp/>green.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.0f,<sp/>1.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>R0<sp/>red,<sp/>and<sp/>set<sp/>R1<sp/>to<sp/>the<sp/>previous<sp/>(green)<sp/>value<sp/>of<sp/>R0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(1,<sp/>1.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(1,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput(),</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::ColorInput(TestHost::SRC_R0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(1,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_R1);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>a<sp/>green<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_R1);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>pb_printat(2,<sp/>6,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;Green<sp/>from<sp/>r0<sp/>stage<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[0]);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(3);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>R0<sp/>blue<sp/>to<sp/>25%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.0f,<sp/>0.0f,<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>R0<sp/>75%<sp/>white<sp/>and<sp/>R1<sp/>50%<sp/>white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(1,<sp/>0.0f,<sp/>0.0f,<sp/>0.75f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(1,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput(),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::ColorInput(TestHost::SRC_R0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(1,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_R1,<sp/>TestHost::DST_DISCARD,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::SM_SUM,<sp/>TestHost::OP_IDENTITY,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(2,<sp/>TestHost::AlphaInput(TestHost::SRC_R0),<sp/>TestHost::OneInput(),</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::AlphaInput(TestHost::SRC_R1),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(2,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_R1);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_R1);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>pb_printat(7,<sp/>20,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;DGrey<sp/>from<sp/>r0<sp/>stage<sp/>1<sp/>alpha&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[2]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_R0);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>pb_printat(12,<sp/>6,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;LGrey<sp/>from<sp/>r0<sp/>stage<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[4]);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kIndependenceTestName);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kIndependenceTestName);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestCombinerColorAlphaIndependence()<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF303030;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_quad<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>-2.75f;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kRight<sp/>=<sp/>2.75f;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>1.75f;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kBottom<sp/>=<sp/>-1.75f;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(0.1f,<sp/>1.0f,<sp/>0.1f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kTop,<sp/>z,<sp/>1.0f);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kRight,<sp/>kTop,<sp/>z,<sp/>1.0f);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kRight,<sp/>kBottom,<sp/>z,<sp/>1.0f);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(kLeft,<sp/>kBottom,<sp/>z,<sp/>1.0f);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>green<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetCombinerControl(1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_quad();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlay<sp/>a<sp/>transparent<sp/>blue<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetCombinerControl(2);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>R0<sp/>blue<sp/>to<sp/>0%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>R0<sp/>100%<sp/>blue<sp/>and<sp/>set<sp/>R1<sp/>alpha<sp/>to<sp/>R0<sp/>(which<sp/>is<sp/>0%<sp/>when<sp/>entering<sp/>this<sp/>stage).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetCombinerFactorC0(1,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetInputColorCombiner(1,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetOutputColorCombiner(1,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetInputAlphaCombiner(1,<sp/>TestHost::ColorInput(TestHost::SRC_R0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetOutputAlphaCombiner(1,<sp/>TestHost::DST_R1);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_R0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_R1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>draw_quad();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kColorAlphaIndependenceTestName);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;Expect<sp/>a<sp/>green<sp/>quad\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kColorAlphaIndependenceTestName);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestFlags()<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF303030;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vertex_elements<sp/>=<sp/>host_.POSITION<sp/>|<sp/>host_.DIFFUSE<sp/>|<sp/>host_.SPECULAR;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl(1);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>V1<sp/>and<sp/>R0<sp/>to<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::OneInput(),<sp/>TestHost::OneInput(),<sp/>TestHost::OneInput(),</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_SPECULAR,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>final<sp/>output<sp/>to<sp/>(D=0)<sp/>+<sp/>(A=0.5)<sp/>*<sp/>(B=V1+R0)<sp/>+<sp/>(1<sp/>-<sp/>A=0.5)<sp/>*<sp/>(C=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>alpha<sp/>(G)<sp/>to<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>host_.SetFinalCombinerFactorC0(0.5f,<sp/>0.5f,<sp/>0.5f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0(TestHost::SRC_C0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_SPEC_R0_SUM,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>expected<sp/>output<sp/>is<sp/>full<sp/>brightness<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>pb_printat(2,<sp/>10,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;Uncapped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[0]);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>same<sp/>thing,<sp/>but<sp/>clamp<sp/>the<sp/>V1+R0<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>pb_printat(2,<sp/>22,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;Capped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[1]);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>v1<sp/>to<sp/>0,<sp/>r0<sp/>to<sp/>0.75.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.75f,<sp/>0.75f,<sp/>0.75f,<sp/>0.75f);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ZeroInput(),<sp/>TestHost::ZeroInput(),<sp/>TestHost::ColorInput(TestHost::SRC_C0),</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_SPECULAR,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>A<sp/>to<sp/>1.0<sp/>so<sp/>the<sp/>final<sp/>output<sp/>is<sp/>just<sp/>B(the<sp/>V1<sp/>+<sp/>R0<sp/>sum).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>TestHost::SRC_SPEC_R0_SUM,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>pb_printat(2,<sp/>31,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;Normal<sp/>R0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[2]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>invert<sp/>R0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>pb_printat(2,<sp/>42,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;1<sp/>-<sp/>R0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[3]);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Essentially<sp/>the<sp/>same<sp/>test,<sp/>but<sp/>using<sp/>v1<sp/>instead<sp/>of<sp/>r0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>r0<sp/>to<sp/>0,<sp/>v1<sp/>to<sp/>0.75.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ZeroInput(),<sp/>TestHost::ZeroInput(),<sp/>TestHost::ColorInput(TestHost::SRC_C0),</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_SPECULAR);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>A<sp/>to<sp/>1.0<sp/>so<sp/>the<sp/>final<sp/>output<sp/>is<sp/>just<sp/>B(the<sp/>V1<sp/>+<sp/>R0<sp/>sum).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>TestHost::SRC_SPEC_R0_SUM,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>pb_printat(7,<sp/>14,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;V1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[4]);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>invert<sp/>V1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>pb_printat(7,<sp/>23,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;1<sp/>-<sp/>V1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>host_.SetVertexBuffer(vertex_buffers_[5]);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>host_.DrawArrays(vertex_elements);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kFlagsTestName);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kFlagsTestName);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestUnboundTextureSamplers()<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF6A6A6A;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unproject<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](vector_t&amp;<sp/>world_point,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>screen_point{x,<sp/>y,<sp/>z,<sp/>1.f};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.UnprojectPoint(world_point,<sp/>screen_point,<sp/>z);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>64.f;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kQuadZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_quad<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>unproject](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>left<sp/>+<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>top<sp/>+<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>world_point{0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(kDiffuseUL);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(kDiffuseUR);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(kDiffuseLR);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(kDiffuseLL);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSpacing<sp/>=<sp/>kQuadSize<sp/>+<sp/>8.f;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>floor((host_.GetFramebufferWidthF()<sp/>-<sp/>(kQuadSize<sp/>+<sp/>kQuadSpacing))<sp/>*<sp/>0.5f);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>96.f;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX0);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>draw_quad(kLeft,<sp/>top);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>draw_quad(kLeft<sp/>+<sp/>kQuadSpacing,<sp/>top);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX1);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>draw_quad(kLeft,<sp/>top);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>draw_quad(kLeft<sp/>+<sp/>kQuadSpacing,<sp/>top);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX2);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>draw_quad(kLeft,<sp/>top);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>draw_quad(kLeft<sp/>+<sp/>kQuadSpacing,<sp/>top);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX3);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>draw_quad(kLeft,<sp/>top);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>draw_quad(kLeft<sp/>+<sp/>kQuadSpacing,<sp/>top);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>kUnboundTextureSamplerTestName);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>pb_printat(4,<sp/>18,<sp/></highlight><highlight class="stringliteral">&quot;tex0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>pb_printat(7,<sp/>18,<sp/></highlight><highlight class="stringliteral">&quot;tex1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>pb_printat(10,<sp/>18,<sp/></highlight><highlight class="stringliteral">&quot;tex2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>pb_printat(12,<sp/>18,<sp/></highlight><highlight class="stringliteral">&quot;tex3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kUnboundTextureSamplerTestName);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestAlphaFromBlue()<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF6A6A6A;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>host_.DrawCheckerboardUnproject(0xFF333333,<sp/>0xFF444444);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unproject<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](vector_t&amp;<sp/>world_point,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>screen_point{x,<sp/>y,<sp/>z,<sp/>1.f};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.UnprojectPoint(world_point,<sp/>screen_point,<sp/>z);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>64.f;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kQuadZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDiffuse{1.f,<sp/>1.f,<sp/>1.f,<sp/>0.f};</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_quad<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>unproject](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>left<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>top<sp/>+<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>world_point{0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(kDiffuse);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_R0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>+=<sp/>kQuadSize<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>host_.SetOutputAlphaCombiner(0,<sp/>TestHost::DST_DISCARD);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_R0);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSpacing<sp/>=<sp/>kQuadSize<sp/>+<sp/>8.f;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>128.f;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>kLeft;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>192.f;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::ColorInput(TestHost::SRC_DIFFUSE),</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::ColorInput(TestHost::SRC_DIFFUSE));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_DISCARD,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::SM_SUM,<sp/>TestHost::OP_IDENTITY,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>1.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.75f,<sp/>0.f);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.5f,<sp/>0.f);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.25f,<sp/>0.f);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_DISCARD,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::SM_SUM,<sp/>TestHost::OP_IDENTITY,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>left<sp/>=<sp/>kLeft;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>1.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.75f,<sp/>0.f);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.5f,<sp/>0.f);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.25f,<sp/>0.f);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>left<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>kAlphaFromBlueTestName);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>pb_printat(2,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>left<sp/>half<sp/>of<sp/>each<sp/>quad<sp/>has<sp/>alpha<sp/>forced<sp/>to<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>pb_printat(3,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>right<sp/>is<sp/>taken<sp/>from<sp/>the<sp/>final<sp/>combiner<sp/>blue<sp/>channel.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>pb_printat(8,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;AB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>pb_printat(11,<sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;CD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kAlphaFromBlueTestName);</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestCombinerOps()<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF6A6A6A;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>host_.DrawCheckerboardUnproject(0xFF333333,<sp/>0xFF444444);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unproject<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](vector_t&amp;<sp/>world_point,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>screen_point{x,<sp/>y,<sp/>z,<sp/>1.f};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.UnprojectPoint(world_point,<sp/>screen_point,<sp/>z);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>64.f;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kQuadZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_quad<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>unproject](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>left<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>top<sp/>+<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>world_point{0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_R0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>+=<sp/>kQuadSize<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>host_.SetInputAlphaCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_R0);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSpacing<sp/>=<sp/>kQuadSize<sp/>+<sp/>8.f;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>74.f;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>200.f;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>kTop;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_op<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](TestHost::CombinerOutOp<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_DISCARD,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::SM_SUM,<sp/>op);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetOutputAlphaCombiner(0,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_DISCARD,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::SM_SUM,<sp/>op);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.1f,<sp/>0.25f,<sp/>1.f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>set_op(TestHost::OP_IDENTITY);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>pb_printat(3,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Identity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>set_op(TestHost::OP_BIAS);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>pb_printat(6,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Bias&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>set_op(TestHost::OP_SHIFT_LEFT_1);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>pb_printat(9,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Shift<sp/>Left<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>set_op(TestHost::OP_SHIFT_LEFT_1_BIAS);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>pb_printat(12,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Shift<sp/>Left<sp/>1<sp/>Bias&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>set_op(TestHost::OP_SHIFT_LEFT_2);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>pb_printat(15,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Shift<sp/>Left<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>top<sp/>=<sp/>kTop;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>left<sp/>=<sp/>500.f;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>set_op(TestHost::OP_SHIFT_RIGHT_1);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>draw_quad(left,<sp/>top);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>pb_printat(3,<sp/>30,<sp/></highlight><highlight class="stringliteral">&quot;Shift<sp/>Right<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>kCombinerOpsTestName);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kCombinerOpsTestName);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CombinerTests::TestFinalCombinerSpecialInputs()<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF6A6A6A;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>host_.DrawCheckerboardUnproject(0xFF333333,<sp/>0xFF444444);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unproject<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](vector_t&amp;<sp/>world_point,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>screen_point{x,<sp/>y,<sp/>z,<sp/>1.f};</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.UnprojectPoint(world_point,<sp/>screen_point,<sp/>z);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>64.f;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kQuadZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw_quad<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>unproject](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>left<sp/>+<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>top<sp/>+<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>world_point{0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>top,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>right,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>unproject(world_point,<sp/>left,<sp/>bottom,<sp/>kQuadZ);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(world_point);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSpacing<sp/>=<sp/>kQuadSize<sp/>+<sp/>8.f;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>74.f;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kLeftCol<sp/>=<sp/>200.f;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kRightCol<sp/>=<sp/>500.f;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>kTop;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>host_.SetFinalCombinerFactorC0(1.f,<sp/>0.75f,<sp/>0.5f,<sp/>1.f);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>host_.SetFinalCombinerFactorC1(0.5f,<sp/>0.5f,<sp/>0.5f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_EF_PROD);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_C0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_C1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>draw_quad(kLeftCol,<sp/>top);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>pb_printat(3,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;EFProd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_spec_flags<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specular_add_invert_r0<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specular_add_invert_v1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specular_clamp<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1(TestHost::SRC_C0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_C1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>specular_add_invert_r0,<sp/>specular_add_invert_v1,<sp/>specular_clamp);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>pb_printat(5,<sp/>22,<sp/></highlight><highlight class="stringliteral">&quot;SPEC_R0_SUM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>0.25f,<sp/>0.5f,<sp/>0.75f,<sp/>0.f);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>host_.SetCombinerFactorC1(0,<sp/>0.70f,<sp/>0.5f,<sp/>0.15f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput(),</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::ColorInput(TestHost::SRC_C1),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>host_.SetInputAlphaCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput(),</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::ColorInput(TestHost::SRC_C1),<sp/>TestHost::OneInput());</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_SPECULAR);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_SPEC_R0_SUM);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing<sp/>+<sp/>24.f;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>set_spec_flags(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>draw_quad(kLeftCol,<sp/>top);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>pb_printat(7,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>flags&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>pb_printat(7,<sp/>30,<sp/></highlight><highlight class="stringliteral">&quot;INV<sp/>R0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>set_spec_flags(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>draw_quad(kRightCol,<sp/>top);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>pb_printat(10,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;INV<sp/>SPEC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>set_spec_flags(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>draw_quad(kLeftCol,<sp/>top);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Figure<sp/>out<sp/>how<sp/>to<sp/>get<sp/>clamp<sp/>to<sp/>something<sp/>interesting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>inputs<sp/>to<sp/>the<sp/>SPEC_R0_SUM<sp/>operation<sp/>are<sp/>always<sp/>clamped<sp/>to<sp/>[0..1],<sp/>and<sp/>it<sp/>seems<sp/>that<sp/>the<sp/>sum<sp/>is<sp/>also<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clamped<sp/>to<sp/>0..1<sp/>even<sp/>without<sp/>the<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>code<sp/>below<sp/>attempts<sp/>to<sp/>have<sp/>SPEC_R0_SUM<sp/>be<sp/>&gt;<sp/>1,<sp/>then<sp/>inverts<sp/>it<sp/>to<sp/>get<sp/>a<sp/>negative<sp/>value<sp/>which<sp/>is<sp/>added<sp/>to<sp/>R1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>practice,<sp/>the<sp/>(1<sp/>-<sp/>SPEC_R0_SUM)<sp/>is<sp/>set<sp/>to<sp/>0<sp/>even<sp/>without<sp/>the<sp/>clamp,<sp/>so<sp/>this<sp/>just<sp/>writes<sp/>R1<sp/>in<sp/>both<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>pb_printat(12,<sp/>11,<sp/>&quot;SPEC_R0_SUM<sp/>-<sp/>Clamp<sp/>(negative<sp/>R0)&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>top<sp/>+=<sp/>kQuadSpacing<sp/>+<sp/>30.f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetCombinerControl(2,<sp/>true,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetCombinerFactorC0(0,<sp/>1.f,<sp/>0.5f,<sp/>0.1f,<sp/>0.25f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetCombinerFactorC1(0,<sp/>1.f,<sp/>0.25f,<sp/>0.1f,<sp/>0.5f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetInputColorCombiner(0,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::ColorInput(TestHost::SRC_C1),<sp/>TestHost::OneInput());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetOutputColorCombiner(0,<sp/>TestHost::DST_R0,<sp/>TestHost::DST_SPECULAR,<sp/>TestHost::DST_DISCARD,<sp/>false,<sp/>false,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::SM_SUM);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetInputColorCombiner(1,<sp/>TestHost::ColorInput(TestHost::SRC_C0),<sp/>TestHost::OneInput());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetOutputColorCombiner(1,<sp/>TestHost::DST_R1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>rgb<sp/>=<sp/>1<sp/>-<sp/>(spec<sp/>+<sp/>r0)<sp/>+<sp/>mix(r1,<sp/>0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetFinalCombiner0(TestHost::SRC_ZERO,<sp/>false,<sp/>false,<sp/>TestHost::SRC_ZERO,<sp/>false,<sp/>false,<sp/>TestHost::SRC_R1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>false,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>false,<sp/>TestHost::SRC_SPEC_R0_SUM,<sp/>false,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>pb_printat(14,<sp/>0,<sp/>&quot;No<sp/>clamp&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>set_spec_flags(false,<sp/>false,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>draw_quad(kLeftCol,<sp/>top);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>pb_printat(14,<sp/>30,<sp/>&quot;CLAMP&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>set_spec_flags(false,<sp/>false,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>draw_quad(kRightCol,<sp/>top);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>host_.SetCombinerControl(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>pb_printat(0,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>kFinalCombinerSpecialInputsTestName);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>host_.SetCombinerControl();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kFinalCombinerSpecialInputsTestName);</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/combiner_tests.cpp"/>
  </compounddef>
</doxygen>
