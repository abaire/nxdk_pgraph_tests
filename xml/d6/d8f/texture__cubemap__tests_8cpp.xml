<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d6/d8f/texture__cubemap__tests_8cpp" kind="file" language="C++">
    <compoundname>texture_cubemap_tests.cpp</compoundname>
    <includes refid="d8/d42/texture__cubemap__tests_8h" local="yes">texture_cubemap_tests.h</includes>
    <includes local="no">SDL.h</includes>
    <includes local="no">SDL_image.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes refid="d7/d3a/perspective__vertex__shader__no__lighting_8h" local="yes">shaders/perspective_vertex_shader_no_lighting.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes local="yes">texture_format.h</includes>
    <includes local="yes">texture_generator.h</includes>
    <includes local="yes">xbox_math_matrix.h</includes>
    <includes local="yes">xbox_math_types.h</includes>
    <incdepgraph>
      <node id="23">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>shaders/perspective_vertex_shader_no_lighting.h</label>
        <link refid="d7/d3a/perspective__vertex__shader__no__lighting_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/texture_cubemap_tests.cpp</label>
        <link refid="d6/d8f/texture__cubemap__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>texture_cubemap_tests.h</label>
        <link refid="d8/d42/texture__cubemap__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>SDL.h</label>
      </node>
      <node id="19">
        <label>SDL_image.h</label>
      </node>
      <node id="6">
        <label>atomic</label>
      </node>
      <node id="11">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="16">
        <label>list</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="29">
        <label>nv2astate.h</label>
      </node>
      <node id="30">
        <label>nxdk_ext.h</label>
      </node>
      <node id="20">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="25">
        <label>printf/printf.h</label>
      </node>
      <node id="31">
        <label>pushbuffer.h</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="27">
        <label>shaders/perspective_vertex_shader.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="17">
        <label>texture_format.h</label>
      </node>
      <node id="35">
        <label>texture_generator.h</label>
      </node>
      <node id="32">
        <label>texture_stage.h</label>
      </node>
      <node id="9">
        <label>thread</label>
      </node>
      <node id="22">
        <label>utility</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="33">
        <label>vertex_buffer.h</label>
      </node>
      <node id="24">
        <label>windows.h</label>
      </node>
      <node id="36">
        <label>xbox_math_matrix.h</label>
      </node>
      <node id="34">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="d8/dd3/structDotProductMappedTest" prot="public">DotProductMappedTest</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="d6/d8f/texture__cubemap__tests_8cpp_1afad016a9d855d20c134dafd25781a12f" prot="public" static="no" strong="yes">
        <type></type>
        <name>CubemapGeneratorMode</name>
        <enumvalue id="d6/d8f/texture__cubemap__tests_8cpp_1afad016a9d855d20c134dafd25781a12fae3f775639f357df0dc056d5549a7a425" prot="public">
          <name>kRadialGradient</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d8f/texture__cubemap__tests_8cpp_1afad016a9d855d20c134dafd25781a12fae6cebb20c4fbded48c61094db927a5f8" prot="public">
          <name>kCheckerboard</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d6/d8f/texture__cubemap__tests_8cpp_1afad016a9d855d20c134dafd25781a12fa3dc46555b4fa07914f5122a068d48a40" prot="public">
          <name>kNoise</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="47" column="1" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a2fa0c00ba5be9fac5b9dcec8ba600f84" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kCubeIndices[]</definition>
        <argsstring>[]</argsstring>
        <name>kCubeIndices</name>
        <initializer>= {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="20" column="27" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1ab5ae6bf0c41e8c97e5ebeee501ab73bb" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kCubeVertices[24][3]</definition>
        <argsstring>[24][3]</argsstring>
        <name>kCubeVertices</name>
        <initializer>= {
    {-1.00f, -1.00f, 1.00f},  {1.00f, -1.00f, 1.00f},   {1.00f, 1.00f, 1.00f},   {-1.00f, 1.00f, 1.00f},
    {1.00f, -1.00f, -1.00f},  {-1.00f, -1.00f, -1.00f}, {-1.00f, 1.00f, -1.00f}, {1.00f, 1.00f, -1.00f},
    {1.00f, -1.00f, 1.00f},   {1.00f, -1.00f, -1.00f},  {1.00f, 1.00f, -1.00f},  {1.00f, 1.00f, 1.00f},
    {-1.00f, -1.00f, -1.00f}, {-1.00f, -1.00f, 1.00f},  {-1.00f, 1.00f, 1.00f},  {-1.00f, 1.00f, -1.00f},
    {-1.00f, 1.00f, 1.00f},   {1.00f, 1.00f, 1.00f},    {1.00f, 1.00f, -1.00f},  {-1.00f, 1.00f, -1.00f},
    {-1.00f, -1.00f, -1.00f}, {1.00f, -1.00f, -1.00f},  {1.00f, -1.00f, 1.00f},  {-1.00f, -1.00f, 1.00f},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="24" column="24" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a144ea109a7476c685395968a8eedf426" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kCubeTextureCoords[24][2]</definition>
        <argsstring>[24][2]</argsstring>
        <name>kCubeTextureCoords</name>
        <initializer>= {
    {0.2500f, 0.3750f}, {0.5000f, 0.3750f}, {0.5000f, 0.6250f}, {0.2500f, 0.6250f}, {0.7500f, 0.3750f},
    {1.0000f, 0.3750f}, {1.0000f, 0.6250f}, {0.7500f, 0.6250f}, {0.5000f, 0.3750f}, {0.7500f, 0.3750f},
    {0.7500f, 0.6250f}, {0.5000f, 0.6250f}, {0.0000f, 0.3750f}, {0.2500f, 0.3750f}, {0.2500f, 0.6250f},
    {0.0000f, 0.6250f}, {0.2500f, 0.6250f}, {0.5000f, 0.6250f}, {0.5000f, 0.8750f}, {0.2500f, 0.8750f},
    {0.2500f, 0.1250f}, {0.5000f, 0.1250f}, {0.5000f, 0.3750f}, {0.2500f, 0.3750f},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="33" column="24" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a5e471bd5d80fd56a984140f70622e4c9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTextureWidth</definition>
        <argsstring></argsstring>
        <name>kTextureWidth</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="41" column="27" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a52fb40082c56b7c36db1d3e7700cf853" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTexturePitch</definition>
        <argsstring></argsstring>
        <name>kTexturePitch</name>
        <initializer>= kTextureWidth * 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="42" column="27" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1aa68568112c7c845891ebf9821978aa81" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTextureHeight</definition>
        <argsstring></argsstring>
        <name>kTextureHeight</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="43" column="27" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1ae2b8a4f797727b5a8135eb5124b1f9ca" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char kCubemapTest[]</definition>
        <argsstring>[]</argsstring>
        <name>kCubemapTest</name>
        <initializer>= &quot;Cubemap&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="45" column="23" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a8f36437f469173901c2d81ccc306e56f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref></type>
        <definition>const DotProductMappedTest kDotSTRCubeTests[]</definition>
        <argsstring>[]</argsstring>
        <name>kDotSTRCubeTests</name>
        <initializer>= {
    {&quot;DotSTRCube_0to1&quot;, 0x000},
    {&quot;DotSTRCube_-1to1D3D&quot;, 0x111},
    {&quot;DotSTRCube_-1to1GL&quot;, 0x222},
    {&quot;DotSTRCube_-1to1&quot;, 0x333},
    {&quot;DotSTRCube_HiLo_1&quot;, 0x444},
    
    
    {&quot;DotSTRCube_HiLoHemi&quot;, 0x777},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="60" column="35" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="60" bodyend="69"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a4830469a94c665fe73326b880636f004" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref></type>
        <definition>const DotProductMappedTest kDotSTRCube3DTests[]</definition>
        <argsstring>[]</argsstring>
        <name>kDotSTRCube3DTests</name>
        <initializer>= {
    {&quot;DotSTR3D_0to1&quot;, 0x000},
    {&quot;DotSTR3D_-1to1D3D&quot;, 0x111},
    {&quot;DotSTR3D_-1to1GL&quot;, 0x222},
    {&quot;DotSTR3D_-1to1&quot;, 0x333},
    {&quot;DotSTR3D_HiLo_1&quot;, 0x444},
    
    
    {&quot;DotSTR3D_HiLoHemi&quot;, 0x777},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="71" column="35" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="71" bodyend="80"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a35bc9f4723f31326c405b068a7f6052e" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref></type>
        <definition>const DotProductMappedTest kDotReflectSpecularTests[]</definition>
        <argsstring>[]</argsstring>
        <name>kDotReflectSpecularTests</name>
        <initializer>= {
    {&quot;DotReflectSpec_0to1&quot;, 0x000},
    {&quot;DotReflectSpec_-1to1D3D&quot;, 0x111},
    {&quot;DotReflectSpec_-1to1GL&quot;, 0x222},
    {&quot;DotReflectSpec_-1to1&quot;, 0x333},
    {&quot;DotReflectSpec_HiLo_1&quot;, 0x444},
    
    
    {&quot;DotReflectSpec_HiLoHemi&quot;, 0x777},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="82" column="35" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="82" bodyend="91"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a3d0e8285a188696206af899b4ba42cd0" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref></type>
        <definition>const DotProductMappedTest kDotReflectSpecularConstTests[]</definition>
        <argsstring>[]</argsstring>
        <name>kDotReflectSpecularConstTests</name>
        <initializer>= {
    {&quot;DotReflectSpecConst_0to1&quot;, 0x000},
    {&quot;DotReflectSpecConst_-1to1D3D&quot;, 0x111},
    {&quot;DotReflectSpecConst_-1to1GL&quot;, 0x222},
    {&quot;DotReflectSpecConst_-1to1&quot;, 0x333},
    {&quot;DotReflectSpecConst_HiLo_1&quot;, 0x444},
    
    
    {&quot;DotReflectSpecConst_HiLoHemi&quot;, 0x777},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="93" column="35" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="93" bodyend="102"/>
      </memberdef>
      <memberdef kind="variable" id="d6/d8f/texture__cubemap__tests_8cpp_1a48e0add74b916fa2f7fdc56c51b61f85" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref></type>
        <definition>const DotProductMappedTest kDotReflectDiffuseTests[]</definition>
        <argsstring>[]</argsstring>
        <name>kDotReflectDiffuseTests</name>
        <initializer>= {
    {&quot;DotReflectDiffuse_0to1&quot;, 0x000},
    {&quot;DotReflectDiffuse_-1to1D3D&quot;, 0x111},
    {&quot;DotReflectDiffuse_-1to1GL&quot;, 0x222},
    {&quot;DotReflectDiffuse_-1to1&quot;, 0x333},
    {&quot;DotReflectDiffuse_HiLo_1&quot;, 0x444},
    
    
    {&quot;DotReflectDiffuse_HiLoHemi&quot;, 0x777},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="104" column="35" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="104" bodyend="113"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d6/d8f/texture__cubemap__tests_8cpp_1a9e7aa217d0d21271c35659402dec695f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GenerateCubemap</definition>
        <argsstring>(uint8_t *buffer, CubemapGeneratorMode mode)</argsstring>
        <name>GenerateCubemap</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>CubemapGeneratorMode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_cubemap_tests.cpp" line="662" column="13" bodyfile="src/tests/texture_cubemap_tests.cpp" bodystart="662" bodyend="692" declfile="src/tests/texture_cubemap_tests.cpp" declline="53" declcolumn="13"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;texture_cubemap_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL_image.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/perspective_vertex_shader_no_lighting.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xbox_math_matrix.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xbox_math_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">XboxMath;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCubeIndices[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22,<sp/>23,</highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kCubeVertices[24][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{-1.00f,<sp/>-1.00f,<sp/>1.00f},<sp/><sp/>{1.00f,<sp/>-1.00f,<sp/>1.00f},<sp/><sp/><sp/>{1.00f,<sp/>1.00f,<sp/>1.00f},<sp/><sp/><sp/>{-1.00f,<sp/>1.00f,<sp/>1.00f},</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{1.00f,<sp/>-1.00f,<sp/>-1.00f},<sp/><sp/>{-1.00f,<sp/>-1.00f,<sp/>-1.00f},<sp/>{-1.00f,<sp/>1.00f,<sp/>-1.00f},<sp/>{1.00f,<sp/>1.00f,<sp/>-1.00f},</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{1.00f,<sp/>-1.00f,<sp/>1.00f},<sp/><sp/><sp/>{1.00f,<sp/>-1.00f,<sp/>-1.00f},<sp/><sp/>{1.00f,<sp/>1.00f,<sp/>-1.00f},<sp/><sp/>{1.00f,<sp/>1.00f,<sp/>1.00f},</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{-1.00f,<sp/>-1.00f,<sp/>-1.00f},<sp/>{-1.00f,<sp/>-1.00f,<sp/>1.00f},<sp/><sp/>{-1.00f,<sp/>1.00f,<sp/>1.00f},<sp/><sp/>{-1.00f,<sp/>1.00f,<sp/>-1.00f},</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{-1.00f,<sp/>1.00f,<sp/>1.00f},<sp/><sp/><sp/>{1.00f,<sp/>1.00f,<sp/>1.00f},<sp/><sp/><sp/><sp/>{1.00f,<sp/>1.00f,<sp/>-1.00f},<sp/><sp/>{-1.00f,<sp/>1.00f,<sp/>-1.00f},</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{-1.00f,<sp/>-1.00f,<sp/>-1.00f},<sp/>{1.00f,<sp/>-1.00f,<sp/>-1.00f},<sp/><sp/>{1.00f,<sp/>-1.00f,<sp/>1.00f},<sp/><sp/>{-1.00f,<sp/>-1.00f,<sp/>1.00f},</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kCubeTextureCoords[24][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.2500f,<sp/>0.3750f},<sp/>{0.5000f,<sp/>0.3750f},<sp/>{0.5000f,<sp/>0.6250f},<sp/>{0.2500f,<sp/>0.6250f},<sp/>{0.7500f,<sp/>0.3750f},</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{1.0000f,<sp/>0.3750f},<sp/>{1.0000f,<sp/>0.6250f},<sp/>{0.7500f,<sp/>0.6250f},<sp/>{0.5000f,<sp/>0.3750f},<sp/>{0.7500f,<sp/>0.3750f},</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.7500f,<sp/>0.6250f},<sp/>{0.5000f,<sp/>0.6250f},<sp/>{0.0000f,<sp/>0.3750f},<sp/>{0.2500f,<sp/>0.3750f},<sp/>{0.2500f,<sp/>0.6250f},</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.0000f,<sp/>0.6250f},<sp/>{0.2500f,<sp/>0.6250f},<sp/>{0.5000f,<sp/>0.6250f},<sp/>{0.5000f,<sp/>0.8750f},<sp/>{0.2500f,<sp/>0.8750f},</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.2500f,<sp/>0.1250f},<sp/>{0.5000f,<sp/>0.1250f},<sp/>{0.5000f,<sp/>0.3750f},<sp/>{0.2500f,<sp/>0.3750f},</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTextureWidth<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTexturePitch<sp/>=<sp/>kTextureWidth<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTextureHeight<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kCubemapTest[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Cubemap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>CubemapGeneratorMode<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>kRadialGradient,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>kCheckerboard,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>kNoise,</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenerateCubemap(uint8_t<sp/>*buffer,<sp/>CubemapGeneratorMode<sp/>mode);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="d8/dd3/structDotProductMappedTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>uint32_t<sp/>dot_rgbmapping;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref><sp/>kDotSTRCubeTests[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTRCube_0to1&quot;</highlight><highlight class="normal">,<sp/>0x000},</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTRCube_-1to1D3D&quot;</highlight><highlight class="normal">,<sp/>0x111},</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTRCube_-1to1GL&quot;</highlight><highlight class="normal">,<sp/>0x222},</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTRCube_-1to1&quot;</highlight><highlight class="normal">,<sp/>0x333},</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTRCube_HiLo_1&quot;</highlight><highlight class="normal">,<sp/>0x444},</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotSTRCube_HiLoHemiD3D&quot;,<sp/>0x555},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotSTRCube_HiLoHemiGL&quot;,<sp/>0x666},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTRCube_HiLoHemi&quot;</highlight><highlight class="normal">,<sp/>0x777},</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref><sp/>kDotSTRCube3DTests[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTR3D_0to1&quot;</highlight><highlight class="normal">,<sp/>0x000},</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTR3D_-1to1D3D&quot;</highlight><highlight class="normal">,<sp/>0x111},</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTR3D_-1to1GL&quot;</highlight><highlight class="normal">,<sp/>0x222},</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTR3D_-1to1&quot;</highlight><highlight class="normal">,<sp/>0x333},</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTR3D_HiLo_1&quot;</highlight><highlight class="normal">,<sp/>0x444},</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotSTR3D_HiLoHemiD3D&quot;,<sp/>0x555},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotSTR3D_HiLoHemiGL&quot;,<sp/>0x666},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotSTR3D_HiLoHemi&quot;</highlight><highlight class="normal">,<sp/>0x777},</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref><sp/>kDotReflectSpecularTests[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpec_0to1&quot;</highlight><highlight class="normal">,<sp/>0x000},</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpec_-1to1D3D&quot;</highlight><highlight class="normal">,<sp/>0x111},</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpec_-1to1GL&quot;</highlight><highlight class="normal">,<sp/>0x222},</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpec_-1to1&quot;</highlight><highlight class="normal">,<sp/>0x333},</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpec_HiLo_1&quot;</highlight><highlight class="normal">,<sp/>0x444},</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotReflectSpec_HiLoHemiD3D&quot;,<sp/>0x555},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotReflectSpec_HiLoHemiGL&quot;,<sp/>0x666},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpec_HiLoHemi&quot;</highlight><highlight class="normal">,<sp/>0x777},</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref><sp/>kDotReflectSpecularConstTests[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpecConst_0to1&quot;</highlight><highlight class="normal">,<sp/>0x000},</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpecConst_-1to1D3D&quot;</highlight><highlight class="normal">,<sp/>0x111},</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpecConst_-1to1GL&quot;</highlight><highlight class="normal">,<sp/>0x222},</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpecConst_-1to1&quot;</highlight><highlight class="normal">,<sp/>0x333},</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpecConst_HiLo_1&quot;</highlight><highlight class="normal">,<sp/>0x444},</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotReflectSpecConst_HiLoHemiD3D&quot;,<sp/>0x555},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotReflectSpecConst_HiLoHemiGL&quot;,<sp/>0x666},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectSpecConst_HiLoHemi&quot;</highlight><highlight class="normal">,<sp/>0x777},</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/dd3/structDotProductMappedTest" kindref="compound">DotProductMappedTest</ref><sp/>kDotReflectDiffuseTests[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectDiffuse_0to1&quot;</highlight><highlight class="normal">,<sp/>0x000},</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectDiffuse_-1to1D3D&quot;</highlight><highlight class="normal">,<sp/>0x111},</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectDiffuse_-1to1GL&quot;</highlight><highlight class="normal">,<sp/>0x222},</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectDiffuse_-1to1&quot;</highlight><highlight class="normal">,<sp/>0x333},</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectDiffuse_HiLo_1&quot;</highlight><highlight class="normal">,<sp/>0x444},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotReflectDiffuse_HiLoHemiD3D&quot;,<sp/>0x555},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{&quot;DotReflectDiffuse_HiLoHemiGL&quot;,<sp/>0x666},<sp/><sp/>//<sp/>Does<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>supported<sp/>on<sp/>HW<sp/>(invalid<sp/>data<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;DotReflectDiffuse_HiLoHemi&quot;</highlight><highlight class="normal">,<sp/>0x777},</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="d1/df8/classTextureCubemapTests_1adf56335783dbf231701c35e58d12a2a5" kindref="member">TextureCubemapTests::TextureCubemapTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config<sp/>&amp;config)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Texture<sp/>cubemap&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>tests_[kCubemapTest]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestCubemap();<sp/>};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;test<sp/>:<sp/>kDotSTRCubeTests)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test.name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;test]<sp/>{<sp/>TestDotSTRCubemap(test.name,<sp/>test.dot_rgbmapping);<sp/>};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;test<sp/>:<sp/>kDotSTRCube3DTests)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test.name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;test]<sp/>{<sp/>TestDotSTR3D(test.name,<sp/>test.dot_rgbmapping);<sp/>};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;test<sp/>:<sp/>kDotReflectSpecularTests)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test.name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;test]<sp/>{<sp/>TestDotReflect(test.name,<sp/>test.dot_rgbmapping,<sp/>ReflectTest::kSpecular);<sp/>};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;test<sp/>:<sp/>kDotReflectSpecularConstTests)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test.name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;test]<sp/>{<sp/>TestDotReflect(test.name,<sp/>test.dot_rgbmapping,<sp/>ReflectTest::kSpecularConst);<sp/>};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;test<sp/>:<sp/>kDotReflectDiffuseTests)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test.name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;test]<sp/>{<sp/>TestDotReflect(test.name,<sp/>test.dot_rgbmapping,<sp/>ReflectTest::kDiffuse);<sp/>};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/df8/classTextureCubemapTests_1a961540b3b8234dd697ef48c0e4c5d19c" kindref="member">TextureCubemapTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depth_buffer_max_value<sp/>=<sp/>host_.GetMaxDepthBufferValue();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;PerspectiveVertexShaderNoLighting&gt;(host_.GetFramebufferWidth(),<sp/>host_.GetFramebufferHeight(),</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>depth_buffer_max_value,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>1.0f,<sp/>200.0f);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUseD3DStyleViewport();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>camera_position<sp/>=<sp/>{0.0f,<sp/>0.0f,<sp/>-7.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>camera_look_at<sp/>=<sp/>{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;LookAt(camera_position,<sp/>camera_look_at);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>normal<sp/>map<sp/>into<sp/>stage0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Surface<sp/>*normal_map<sp/>=<sp/>IMG_Load(</highlight><highlight class="stringliteral">&quot;D:\\texture_cubemap\\cube_normals_object_space.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(normal_map<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>normal<sp/>map&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stage<sp/>=<sp/>host_.GetTextureStage(0);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetTextureDimensions(normal_map-&gt;w,<sp/>normal_map-&gt;h);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetTexture(normal_map);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_FreeSurface(normal_map);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>diffuse<sp/>map<sp/>into<sp/>stage2<sp/>(only<sp/>used<sp/>by<sp/>PS_TEXTUREMODES_DOT_RFLCT_DIFF<sp/>tests)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>GenerateCubemap(host_.GetTextureMemoryForStage(2),<sp/>CubemapGeneratorMode::kCheckerboard);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stage<sp/>=<sp/>host_.GetTextureStage(2);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetTextureDimensions(kTextureWidth,<sp/>kTextureHeight);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetCubemapEnable();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>cube<sp/>map<sp/>into<sp/>stage3.<sp/>Tests<sp/>are<sp/>responsible<sp/>for<sp/>populating<sp/>the<sp/>texture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stage<sp/>=<sp/>host_.GetTextureStage(3);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetTextureDimensions(kTextureWidth,<sp/>kTextureHeight);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>stage.SetCubemapEnable();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX3);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextureCubemapTests::TestCubemap()<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_NONE,<sp/>TestHost::STAGE_NONE,<sp/>TestHost::STAGE_NONE,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::STAGE_CUBE_MAP);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>simple<sp/>checkerboard<sp/>texture<sp/>with<sp/>a<sp/>different<sp/>color<sp/>for<sp/>each<sp/>face<sp/>of<sp/>the<sp/>cube.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>GenerateCubemap(host_.GetTextureMemoryForStage(3),<sp/>CubemapGeneratorMode::kCheckerboard);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFE121212);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::static_pointer_cast&lt;PerspectiveVertexShader&gt;(host_.GetShaderProgram());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;shader](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_z)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix4_t<sp/>matrix;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>eye{0.0f,<sp/>0.0f,<sp/>-7.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>at{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>up{0.0f,<sp/>1.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>TestHost::BuildD3DModelViewMatrix(matrix,<sp/>eye,<sp/>at,<sp/>up);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;model_matrix<sp/>=<sp/>shader-&gt;GetModelMatrix();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixSetIdentity(model_matrix);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>rotation<sp/>=<sp/>{r_x,<sp/>r_y,<sp/>r_z};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixRotate(model_matrix,<sp/>rotation);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>translation<sp/>=<sp/>{x,<sp/>y,<sp/>z};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixTranslate(model_matrix,<sp/>translation);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix4_t<sp/>mv_matrix;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixMultMatrix(matrix,<sp/>shader-&gt;GetModelMatrix(),<sp/>mv_matrix);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFixedFunctionModelViewMatrix(mv_matrix);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;PrepareDraw();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>:<sp/>kCubeIndices)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*vertex<sp/>=<sp/>kCubeVertices[index];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord3(vertex[0],<sp/>vertex[1],<sp/>vertex[2],<sp/>1.0f);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(vertex[0],<sp/>vertex[1],<sp/>vertex[2],<sp/>1.0f);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX3);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>draw(-1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>draw(1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>1.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kCubemapTest);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kCubemapTest);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextureCubemapTests::TestDotSTR3D(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>uint32_t<sp/>dot_rgb_mapping)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/>*<sp/>See<sp/>https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/texm3x3tex---ps</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/>*<sp/>texm3x3tex<sp/>is<sp/>used<sp/>to<sp/>orient<sp/>a<sp/>normal<sp/>vector<sp/>to<sp/>the<sp/>correct<sp/>tangent<sp/>space<sp/>for<sp/>the<sp/>surface<sp/>being<sp/>rendered</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>tex0<sp/>is<sp/>used<sp/>to<sp/>look<sp/>up<sp/>the<sp/>normal<sp/>for<sp/>a<sp/>given<sp/>pixel</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>The<sp/>tex1,<sp/>2,<sp/>and<sp/>3<sp/>combined<sp/>contain<sp/>the<sp/>matrix<sp/>needed<sp/>to<sp/>unproject<sp/>a<sp/>fragment<sp/>back<sp/>to<sp/>the<sp/>world-space<sp/>point<sp/>(used</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>position<sp/>the<sp/>normal<sp/>in<sp/>worldspace)</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>The<sp/>final<sp/>value<sp/>is<sp/>a<sp/>lookup<sp/>from<sp/>the<sp/>cube<sp/>map<sp/>in<sp/>t3<sp/>using<sp/>the<sp/>world<sp/>adjusted<sp/>normal.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>GenerateCubemap(host_.GetTextureMemoryForStage(3),<sp/>CubemapGeneratorMode::kNoise);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::static_pointer_cast&lt;PerspectiveVertexShader&gt;(host_.GetShaderProgram());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE,<sp/>TestHost::STAGE_DOT_PRODUCT,<sp/>TestHost::STAGE_DOT_PRODUCT,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::STAGE_DOT_STR_3D);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DOT_RGBMAPPING,<sp/>dot_rgb_mapping);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFE141414);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>matrix4_t<sp/>model_view_matrix;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>vector_t<sp/>eye{0.0f,<sp/>0.0f,<sp/>-7.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>vector_t<sp/>at{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>vector_t<sp/>up{0.0f,<sp/>1.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>TestHost::BuildD3DModelViewMatrix(model_view_matrix,<sp/>eye,<sp/>at,<sp/>up);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;shader,<sp/>model_view_matrix](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_z)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;model_matrix<sp/>=<sp/>shader-&gt;GetModelMatrix();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixSetIdentity(model_matrix);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>rotation<sp/>=<sp/>{r_x,<sp/>r_y,<sp/>r_z};</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixRotate(model_matrix,<sp/>rotation);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>translation<sp/>=<sp/>{x,<sp/>y,<sp/>z};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixTranslate(model_matrix,<sp/>translation);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix4_t<sp/>mv_matrix;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixMultMatrix(model_matrix,<sp/>model_view_matrix,<sp/>mv_matrix);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFixedFunctionModelViewMatrix(mv_matrix);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv_projection<sp/>=<sp/>host_.GetFixedFunctionInverseCompositeMatrix();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;PrepareDraw();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>:<sp/>kCubeIndices)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*vertex<sp/>=<sp/>kCubeVertices[index];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*normal_st<sp/>=<sp/>kCubeTextureCoords[index];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord0(normal_st[0],<sp/>normal_st[1]);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord1(inv_projection[0][0],<sp/>inv_projection[0][1],<sp/>inv_projection[0][2],<sp/>0.f);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord2(inv_projection[1][0],<sp/>inv_projection[1][1],<sp/>inv_projection[1][2],<sp/>0.f);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord3(inv_projection[2][0],<sp/>inv_projection[2][1],<sp/>inv_projection[2][2],<sp/>0.f);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(vertex[0],<sp/>vertex[1],<sp/>vertex[2],<sp/>1.0f);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX3);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>draw(-1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>draw(1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>1.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DOT_RGBMAPPING,<sp/>0);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextureCubemapTests::TestDotReflect(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>uint32_t<sp/>dot_rgb_mapping,<sp/>ReflectTest<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>*<sp/>See<sp/>https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/texm3x3spec---ps</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>*<sp/>texm3x3spec<sp/>is<sp/>used<sp/>for<sp/>specular<sp/>reflection<sp/>and<sp/>environment<sp/>mapping.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>tex0<sp/>is<sp/>used<sp/>to<sp/>look<sp/>up<sp/>the<sp/>normal<sp/>for<sp/>a<sp/>given<sp/>pixel</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>The<sp/>tex1,<sp/>2,<sp/>and<sp/>3<sp/>combined<sp/>contain<sp/>the<sp/>matrix<sp/>needed<sp/>to<sp/>unproject<sp/>a<sp/>fragment<sp/>back<sp/>to<sp/>the<sp/>world-space<sp/>point<sp/>(used</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>position<sp/>the<sp/>normal<sp/>in<sp/>worldspace)</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>The<sp/>final<sp/>value<sp/>is<sp/>a<sp/>lookup<sp/>from<sp/>the<sp/>cube<sp/>map<sp/>in<sp/>t3<sp/>using<sp/>the<sp/>world<sp/>adjusted<sp/>normal.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/>*<sp/>-<sp/>The<sp/>eye-ray<sp/>vector<sp/>is<sp/>provided<sp/>via<sp/>NV097_SET_EYE_VECTOR.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>GenerateCubemap(host_.GetTextureMemoryForStage(3),<sp/>CubemapGeneratorMode::kRadialGradient);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::static_pointer_cast&lt;PerspectiveVertexShader&gt;(host_.GetShaderProgram());</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>host_.SetShaderStageProgram(</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::STAGE_2D_PROJECTIVE,<sp/>TestHost::STAGE_DOT_PRODUCT,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>==<sp/>ReflectTest::kDiffuse<sp/>?<sp/>TestHost::STAGE_DOT_REFLECT_DIFFUSE<sp/>:<sp/><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>::STAGE_DOT_PRODUCT,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>==<sp/>ReflectTest::kSpecularConst<sp/>?<sp/><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>::STAGE_DOT_REFLECT_SPECULAR_CONST</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>::STAGE_DOT_REFLECT_SPECULAR);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DOT_RGBMAPPING,<sp/>dot_rgb_mapping);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFE131313);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>matrix4_t<sp/>model_view_matrix;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>vector_t<sp/>eye{0.0f,<sp/>0.0f,<sp/>-7.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>vector_t<sp/>at{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>vector_t<sp/>up{0.0f,<sp/>1.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>TestHost::BuildD3DModelViewMatrix(model_view_matrix,<sp/>eye,<sp/>at,<sp/>up);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>Pushbuffer::Push3F(NV097_SET_EYE_VECTOR,<sp/>eye);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;shader,<sp/>model_view_matrix](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_z)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;model_matrix<sp/>=<sp/>shader-&gt;GetModelMatrix();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixSetIdentity(model_matrix);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>rotation<sp/>=<sp/>{r_x,<sp/>r_y,<sp/>r_z};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixRotate(model_matrix,<sp/>rotation);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>translation<sp/>=<sp/>{x,<sp/>y,<sp/>z};</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixTranslate(model_matrix,<sp/>translation);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix4_t<sp/>mv_matrix;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixMultMatrix(model_matrix,<sp/>model_view_matrix,<sp/>mv_matrix);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFixedFunctionModelViewMatrix(mv_matrix);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv_projection<sp/>=<sp/>host_.GetFixedFunctionInverseCompositeMatrix();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;PrepareDraw();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>:<sp/>kCubeIndices)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*vertex<sp/>=<sp/>kCubeVertices[index];</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*normal_st<sp/>=<sp/>kCubeTextureCoords[index];</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord0(normal_st[0],<sp/>normal_st[1]);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord1(inv_projection[0][0],<sp/>inv_projection[0][1],<sp/>inv_projection[0][2],<sp/>1.f);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord2(inv_projection[1][0],<sp/>inv_projection[1][1],<sp/>inv_projection[1][2],<sp/>1.f);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord3(inv_projection[2][0],<sp/>inv_projection[2][1],<sp/>inv_projection[2][2],<sp/>1.f);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(vertex[0],<sp/>vertex[1],<sp/>vertex[2],<sp/>1.0f);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>ReflectTest::kDiffuse)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX2);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX3);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>draw(-1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>draw(1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>1.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DOT_RGBMAPPING,<sp/>0);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TextureCubemapTests::TestDotSTRCubemap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>uint32_t<sp/>dot_rgb_mapping)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/texm3x3vspec---ps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>texm3x3vspec:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tex0<sp/>is<sp/>used<sp/>to<sp/>look<sp/>up<sp/>the<sp/>normal<sp/>for<sp/>a<sp/>given<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>tex1,<sp/>2,<sp/>and<sp/>3<sp/>combine:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1)<sp/>The<sp/>matrix<sp/>needed<sp/>to<sp/>unproject<sp/>a<sp/>fragment<sp/>back<sp/>to<sp/>the<sp/>world-space<sp/>point<sp/>(used<sp/>to<sp/>position<sp/>the<sp/>normal<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>worldspace)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2)<sp/>The<sp/>q<sp/>component<sp/>of<sp/>the<sp/>three<sp/>are<sp/>combined<sp/>to<sp/>provide<sp/>the<sp/>eye<sp/>vector<sp/>for<sp/>the<sp/>vertex<sp/>(in<sp/>worldspace).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>hardware<sp/>then<sp/>creates<sp/>a<sp/>reflection<sp/>vector<sp/>using<sp/>the<sp/>normal<sp/>and<sp/>eye<sp/>vectors<sp/>and<sp/>uses<sp/>that<sp/>to<sp/>index<sp/>into<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cubemap<sp/>to<sp/>find<sp/>the<sp/>final<sp/>pixel<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>GenerateCubemap(host_.GetTextureMemoryForStage(3),<sp/>CubemapGeneratorMode::kRadialGradient);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::static_pointer_cast&lt;PerspectiveVertexShader&gt;(host_.GetShaderProgram());</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>host_.SetTextureStageEnabled(3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE,<sp/>TestHost::STAGE_DOT_PRODUCT,<sp/>TestHost::STAGE_DOT_PRODUCT,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::STAGE_DOT_STR_CUBE);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DOT_RGBMAPPING,<sp/>dot_rgb_mapping);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFE131313);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>matrix4_t<sp/>model_view_matrix;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>vector_t<sp/>eye{0.0f,<sp/>0.0f,<sp/>-7.f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>vector_t<sp/>at{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>vector_t<sp/>up{0.0f,<sp/>1.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>TestHost::BuildD3DModelViewMatrix(model_view_matrix,<sp/>eye,<sp/>at,<sp/>up);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>an<sp/>arbitrary<sp/>but<sp/>incorrect<sp/>eye<sp/>vector<sp/>to<sp/>confirm<sp/>that<sp/>it<sp/>is<sp/>not<sp/>used<sp/>by<sp/>this<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_EYE_VECTOR,<sp/>-1.f,<sp/>10.f,<sp/>3.f);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>draw<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;shader,<sp/>model_view_matrix,<sp/>eye](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r_z)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;model_matrix<sp/>=<sp/>shader-&gt;GetModelMatrix();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixSetIdentity(model_matrix);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>rotation<sp/>=<sp/>{r_x,<sp/>r_y,<sp/>r_z};</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixRotate(model_matrix,<sp/>rotation);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>translation<sp/>=<sp/>{x,<sp/>y,<sp/>z};</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixTranslate(model_matrix,<sp/>translation);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix4_t<sp/>mv_matrix;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixMultMatrix(model_matrix,<sp/>model_view_matrix,<sp/>mv_matrix);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetFixedFunctionModelViewMatrix(mv_matrix);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv_projection<sp/>=<sp/>host_.GetFixedFunctionInverseCompositeMatrix();</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;PrepareDraw();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>:<sp/>kCubeIndices)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*vertex<sp/>=<sp/>kCubeVertices[index];</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*normal_st<sp/>=<sp/>kCubeTextureCoords[index];</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_t<sp/>padded_vertex<sp/>=<sp/>{vertex[0],<sp/>vertex[1],<sp/>vertex[2],<sp/>1.0f};</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorMultMatrix(padded_vertex,<sp/>model_matrix);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>padded_vertex[0]<sp/>/=<sp/>padded_vertex[3];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>padded_vertex[1]<sp/>/=<sp/>padded_vertex[3];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>padded_vertex[2]<sp/>/=<sp/>padded_vertex[3];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>padded_vertex[3]<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_t<sp/>eye_vec<sp/>=<sp/>{0.0f};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorSubtractVector(padded_vertex,<sp/>eye,<sp/>eye_vec);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorNormalize(eye_vec);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord0(normal_st[0],<sp/>normal_st[1]);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord1(inv_projection[0][0],<sp/>inv_projection[0][1],<sp/>inv_projection[0][2],<sp/>eye_vec[0]);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord2(inv_projection[1][0],<sp/>inv_projection[1][1],<sp/>inv_projection[1][2],<sp/>eye_vec[1]);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetTexCoord3(inv_projection[2][0],<sp/>inv_projection[2][1],<sp/>inv_projection[2][2],<sp/>eye_vec[2]);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.SetVertex(vertex[0],<sp/>vertex[1],<sp/>vertex[2],<sp/>1.0f);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX3);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>draw(-1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>draw(1.5f,<sp/>0.0f,<sp/>z,<sp/>M_PI<sp/>*<sp/>1.25f,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DOT_RGBMAPPING,<sp/>0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenerateCubemap(uint8_t<sp/>*buffer,<sp/>CubemapGeneratorMode<sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kSliceSize<sp/>=<sp/>kTexturePitch<sp/>*<sp/>kTextureHeight;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBoxSize<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kAlpha<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kColorMasks[]<sp/>=<sp/>{0x0000FF,<sp/>0xFF00FF,<sp/>0x00FF00,<sp/>0x00FFFF,<sp/>0xFF0000,<sp/>0xFFFF00};</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckboxColors[6][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xFF7777FF,<sp/>0xFF222222},<sp/>{0xFF553366,<sp/>0xFFDDDDDD},<sp/>{0xFF55FF55,<sp/>0xFF222222},</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xFF33AAAA,<sp/>0xFFDDDDDD},<sp/>{0xFFFF5555,<sp/>0xFF222222},<sp/>{0xFFAAAA33,<sp/>0xFFDDDDDD},</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+X,<sp/>-X,<sp/>+Y,<sp/>-Y,<sp/>+Z,<sp/>-Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>6;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CubemapGeneratorMode::kRadialGradient:</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateSwizzledRGBRadialGradient(buffer,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>kColorMasks[index],<sp/>kAlpha,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CubemapGeneratorMode::kCheckerboard:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateSwizzledRGBACheckerboard(buffer,<sp/>0,<sp/>0,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>kTexturePitch,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kCheckboxColors[index][0],<sp/>kCheckboxColors[index][1],<sp/>kBoxSize);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CubemapGeneratorMode::kNoise:</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GenerateSwizzledRGBMaxContrastNoisePattern(buffer,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>kColorMasks[index]);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>kSliceSize;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/texture_cubemap_tests.cpp"/>
  </compounddef>
</doxygen>
