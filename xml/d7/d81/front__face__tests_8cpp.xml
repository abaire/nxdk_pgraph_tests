<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d7/d81/front__face__tests_8cpp" kind="file" language="C++">
    <compoundname>front_face_tests.cpp</compoundname>
    <includes refid="df/d31/front__face__tests_8h" local="yes">front_face_tests.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes local="yes">shaders/passthrough_vertex_shader.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes local="yes">vertex_buffer.h</includes>
    <incdepgraph>
      <node id="18">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/front_face_tests.cpp</label>
        <link refid="d7/d81/front__face__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>front_face_tests.h</label>
        <link refid="df/d31/front__face__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>atomic</label>
      </node>
      <node id="11">
        <label>chrono</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="16">
        <label>list</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="23">
        <label>memory</label>
      </node>
      <node id="24">
        <label>nv2astate.h</label>
      </node>
      <node id="25">
        <label>nxdk_ext.h</label>
      </node>
      <node id="17">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="20">
        <label>printf/printf.h</label>
      </node>
      <node id="26">
        <label>pushbuffer.h</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="21">
        <label>shaders/passthrough_vertex_shader.h</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="27">
        <label>texture_format.h</label>
      </node>
      <node id="28">
        <label>texture_stage.h</label>
      </node>
      <node id="9">
        <label>thread</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="29">
        <label>vertex_buffer.h</label>
      </node>
      <node id="19">
        <label>windows.h</label>
      </node>
      <node id="30">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d7/d81/front__face__tests_8cpp_1a518db58e877884d963edcd264246a2d5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kWindings[]</definition>
        <argsstring>[]</argsstring>
        <name>kWindings</name>
        <initializer>= {
    NV097_SET_FRONT_FACE_V_CW, NV097_SET_FRONT_FACE_V_CCW,
    0,   
    99,  
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/front_face_tests.cpp" line="13" column="27" bodyfile="src/tests/front_face_tests.cpp" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d81/front__face__tests_8cpp_1a984c6700268e29fb94c75bd171eba12e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kCullFaces[]</definition>
        <argsstring>[]</argsstring>
        <name>kCullFaces</name>
        <initializer>= {
    NV097_SET_CULL_FACE_V_FRONT,
    NV097_SET_CULL_FACE_V_BACK,
    NV097_SET_CULL_FACE_V_FRONT_AND_BACK,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/front_face_tests.cpp" line="19" column="27" bodyfile="src/tests/front_face_tests.cpp" bodystart="19" bodyend="23"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d7/d81/front__face__tests_8cpp_1a707e2f4ce68a5f89cc22cbcddb0eadf2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string WindingName</definition>
        <argsstring>(uint32_t winding)</argsstring>
        <name>WindingName</name>
        <param>
          <type>uint32_t</type>
          <declname>winding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/front_face_tests.cpp" line="193" column="20" bodyfile="src/tests/front_face_tests.cpp" bodystart="193" bodyend="203" declfile="src/tests/front_face_tests.cpp" declline="10" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d7/d81/front__face__tests_8cpp_1a3e6bb5e9a10257a99966d97abc19f02f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string CullFaceName</definition>
        <argsstring>(uint32_t cull_face)</argsstring>
        <name>CullFaceName</name>
        <param>
          <type>uint32_t</type>
          <declname>cull_face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/front_face_tests.cpp" line="205" column="20" bodyfile="src/tests/front_face_tests.cpp" bodystart="205" bodyend="217" declfile="src/tests/front_face_tests.cpp" declline="11" declcolumn="20"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;front_face_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/passthrough_vertex_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vertex_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>WindingName(uint32_t<sp/>winding);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>CullFaceName(uint32_t<sp/>cull_face);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kWindings[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_FRONT_FACE_V_CW,<sp/>NV097_SET_FRONT_FACE_V_CCW,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/mborgerson/xemu/issues/321</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>99,<sp/><sp/></highlight><highlight class="comment">//<sp/>Random<sp/>value<sp/>to<sp/>verify<sp/>that<sp/>HW<sp/>behavior<sp/>is<sp/>to<sp/>ignore<sp/>unknowns<sp/>and<sp/>retain<sp/>the<sp/>last<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCullFaces[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_CULL_FACE_V_FRONT,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_CULL_FACE_V_BACK,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>NV097_SET_CULL_FACE_V_FRONT_AND_BACK,</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="da/d9a/classFrontFaceTests_1a92f25f7229ced793b3d5411a9d49e53b" kindref="member">FrontFaceTests::FrontFaceTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config&amp;<sp/>config)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Front<sp/>face&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>winding<sp/>:<sp/>kWindings)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cull_face<sp/>:<sp/>kCullFaces)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(winding,<sp/>cull_face);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>winding,<sp/>cull_face]()<sp/>{<sp/>Test(winding,<sp/>cull_face);<sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tests_[name]<sp/>=<sp/>test;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d9a/classFrontFaceTests_1aa0e62504c326e340bea21de969f478d9" kindref="member">FrontFaceTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_CULL_FACE_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::make_shared&lt;PassthroughVertexShader&gt;();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>CreateGeometry();</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FrontFaceTests::CreateGeometry()<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fb_width<sp/>=<sp/>host_.GetFramebufferWidthF();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fb_height<sp/>=<sp/>host_.GetFramebufferHeightF();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>floorf(fb_width<sp/>/<sp/>5.0f);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>right<sp/>=<sp/>left<sp/>+<sp/>(fb_width<sp/>-<sp/>left<sp/>*<sp/>2.0f);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>floorf(fb_height<sp/>/<sp/>12.0f);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>top<sp/>+<sp/>(fb_height<sp/>-<sp/>top<sp/>*<sp/>2.0f);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mid_width<sp/>=<sp/>left<sp/>+<sp/>(right<sp/>-<sp/>left)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>uint32_t<sp/>num_quads<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;VertexBuffer&gt;<sp/>buffer<sp/>=<sp/>host_.AllocateVertexBuffer(6<sp/>*<sp/>num_quads);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>Color<sp/>ul{1.0,<sp/>0.0,<sp/>0.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>Color<sp/>ll{0.0,<sp/>1.0,<sp/>0.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>Color<sp/>lr{0.0,<sp/>0.0,<sp/>1.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>Color<sp/>ur{0.5,<sp/>0.5,<sp/>0.5,<sp/>1.0};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>10.0f;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>buffer-&gt;DefineBiTriCCW(0,<sp/>left<sp/>+<sp/>10,<sp/>top<sp/>+<sp/>4,<sp/>mid_width<sp/>-<sp/>10,<sp/>bottom<sp/>-<sp/>10,<sp/>z,<sp/>z,<sp/>z,<sp/>z,<sp/>ul,<sp/>ll,<sp/>lr,<sp/>ur);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>Color<sp/>tmp<sp/>=<sp/>ul;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>ul<sp/>=<sp/>lr;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>lr<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>ur;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>ur<sp/>=<sp/>ll;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>ll<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>buffer-&gt;DefineBiTri(1,<sp/>mid_width<sp/>+<sp/>10,<sp/>top<sp/>+<sp/>4,<sp/>right<sp/>-<sp/>10,<sp/>bottom<sp/>-<sp/>10,<sp/>z,<sp/>z,<sp/>z,<sp/>z,<sp/>ul,<sp/>ll,<sp/>lr,<sp/>ur);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FrontFaceTests::Test(uint32_t<sp/>front_face,<sp/>uint32_t<sp/>cull_face)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>host_.PrepareDraw();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>verify<sp/>that<sp/>the<sp/>HW<sp/>is<sp/>simply<sp/>preserving<sp/>a<sp/>previously<sp/>set<sp/>value,<sp/>force<sp/>it<sp/>to<sp/>a<sp/>known<sp/>valid,<sp/>but<sp/>different<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>setting<sp/>the<sp/>value<sp/>under<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>setup<sp/>steps<sp/>done<sp/>by<sp/>host_<sp/>will<sp/>set<sp/>the<sp/>front<sp/>face<sp/>to<sp/>CCW,<sp/>so<sp/>CW<sp/>is<sp/>preferred<sp/>to<sp/>differentiate<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>behavior<sp/>from<sp/>simply<sp/>running<sp/>tests<sp/>in<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(front_face<sp/>!=<sp/>NV097_SET_FRONT_FACE_V_CW)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_FRONT_FACE,<sp/>NV097_SET_FRONT_FACE_V_CW);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_FRONT_FACE,<sp/>NV097_SET_FRONT_FACE_V_CCW);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>host_.PBKitBusyWait();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_FRONT_FACE,<sp/>front_face);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CULL_FACE,<sp/>cull_face);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>host_.DrawArrays();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>std::string<sp/>winding_name<sp/>=<sp/>WindingName(front_face);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;FF:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>winding_name.c_str());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::string<sp/>cull_face_name<sp/>=<sp/>CullFaceName(cull_face);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;CF:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>cull_face_name.c_str());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>pb_printat(8,<sp/>19,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;CCW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>pb_printat(8,<sp/>38,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;CW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/>MakeTestName(front_face,<sp/>cull_face);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">std::string<sp/>FrontFaceTests::MakeTestName(uint32_t<sp/>front_face,<sp/>uint32_t<sp/>cull_face)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::string<sp/>ret<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FrontFace_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>ret<sp/>+=<sp/>WindingName(front_face);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_CF_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>ret<sp/>+=<sp/>CullFaceName(cull_face);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(ret);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>WindingName(uint32_t<sp/>winding)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(winding<sp/>==<sp/>NV097_SET_FRONT_FACE_V_CW)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CW&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(winding<sp/>==<sp/>NV097_SET_FRONT_FACE_V_CCW)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CCW&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[16]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/>15,<sp/></highlight><highlight class="stringliteral">&quot;0x%02X&quot;</highlight><highlight class="normal">,<sp/>winding);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>CullFaceName(uint32_t<sp/>cull_face)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cull_face<sp/>==<sp/>NV097_SET_CULL_FACE_V_FRONT)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cull_face<sp/>==<sp/>NV097_SET_CULL_FACE_V_BACK)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cull_face<sp/>==<sp/>NV097_SET_CULL_FACE_V_FRONT_AND_BACK)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FaB&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[16]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/>15,<sp/></highlight><highlight class="stringliteral">&quot;%X&quot;</highlight><highlight class="normal">,<sp/>cull_face);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/front_face_tests.cpp"/>
  </compounddef>
</doxygen>
