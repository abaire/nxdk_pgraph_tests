<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="da/dbd/point__params__tests_8cpp" kind="file" language="C++">
    <compoundname>point_params_tests.cpp</compoundname>
    <includes refid="d1/d5c/point__params__tests_8h" local="yes">point_params_tests.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="no">debug_output.h</includes>
    <includes local="no">xbox_math_d3d.h</includes>
    <includes local="no">xbox_math_matrix.h</includes>
    <includes local="no">memory</includes>
    <includes local="yes">shaders/passthrough_vertex_shader.h</includes>
    <includes local="yes">texture_generator.h</includes>
    <includes local="yes">passthrough_no_point_size.vshinc</includes>
    <incdepgraph>
      <node id="5">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/point_params_tests.cpp</label>
        <link refid="da/dbd/point__params__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>point_params_tests.h</label>
        <link refid="d1/d5c/point__params__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>atomic</label>
      </node>
      <node id="24">
        <label>chrono</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>functional</label>
      </node>
      <node id="29">
        <label>list</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="15">
        <label>memory</label>
      </node>
      <node id="16">
        <label>nv2astate.h</label>
      </node>
      <node id="17">
        <label>nxdk_ext.h</label>
      </node>
      <node id="34">
        <label>passthrough_no_point_size.vshinc</label>
      </node>
      <node id="14">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="7">
        <label>printf/printf.h</label>
      </node>
      <node id="18">
        <label>pushbuffer.h</label>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="32">
        <label>shaders/passthrough_vertex_shader.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="19">
        <label>texture_format.h</label>
      </node>
      <node id="33">
        <label>texture_generator.h</label>
      </node>
      <node id="20">
        <label>texture_stage.h</label>
      </node>
      <node id="12">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="21">
        <label>vertex_buffer.h</label>
      </node>
      <node id="6">
        <label>windows.h</label>
      </node>
      <node id="30">
        <label>xbox_math_d3d.h</label>
      </node>
      <node id="31">
        <label>xbox_math_matrix.h</label>
      </node>
      <node id="22">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="d8/d00/structTestConfig" prot="public">TestConfig</innerclass>
    <innerclass refid="d3/daa/structPointParams" prot="public">PointParams</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1a1b02333e61f4539244faf03b94f5a80b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kPassthroughNoPointSizeShader[]</definition>
        <argsstring>[]</argsstring>
        <name>kPassthroughNoPointSizeShader</name>
        <initializer>= {


}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="13" column="27" bodyfile="src/tests/point_params_tests.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1a542c3e9bab1946e62ba8278fe1a80668" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kZIncrementPerRow</definition>
        <argsstring></argsstring>
        <name>kZIncrementPerRow</name>
        <initializer>= 25.f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="37" column="24" bodyfile="src/tests/point_params_tests.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1ab06b0d3d79f15cf9b06b9ad35a53aa41" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTextureSize</definition>
        <argsstring></argsstring>
        <name>kTextureSize</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="38" column="27" bodyfile="src/tests/point_params_tests.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1a12f655e6e8d33bb2de218f8187959aca" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d3/daa/structPointParams" kindref="compound">PointParams</ref></type>
        <definition>constexpr PointParams kBasicPointParams[]</definition>
        <argsstring>[]</argsstring>
        <name>kBasicPointParams</name>
        <initializer>= {
    {0.f, 0.f, 0.f, 0.f, 100.f, 200.f, -0.f, 0.f},      {0.f, 0.f, 0.f, 0.f, 100.f, 200.f, -0.f, 16.f},
    {0.000001f, 0.f, 0.f, 16.f, 16.f, 32.f, -0.f, 0.f}, {0.000001f, 0.f, 0.f, 16.f, 16.f, 32.f, -0.f, 8.f},
    {4.f, 0.f, 0.f, 14.f, 0.f, 0.f, -0.f, 16.f},        {4.f, 0.f, 0.f, 36.f, 0.f, 0.f, -0.f, 4.f},
    {256.f, 0.f, 0.f, 36.f, 0.f, 0.f, -0.f, 4.f},       {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, -0.f, 1.f},
    {0.f, 0.f, 0.05f, 39.f, 0.f, 0.f, -0.f, 1.f},       {4.f, 0.f, 0.f, 14.f, 0.f, 0.f, -0.5f, 16.f},
    {4.f, 0.f, 0.f, 14.f, 0.f, 0.f, 0.5f, 16.f},        {0.f, 0.f, 0.f, 15.f, 0.f, 0.f, -100.f, 1.f},
    {0.f, 0.f, 0.f, 15.f, 0.f, 0.f, 100.f, 1.f},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="40" column="30" bodyfile="src/tests/point_params_tests.cpp" bodystart="40" bodyend="48"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1a25917238f2e55289b9b31304dad76255" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int kNumBasicPointParamsSets</definition>
        <argsstring></argsstring>
        <name>kNumBasicPointParamsSets</name>
        <initializer>= sizeof(kBasicPointParams) / sizeof(kBasicPointParams[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="50" column="22" bodyfile="src/tests/point_params_tests.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1a0a194ec8cc12f225e456d56639d382fb" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d3/daa/structPointParams" kindref="compound">PointParams</ref></type>
        <definition>constexpr PointParams kDetailedPointParams[]</definition>
        <argsstring>[]</argsstring>
        <name>kDetailedPointParams</name>
        <initializer>= {
    {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, -1.0f, 1.f},  {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, -0.5f, 1.f},
    {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, -0.25f, 1.f}, {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, -0.01f, 1.f},

    {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, -0.f, 1.f},

    {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, 0.01f, 1.f},  {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, 0.25f, 1.f},
    {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, 0.5f, 1.f},   {0.f, 0.25f, 0.f, 39.f, 0.f, 0.f, 1.0f, 1.f},

    {4.f, 0.f, 0.f, 36.f, 0.f, 0.f, -0.4f, 4.f},    {4.f, 0.f, 0.f, 36.f, 0.f, 0.f, -0.25f, 4.f},
    {4.f, 0.f, 0.f, 36.f, 0.f, 0.f, 0.25f, 4.f},    {4.f, 0.f, 0.f, 36.f, 0.f, 0.f, 0.4f, 4.f},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="52" column="30" bodyfile="src/tests/point_params_tests.cpp" bodystart="52" bodyend="63"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1afcfb956c240528ad920bc78456c299d4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int kNumDetailedPointParamsSets</definition>
        <argsstring></argsstring>
        <name>kNumDetailedPointParamsSets</name>
        <initializer>= sizeof(kDetailedPointParams) / sizeof(kDetailedPointParams[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="65" column="22" bodyfile="src/tests/point_params_tests.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1aca4ce644cd9fbc18ec8df05ca64a1b72" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d8/d00/structTestConfig" kindref="compound">TestConfig</ref></type>
        <definition>const TestConfig kBasicTestConfigs[]</definition>
        <argsstring>[]</argsstring>
        <name>kBasicTestConfigs</name>
        <initializer>{
    {&quot;PointParamsOff_SmoothOff_128_FF&quot;, false, false, 128, false},
    {&quot;PointParamsOn_SmoothOn_001_FF&quot;, true, true, 1, false},
    {&quot;PointParamsOn_SmoothOn_128_FF&quot;, true, true, 128, false},
    {&quot;PointParamsOn_SmoothOff_128_FF&quot;, true, false, 128, false},

    {&quot;PointParamsOn_SmoothOn_128_VS&quot;, true, true, 128, true},
    {&quot;PointParamsOn_SmoothOff_128_VS&quot;, true, false, 128, true},
    {&quot;PointParamsOff_SmoothOff_128_VS&quot;, false, false, 128, true},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="67" column="25" bodyfile="src/tests/point_params_tests.cpp" bodystart="67" bodyend="76"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1a536e64b580d07776c960aa667b3bb25c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kDetailedTestName[]</definition>
        <argsstring>[]</argsstring>
        <name>kDetailedTestName</name>
        <initializer>= &quot;Detailed_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="78" column="29" bodyfile="src/tests/point_params_tests.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbd/point__params__tests_8cpp_1a0576eb3f2e5fa2b240606fe7d67bee49" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr const char</type>
        <definition>constexpr const char kScaleParamsTestName[]</definition>
        <argsstring>[]</argsstring>
        <name>kScaleParamsTestName</name>
        <initializer>= &quot;Scale_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="80" column="29" bodyfile="src/tests/point_params_tests.cpp" bodystart="80" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="da/dbd/point__params__tests_8cpp_1a286376579ec477acb4f2730fdad92207" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string MakeScaleParamTestName</definition>
        <argsstring>(bool scale_a, bool scale_b, bool scale_c, bool programmable)</argsstring>
        <name>MakeScaleParamTestName</name>
        <param>
          <type>bool</type>
          <declname>scale_a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scale_b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scale_c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>programmable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="82" column="20" bodyfile="src/tests/point_params_tests.cpp" bodystart="82" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="da/dbd/point__params__tests_8cpp_1acb62f274c3b22527a2b0c3d20aac71ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RowStartCB</type>
          </param>
          <param>
            <type>typename RenderPointCB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void RenderPoints</definition>
        <argsstring>(RowStartCB &amp;&amp;on_row_start, RenderPointCB &amp;&amp;on_render_point)</argsstring>
        <name>RenderPoints</name>
        <param>
          <type>RowStartCB &amp;&amp;</type>
          <declname>on_row_start</declname>
        </param>
        <param>
          <type>RenderPointCB &amp;&amp;</type>
          <declname>on_render_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="210" column="13" bodyfile="src/tests/point_params_tests.cpp" bodystart="210" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="da/dbd/point__params__tests_8cpp_1a3cab7377f5a4101e0bc08ecdeef7c6e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RenderLoop</definition>
        <argsstring>(TestHost &amp;host, const PointParams *param_sets, uint32_t num_params, bool use_shader)</argsstring>
        <name>RenderLoop</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const <ref refid="d3/daa/structPointParams" kindref="compound">PointParams</ref> *</type>
          <declname>param_sets</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_params</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/point_params_tests.cpp" line="226" column="13" bodyfile="src/tests/point_params_tests.cpp" bodystart="226" bodyend="283"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;point_params_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;debug_output.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xbox_math_d3d.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xbox_math_matrix.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/passthrough_vertex_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kPassthroughNoPointSizeShader[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;passthrough_no_point_size.vshinc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/d00/structTestConfig" kindref="compound">TestConfig</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>point_params_enabled;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>point_smooth_enabled;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>point_size;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_shader;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="d3/daa/structPointParams" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/daa/structPointParams" kindref="compound">PointParams</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams_1afad2c9cf81b1476dc7b84fedbfcbb9ee" kindref="member">scaleFactorA</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams_1a8598177e32aa897102371786a8f94abb" kindref="member">scaleFactorB</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams_1a53fe8dddbd57b1486c66bae293f30ff0" kindref="member">scaleFactorC</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sizeRange;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;!<sp/>Max<sp/>point<sp/>size<sp/>-<sp/>min<sp/>point<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams_1a24e1abf77e3c4d634e559b97cdb5b107" kindref="member">sizeRangeDup1</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams_1a688a3187a06ba5dcdae1cc023f7606d5" kindref="member">sizeRangeDup2</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams_1a09007abc29ee005ede1e76e93b44dfa9" kindref="member">scaleBias</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams_1a55bcd5ffadc53d8ca384e10d54044ad1" kindref="member">minSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kZIncrementPerRow<sp/>=<sp/>25.f;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTextureSize<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams" kindref="compound">PointParams</ref><sp/>kBasicPointParams[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.f,<sp/>0.f,<sp/>0.f,<sp/>100.f,<sp/>200.f,<sp/>-0.f,<sp/>0.f},<sp/><sp/><sp/><sp/><sp/><sp/>{0.f,<sp/>0.f,<sp/>0.f,<sp/>0.f,<sp/>100.f,<sp/>200.f,<sp/>-0.f,<sp/>16.f},</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.000001f,<sp/>0.f,<sp/>0.f,<sp/>16.f,<sp/>16.f,<sp/>32.f,<sp/>-0.f,<sp/>0.f},<sp/>{0.000001f,<sp/>0.f,<sp/>0.f,<sp/>16.f,<sp/>16.f,<sp/>32.f,<sp/>-0.f,<sp/>8.f},</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>14.f,<sp/>0.f,<sp/>0.f,<sp/>-0.f,<sp/>16.f},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>36.f,<sp/>0.f,<sp/>0.f,<sp/>-0.f,<sp/>4.f},</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{256.f,<sp/>0.f,<sp/>0.f,<sp/>36.f,<sp/>0.f,<sp/>0.f,<sp/>-0.f,<sp/>4.f},<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>-0.f,<sp/>1.f},</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.f,<sp/>0.05f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>-0.f,<sp/>1.f},<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>14.f,<sp/>0.f,<sp/>0.f,<sp/>-0.5f,<sp/>16.f},</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>14.f,<sp/>0.f,<sp/>0.f,<sp/>0.5f,<sp/>16.f},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0.f,<sp/>0.f,<sp/>0.f,<sp/>15.f,<sp/>0.f,<sp/>0.f,<sp/>-100.f,<sp/>1.f},</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.f,<sp/>0.f,<sp/>15.f,<sp/>0.f,<sp/>0.f,<sp/>100.f,<sp/>1.f},</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kNumBasicPointParamsSets<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kBasicPointParams)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kBasicPointParams[0]);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams" kindref="compound">PointParams</ref><sp/>kDetailedPointParams[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>-1.0f,<sp/>1.f},<sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>-0.5f,<sp/>1.f},</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>-0.25f,<sp/>1.f},<sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>-0.01f,<sp/>1.f},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>-0.f,<sp/>1.f},</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>0.01f,<sp/>1.f},<sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>0.25f,<sp/>1.f},</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>0.5f,<sp/>1.f},<sp/><sp/><sp/>{0.f,<sp/>0.25f,<sp/>0.f,<sp/>39.f,<sp/>0.f,<sp/>0.f,<sp/>1.0f,<sp/>1.f},</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>36.f,<sp/>0.f,<sp/>0.f,<sp/>-0.4f,<sp/>4.f},<sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>36.f,<sp/>0.f,<sp/>0.f,<sp/>-0.25f,<sp/>4.f},</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>36.f,<sp/>0.f,<sp/>0.f,<sp/>0.25f,<sp/>4.f},<sp/><sp/><sp/><sp/>{4.f,<sp/>0.f,<sp/>0.f,<sp/>36.f,<sp/>0.f,<sp/>0.f,<sp/>0.4f,<sp/>4.f},</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kNumDetailedPointParamsSets<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kDetailedPointParams)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kDetailedPointParams[0]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/d00/structTestConfig" kindref="compound">TestConfig</ref><sp/>kBasicTestConfigs[]{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PointParamsOff_SmoothOff_128_FF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>128,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PointParamsOn_SmoothOn_001_FF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PointParamsOn_SmoothOn_128_FF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>128,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PointParamsOn_SmoothOff_128_FF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>128,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PointParamsOn_SmoothOn_128_VS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>128,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PointParamsOn_SmoothOff_128_VS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>128,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PointParamsOff_SmoothOff_128_VS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>128,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kDetailedTestName[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Detailed_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kScaleParamsTestName[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Scale_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>MakeScaleParamTestName(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_a,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>programmable)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::string<sp/>ret<sp/>=<sp/>kScaleParamsTestName;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ret<sp/>+=<sp/>(scale_a<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;4_&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>ret<sp/>+=<sp/>(scale_b<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1_&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>ret<sp/>+=<sp/>(scale_c<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1_&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ret<sp/>+=<sp/>(programmable<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;VS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="d0/d54/classPointParamsTests_1a8e3fb53d8af742c4eaf9cca0fa0c6c95" kindref="member">PointParamsTests::PointParamsTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config&amp;<sp/>config)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Point<sp/>params&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_config<sp/>:<sp/>kBasicTestConfigs)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test_config.name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>test_config]()<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Test(test_config.name,<sp/>test_config.point_params_enabled,<sp/>test_config.point_smooth_enabled,<sp/>test_config.point_size,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_config.use_shader);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>test_name<sp/>=<sp/>kDetailedTestName;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>test_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;FF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test_name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>test_name]()<sp/>{<sp/>TestDetailed(test_name,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>test_name<sp/>=<sp/>kDetailedTestName;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>test_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;VS&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[test_name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>test_name]()<sp/>{<sp/>TestDetailed(test_name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>programmable<sp/>:<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_c<sp/>:<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_b<sp/>:<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_a<sp/>:<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_name<sp/>=<sp/>MakeScaleParamTestName(scale_a,<sp/>scale_b,<sp/>scale_c,<sp/>programmable);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[test_name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>scale_a,<sp/>scale_b,<sp/>scale_c,<sp/>programmable]()<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestScaleParams(scale_a,<sp/>scale_b,<sp/>scale_c,<sp/>programmable);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/d54/classPointParamsTests_1a27bdc51782b517d14131733de7170495" kindref="member">PointParamsTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>texture<sp/>is<sp/>a<sp/>white<sp/>and<sp/>grey<sp/>checkerboard<sp/>that<sp/>will<sp/>be<sp/>multiplied<sp/>by<sp/>the<sp/>diffuse<sp/>color<sp/>of<sp/>the<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>PBKitPlusPlus::GenerateSwizzledRGBACheckerboard(host_.GetTextureMemoryForStage(3),<sp/>0,<sp/>0,<sp/>kTextureSize,<sp/>kTextureSize,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kTextureSize<sp/>*<sp/>4,<sp/>0xFFFFFFFF,<sp/>0xFF333333,<sp/>2);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RowStartCB,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RenderPo</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">CB&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderPoints(RowStartCB&amp;&amp;<sp/>on_row_start,<sp/>RenderPointCB&amp;&amp;<sp/>on_render_point)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>-5.0f;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>red<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>100;<sp/>y<sp/>&lt;<sp/>480;<sp/>y<sp/>+=<sp/>48)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>blue<sp/>=<sp/>0.1f;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>on_row_start();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>20;<sp/>x<sp/>&lt;<sp/>640;<sp/>x<sp/>+=<sp/>48)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on_render_point(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(y),<sp/>z,<sp/>red,<sp/>0.65f,<sp/>blue);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blue<sp/>+=<sp/>0.1f;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>red<sp/>+=<sp/>0.1f;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>kZIncrementPerRow;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderLoop(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/daa/structPointParams" kindref="compound">PointParams</ref>*<sp/>param_sets,<sp/>uint32_t<sp/>num_params,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_shader)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IMPORTANT:<sp/>It<sp/>appears<sp/>that<sp/>only<sp/>stage<sp/>3<sp/>may<sp/>be<sp/>used<sp/>for<sp/>point<sp/>sprites.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>texture<sp/>stages<sp/>will<sp/>not<sp/>get<sp/>the<sp/>automatically<sp/>expanded<sp/>texture<sp/>coordinates,<sp/>leading<sp/>to<sp/>a<sp/>single<sp/>texel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>stretched<sp/>across<sp/>the<sp/>expanded<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>host.SetTextureStageEnabled(3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>host.SetShaderStageProgram(TestHost::STAGE_NONE,<sp/>TestHost::STAGE_NONE,<sp/>TestHost::STAGE_NONE,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>texture_stage<sp/>=<sp/>host.GetTextureStage(3);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>texture_stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8R8G8B8));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>texture_stage.SetTextureDimensions(kTextureSize,<sp/>kTextureSize);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>texture_stage.SetUWrap(TextureStage::WRAP_REPEAT);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>texture_stage.SetVWrap(TextureStage::WRAP_REPEAT);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>host.SetupTextureStages();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner0(TestHost::SRC_TEX3,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param_index;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on_row_start<sp/>=<sp/>[&amp;param_index]()<sp/>{<sp/>param_index<sp/>=<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on_render_point<sp/>=<sp/>[&amp;host,<sp/>use_shader,<sp/>param_sets,<sp/>num_params,<sp/>&amp;param_index](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>red,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>green,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>blue)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>params<sp/>=<sp/>param_sets[param_index<sp/>%<sp/>num_params];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>++param_index;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_FACTOR_A,<sp/>params.scaleFactorA);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_FACTOR_B,<sp/>params.scaleFactorB);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_FACTOR_C,<sp/>params.scaleFactorC);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SIZE_RANGE,<sp/>params.sizeRange);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SIZE_RANGE_DUP_1,<sp/>params.sizeRangeDup1);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SIZE_RANGE_DUP_2,<sp/>params.sizeRangeDup2);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_BIAS,<sp/>params.scaleBias);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_MIN_SIZE,<sp/>params.minSize);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>host.Begin(TestHost::PRIMITIVE_POINTS);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetDiffuse(red,<sp/>green,<sp/>blue);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>screen_point{x,<sp/>y,<sp/>z,<sp/>1.f};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_shader)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_t<sp/>transformed;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host.UnprojectPoint(transformed,<sp/>screen_point,<sp/>screen_point[2]);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorCopyVector(screen_point,<sp/>transformed);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintMsg(</highlight><highlight class="stringliteral">&quot;Drawing<sp/>point<sp/>%f,<sp/>%f,<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>screen_point[0],<sp/>screen_point[1],<sp/>screen_point[2]);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetTexCoord3(0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(screen_point);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>RenderPoints(on_row_start,<sp/>on_render_point);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>host.SetTextureStageEnabled(3,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>host.SetShaderStageProgram(TestHost::STAGE_NONE);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PointParamsTests::Test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>point_params_enabled,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>point_smooth_enabled,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>point_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_shader)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_shader)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::make_shared&lt;PassthroughVertexShader&gt;();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetShader(kPassthroughNoPointSizeShader,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kPassthroughNoPointSizeShader));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF222323);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_PARAMS_ENABLE,<sp/>point_params_enabled);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SMOOTH_ENABLE,<sp/>point_smooth_enabled);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SIZE,<sp/>point_size);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>RenderLoop(host_,<sp/>kBasicPointParams,<sp/>kNumBasicPointParamsSets,<sp/>use_shader);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_PARAMS_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SIZE,<sp/>8);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PointParamsTests::TestDetailed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_shader)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_shader)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::make_shared&lt;PassthroughVertexShader&gt;();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetShader(kPassthroughNoPointSizeShader,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kPassthroughNoPointSizeShader));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF222324);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_PARAMS_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SIZE,<sp/>128);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>RenderLoop(host_,<sp/>kDetailedPointParams,<sp/>kNumDetailedPointParamsSets,<sp/>use_shader);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_PARAMS_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SIZE,<sp/>8);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PointParamsTests::TestScaleParams(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_a,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_b,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scale_c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_shader)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_shader)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::make_shared&lt;PassthroughVertexShader&gt;();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetShader(kPassthroughNoPointSizeShader,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kPassthroughNoPointSizeShader));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kPointSize<sp/>=<sp/>16.25;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kSizeRange<sp/>=<sp/>64.f;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kScaleBias<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kMinSize<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF242323);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_PARAMS_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_FACTOR_A,<sp/>scale_a<sp/>?<sp/>4.f<sp/>:<sp/>0.f);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_FACTOR_B,<sp/>scale_b<sp/>?<sp/>1.f<sp/>:<sp/>0.f);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_FACTOR_C,<sp/>scale_c<sp/>?<sp/>1.f<sp/>:<sp/>0.f);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SIZE_RANGE,<sp/>kSizeRange);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SIZE_RANGE_DUP_1,<sp/>kSizeRange);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SIZE_RANGE_DUP_2,<sp/>kSizeRange);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_SCALE_BIAS,<sp/>kScaleBias);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_POINT_PARAMS_MIN_SIZE,<sp/>kMinSize);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>116.f;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kInset<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kSpacing<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>kInset;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>kTop;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>z<sp/>=<sp/>0;<sp/>z<sp/>&lt;<sp/>192;<sp/>++z)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetPointSize(kPointSize);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_POINTS);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>screen_point{x,<sp/>y,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(z),<sp/>1.f};</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_shader)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_t<sp/>transformed;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>host_.UnprojectPoint(transformed,<sp/>screen_point,<sp/>screen_point[2]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorCopyVector(screen_point,<sp/>transformed);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetDiffuse(0xFF5555EE);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertex(screen_point);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>kSpacing;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>host_.GetFramebufferWidthF()<sp/>-<sp/>kInset)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>kInset;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>kSpacing;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_PARAMS_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SIZE,<sp/>8);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>MakeScaleParamTestName(scale_a,<sp/>scale_b,<sp/>scale_c,<sp/>use_shader);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;sqrt(1/(%d<sp/>+<sp/>%d*D<sp/>+<sp/>%d*D^2))\n&quot;</highlight><highlight class="normal">,<sp/>scale_a<sp/>?<sp/>4<sp/>:<sp/>0,<sp/>scale_b<sp/>?<sp/>1<sp/>:<sp/>0,<sp/>scale_c<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/point_params_tests.cpp"/>
  </compounddef>
</doxygen>
