<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="db/d39/swath__width__tests_8cpp" kind="file" language="C++">
    <compoundname>swath_width_tests.cpp</compoundname>
    <includes refid="df/db5/swath__width__tests_8h" local="yes">swath_width_tests.h</includes>
    <includes local="no">texture_generator.h</includes>
    <includes local="no">memory</includes>
    <includes local="yes">shaders/passthrough_vertex_shader.h</includes>
    <incdepgraph>
      <node id="5">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/swath_width_tests.cpp</label>
        <link refid="db/d39/swath__width__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>swath_width_tests.h</label>
        <link refid="df/db5/swath__width__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>atomic</label>
      </node>
      <node id="24">
        <label>chrono</label>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>functional</label>
      </node>
      <node id="29">
        <label>list</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="15">
        <label>memory</label>
      </node>
      <node id="16">
        <label>nv2astate.h</label>
      </node>
      <node id="17">
        <label>nxdk_ext.h</label>
      </node>
      <node id="14">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="7">
        <label>printf/printf.h</label>
      </node>
      <node id="18">
        <label>pushbuffer.h</label>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="31">
        <label>shaders/passthrough_vertex_shader.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="19">
        <label>texture_format.h</label>
      </node>
      <node id="30">
        <label>texture_generator.h</label>
      </node>
      <node id="20">
        <label>texture_stage.h</label>
      </node>
      <node id="12">
        <label>thread</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="21">
        <label>vertex_buffer.h</label>
      </node>
      <node id="6">
        <label>windows.h</label>
      </node>
      <node id="22">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="d8/d00/structTestConfig" prot="public">TestConfig</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1ac86d2ca2c760c5e6591685b0578f192e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kDefaultDMAChannelA</definition>
        <argsstring></argsstring>
        <name>kDefaultDMAChannelA</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="11" column="27" bodyfile="src/tests/swath_width_tests.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1a2c67f47e94230b17b3734961625b995d" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kDefaultDMAColorChannel</definition>
        <argsstring></argsstring>
        <name>kDefaultDMAColorChannel</name>
        <initializer>= 9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="14" column="27" bodyfile="src/tests/swath_width_tests.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1a60badbdfa91cdbe66ac4dbee73c3faf9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kCheckerboardA</definition>
        <argsstring></argsstring>
        <name>kCheckerboardA</name>
        <initializer>= 0x33FFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="16" column="27" bodyfile="src/tests/swath_width_tests.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1a7fb3ba846c131e16db4e0f482cf869c9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kCheckerboardB</definition>
        <argsstring></argsstring>
        <name>kCheckerboardB</name>
        <initializer>= 0xD0000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="17" column="27" bodyfile="src/tests/swath_width_tests.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1ac2ab555eff3f5f525cf441370868bbc5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kCheckerboardSize</definition>
        <argsstring></argsstring>
        <name>kCheckerboardSize</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="18" column="27" bodyfile="src/tests/swath_width_tests.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1ab06b0d3d79f15cf9b06b9ad35a53aa41" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTextureSize</definition>
        <argsstring></argsstring>
        <name>kTextureSize</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="20" column="27" bodyfile="src/tests/swath_width_tests.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1a52fb40082c56b7c36db1d3e7700cf853" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTexturePitch</definition>
        <argsstring></argsstring>
        <name>kTexturePitch</name>
        <initializer>= kTextureSize * 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="21" column="27" bodyfile="src/tests/swath_width_tests.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/d39/swath__width__tests_8cpp_1a6f817f8da781f2b6f351a49f71fe06fd" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d8/d00/structTestConfig" kindref="compound">TestConfig</ref></type>
        <definition>const TestConfig testConfigs[]</definition>
        <argsstring>[]</argsstring>
        <name>testConfigs</name>
        <initializer>{
    {&quot;SwathWidth00&quot;, NV097_SET_SWATH_WIDTH_V_00}, {&quot;SwathWidth01&quot;, NV097_SET_SWATH_WIDTH_V_01},
    {&quot;SwathWidth02&quot;, NV097_SET_SWATH_WIDTH_V_02}, {&quot;SwathWidth03&quot;, NV097_SET_SWATH_WIDTH_V_03},
    {&quot;SwathWidth04&quot;, NV097_SET_SWATH_WIDTH_V_04}, {&quot;SwathWidth0F&quot;, NV097_SET_SWATH_WIDTH_V_OFF},
    
    
    
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="28" column="25" bodyfile="src/tests/swath_width_tests.cpp" bodystart="28" bodyend="35"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="db/d39/swath__width__tests_8cpp_1a4fff7294d14ea9b03e8afca3d92aa4c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RenderGeometry</definition>
        <argsstring>(TestHost &amp;host)</argsstring>
        <name>RenderGeometry</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="81" column="13" bodyfile="src/tests/swath_width_tests.cpp" bodystart="81" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="db/d39/swath__width__tests_8cpp_1a1ea01651d394add1682432fd0a829ccb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RenderTexturedQuad</definition>
        <argsstring>(TestHost &amp;host, float left, float top, float right, float bottom)</argsstring>
        <name>RenderTexturedQuad</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>float</type>
          <declname>left</declname>
        </param>
        <param>
          <type>float</type>
          <declname>top</declname>
        </param>
        <param>
          <type>float</type>
          <declname>right</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="140" column="13" bodyfile="src/tests/swath_width_tests.cpp" bodystart="140" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="db/d39/swath__width__tests_8cpp_1a2ddc83c9e1a6cf73de6c1a00f98c533d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RenderToAntialiasedTextureBegin</definition>
        <argsstring>(TestHost &amp;host)</argsstring>
        <name>RenderToAntialiasedTextureBegin</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Redirect output to TEX0 with antialiasing enabled and initialize the texture with a translucent checkerboard panel. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="183" column="13" bodyfile="src/tests/swath_width_tests.cpp" bodystart="183" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="db/d39/swath__width__tests_8cpp_1af9cd1844a100c7c16da0c72aa4e20b1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void RenderToAntialiasedTextureEnd</definition>
        <argsstring>(TestHost &amp;host)</argsstring>
        <name>RenderToAntialiasedTextureEnd</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Redirect output back to the framebuffer with antialiasing disabled, then render a quad textured with TEX0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/swath_width_tests.cpp" line="207" column="13" bodyfile="src/tests/swath_width_tests.cpp" bodystart="207" bodyend="257"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;swath_width_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;texture_generator.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/passthrough_vertex_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From<sp/>pbkit.c,<sp/>DMA_A<sp/>is<sp/>set<sp/>to<sp/>channel<sp/>3<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NV097_SET_CONTEXT_DMA_A<sp/>==<sp/>NV20_TCL_PRIMITIVE_3D_SET_OBJECT1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kDefaultDMAChannelA<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From<sp/>pbkit.c,<sp/>DMA_COLOR<sp/>is<sp/>set<sp/>to<sp/>channel<sp/>9<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NV097_SET_CONTEXT_DMA_COLOR<sp/>==<sp/>NV20_TCL_PRIMITIVE_3D_SET_OBJECT3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kDefaultDMAColorChannel<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerboardA<sp/>=<sp/>0x33FFFFFF;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerboardB<sp/>=<sp/>0xD0000000;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerboardSize<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTextureSize<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTexturePitch<sp/>=<sp/>kTextureSize<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/d00/structTestConfig" kindref="compound">TestConfig</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>uint32_t<sp/>swath_width;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/d00/structTestConfig" kindref="compound">TestConfig</ref><sp/>testConfigs[]{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;SwathWidth00&quot;</highlight><highlight class="normal">,<sp/>NV097_SET_SWATH_WIDTH_V_00},<sp/>{</highlight><highlight class="stringliteral">&quot;SwathWidth01&quot;</highlight><highlight class="normal">,<sp/>NV097_SET_SWATH_WIDTH_V_01},</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;SwathWidth02&quot;</highlight><highlight class="normal">,<sp/>NV097_SET_SWATH_WIDTH_V_02},<sp/>{</highlight><highlight class="stringliteral">&quot;SwathWidth03&quot;</highlight><highlight class="normal">,<sp/>NV097_SET_SWATH_WIDTH_V_03},</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;SwathWidth04&quot;</highlight><highlight class="normal">,<sp/>NV097_SET_SWATH_WIDTH_V_04},<sp/>{</highlight><highlight class="stringliteral">&quot;SwathWidth0F&quot;</highlight><highlight class="normal">,<sp/>NV097_SET_SWATH_WIDTH_V_OFF},</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{&quot;SwathWidth05&quot;,<sp/>0x05},<sp/><sp/><sp/>//<sp/>Crashes<sp/>with<sp/>invalid<sp/>data<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{&quot;SwathWidth10&quot;,<sp/>0x10},<sp/><sp/><sp/>//<sp/>Crashes<sp/>with<sp/>invalid<sp/>data<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{&quot;SwathWidthFF&quot;,<sp/>0xFF},<sp/><sp/><sp/>//<sp/>Crashes<sp/>with<sp/>invalid<sp/>data<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="de/d3c/classSwathWidthTests_1a21ec88e3fbd82c2afe0ea7db750beb43" kindref="member">SwathWidthTests::SwathWidthTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config<sp/>&amp;config)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Swath<sp/>width&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>testConfig<sp/>:<sp/>testConfigs)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[testConfig.name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>testConfig]()<sp/>{<sp/>Test(testConfig.name,<sp/>testConfig.swath_width);<sp/>};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d3c/classSwathWidthTests_1ae7f218b6938e52f20a870ffeda939583" kindref="member">SwathWidthTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::make_shared&lt;PassthroughVertexShader&gt;();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>host_.SetBlend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderGeometry(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner1Just(TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>65.f;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>kTop;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_LINE_LOOP);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xCF0000FF);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>host.SetVertex(10.0f,<sp/>top,<sp/>1.0f);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFF00FFFF);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>host.SetVertex(100.0f,<sp/>top<sp/>-<sp/>10.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFF00);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>host.SetVertex(300.0f,<sp/>top,<sp/>1.0f);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>host.SetVertex(600.0f,<sp/>top<sp/>+<sp/>10.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0x6FFFFFFF);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>host.SetVertex(200.0f,<sp/>top<sp/>+<sp/>30.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>50.f;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_TRIANGLE_STRIP);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xCF0000FF);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>host.SetVertex(20.f,<sp/>top,<sp/>2.f);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFF00FFFF);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>host.SetVertex(120.f,<sp/>top<sp/>-<sp/>10.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFF00);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>host.SetVertex(80.f,<sp/>top<sp/>+<sp/>10.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>host.SetVertex(280.f,<sp/>top,<sp/>2.f);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>50.f;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_POINTS);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xCF0000FF);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>host.SetVertex(20.f,<sp/>top,<sp/>2.f);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFF00FFFF);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>host.SetVertex(120.f,<sp/>top<sp/>-<sp/>10.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFF00);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>host.SetVertex(80.f,<sp/>top<sp/>+<sp/>10.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>host.SetVertex(280.f,<sp/>top,<sp/>2.f);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>50.f;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_POLYGON);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xCF0000FF);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>host.SetVertex(20.f,<sp/>top,<sp/>2.f);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFF00FFFF);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>host.SetVertex(120.f,<sp/>top<sp/>-<sp/>10.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>host.SetVertex(280.f,<sp/>top<sp/>+<sp/>12.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFF00FF);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>host.SetVertex(580.f,<sp/>top<sp/>+<sp/>45.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>host.SetDiffuse(0xFFFFFF00);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>host.SetVertex(80.f,<sp/>top<sp/>+<sp/>30.f,<sp/>2.f);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderTexturedQuad(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>right,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bottom)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kStage<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kCombinerSource<sp/>=<sp/>TestHost::SRC_TEX3;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBACheckerboard(host.GetTextureMemoryForStage(kStage),<sp/>0,<sp/>0,<sp/>kTextureSize,<sp/>kTextureSize,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kTexturePitch<sp/>*<sp/>4,<sp/>kCheckerboardA,<sp/>kCheckerboardB,<sp/>kCheckerboardSize);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner0Just(kCombinerSource);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner1Just(kCombinerSource,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>host.SetTextureStageEnabled(kStage,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>in<sp/>sync<sp/>with<sp/>kStage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>host.SetShaderStageProgram(TestHost::STAGE_NONE,<sp/>TestHost::STAGE_NONE,<sp/>TestHost::STAGE_NONE,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;texture_stage<sp/>=<sp/>host.GetTextureStage(kStage);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>texture_stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>texture_stage.SetTextureDimensions(kTextureSize,<sp/>kTextureSize);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>host.SetupTextureStages();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>half_width<sp/>=<sp/>(right<sp/>-<sp/>left)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>half_height<sp/>=<sp/>(bottom<sp/>-<sp/>top)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>host.SetBlend(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>host.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>tex<sp/>coord<sp/>in<sp/>sync<sp/>with<sp/>kCombinerSource.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>host.SetTexCoord3(0.0f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>host.SetVertex(left<sp/>+<sp/>half_width,<sp/>top,<sp/>0.1f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>host.SetTexCoord3(1.0f,<sp/>0.0f);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>host.SetVertex(right,<sp/>top<sp/>+<sp/>half_height,<sp/>0.1f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>host.SetTexCoord3(1.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>host.SetVertex(left<sp/>+<sp/>half_width,<sp/>bottom,<sp/>0.1f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>host.SetTexCoord3(0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>host.SetVertex(left,<sp/>top<sp/>+<sp/>half_height,<sp/>0.1f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>host.SetTextureStageEnabled(kStage,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>host.SetShaderStageProgram(TestHost::STAGE_NONE);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>host.SetupTextureStages();</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderToAntialiasedTextureBegin(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFramebufferWidth<sp/>=<sp/>host.GetFramebufferWidth();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFramebufferHeight<sp/>=<sp/>host.GetFramebufferHeight();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>kAAFramebufferPitch<sp/>=<sp/>kFramebufferWidth<sp/>*<sp/>4<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kTextureMemory<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(host.GetTextureMemoryForStage(0));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>GenerateRGBACheckerboard(host.GetTextureMemoryForStage(0),<sp/>0,<sp/>0,<sp/>kFramebufferWidth<sp/>*<sp/>2,<sp/>kFramebufferHeight,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kAAFramebufferPitch,<sp/>0x3322AAAA,<sp/>0x33AA22AA,<sp/>64);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SURFACE_PITCH,<sp/>SET_MASK(NV097_SET_SURFACE_PITCH_COLOR,<sp/>kAAFramebufferPitch)<sp/>|</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_MASK(NV097_SET_SURFACE_PITCH_ZETA,<sp/>kAAFramebufferPitch));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_COLOR,<sp/>kDefaultDMAChannelA);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SURFACE_COLOR_OFFSET,<sp/>VRAM_ADDR(kTextureMemory));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>host.SetSurfaceFormatImmediate(TestHost::SCF_A8R8G8B8,<sp/>TestHost::SZF_Z16,<sp/>kFramebufferWidth,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>host.GetFramebufferHeight(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>TestHost::AA_CENTER_CORNER_2);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderToAntialiasedTextureEnd(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFramebufferWidth<sp/>=<sp/>host.GetFramebufferWidth();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFramebufferHeight<sp/>=<sp/>host.GetFramebufferHeight();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>kFramebufferPitch<sp/>=<sp/>kFramebufferWidth<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>kAAFramebufferWidth<sp/>=<sp/>kFramebufferWidth<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Direct<sp/>output<sp/>to<sp/>the<sp/>framebuffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_SURFACE_PITCH,<sp/>SET_MASK(NV097_SET_SURFACE_PITCH_COLOR,<sp/>kFramebufferPitch)<sp/>|</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_MASK(NV097_SET_SURFACE_PITCH_ZETA,<sp/>kFramebufferPitch));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_COLOR,<sp/>kDefaultDMAColorChannel);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_SURFACE_COLOR_OFFSET,<sp/>0);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetSurfaceFormatImmediate(TestHost::SCF_A8R8G8B8,<sp/>TestHost::SZF_Z16,<sp/>kFramebufferWidth,<sp/>kFramebufferHeight);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>a<sp/>textured<sp/>quad<sp/>using<sp/>the<sp/>previous<sp/>render<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;texture_stage<sp/>=<sp/>host.GetTextureStage(0);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8R8G8B8));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetTextureDimensions(1,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetImageDimensions(kAAFramebufferWidth,<sp/>kFramebufferHeight);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>texture_stage.SetFilter(0,<sp/>TextureStage::K_QUINCUNX,<sp/>TextureStage::MIN_TENT_LOD0,<sp/>TextureStage::MAG_TENT_LOD0);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetupTextureStages();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetFinalCombiner0Just(TestHost::SRC_TEX0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetFinalCombiner1Just(TestHost::SRC_TEX0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>host.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetTexCoord0(0.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(0.f,<sp/>0.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetTexCoord0(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kAAFramebufferWidth),<sp/>0.f);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(640.f,<sp/>0.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetTexCoord0(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kAAFramebufferWidth),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kFramebufferHeight));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(640.f,<sp/>480.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetTexCoord0(0.f,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kFramebufferHeight));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetVertex(0.f,<sp/>480.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>host.End();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetTextureStageEnabled(0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>host.SetShaderStageProgram(TestHost::STAGE_NONE);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SwathWidthTests::Test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/>uint32_t<sp/>swath_width)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF222322);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_SWATH_WIDTH,<sp/>swath_width);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_SMOOTHING_CONTROL,<sp/>0xFFFF0001);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_LINE_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POLY_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>RenderToAntialiasedTextureBegin(host_);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>RenderGeometry(host_);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadWidth<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kTextureSize)<sp/>*<sp/>1.4f;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadHeight<sp/>=<sp/>kQuadWidth;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kLeft<sp/>=<sp/>(host_.GetFramebufferWidthF()<sp/>-<sp/>kQuadWidth)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kTop<sp/>=<sp/>(host_.GetFramebufferHeightF()<sp/>-<sp/>kQuadHeight)<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>RenderTexturedQuad(host_,<sp/>kLeft,<sp/>kTop,<sp/>kLeft<sp/>+<sp/>kQuadWidth,<sp/>kTop<sp/>+<sp/>kQuadHeight);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_SMOOTHING_CONTROL,<sp/>0xFFFF0000);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_SWATH_WIDTH,<sp/>NV097_SET_SWATH_WIDTH_V_OFF);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_LINE_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_POLY_SMOOTH_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>RenderToAntialiasedTextureEnd(host_);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/swath_width_tests.cpp"/>
  </compounddef>
</doxygen>
