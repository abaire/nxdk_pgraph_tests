<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="dd/dc3/zpass__pixel__count__tests_8cpp" kind="file" language="C++">
    <compoundname>zpass_pixel_count_tests.cpp</compoundname>
    <includes refid="d7/d7d/zpass__pixel__count__tests_8h" local="yes">zpass_pixel_count_tests.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes local="yes">nxdk_ext.h</includes>
    <includes refid="d7/d31/pbkit__ext_8h" local="yes">pbkit_ext.h</includes>
    <includes local="yes">shaders/passthrough_vertex_shader.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes local="yes">vertex_buffer.h</includes>
    <incdepgraph>
      <node id="19">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/zpass_pixel_count_tests.cpp</label>
        <link refid="dd/dc3/zpass__pixel__count__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>zpass_pixel_count_tests.h</label>
        <link refid="d7/d7d/zpass__pixel__count__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>atomic</label>
      </node>
      <node id="13">
        <label>chrono</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="10">
        <label>functional</label>
      </node>
      <node id="18">
        <label>list</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="25">
        <label>nv2astate.h</label>
      </node>
      <node id="22">
        <label>nxdk_ext.h</label>
      </node>
      <node id="3">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="21">
        <label>printf/printf.h</label>
      </node>
      <node id="26">
        <label>pushbuffer.h</label>
      </node>
      <node id="15">
        <label>set</label>
      </node>
      <node id="23">
        <label>shaders/passthrough_vertex_shader.h</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="27">
        <label>texture_format.h</label>
      </node>
      <node id="28">
        <label>texture_stage.h</label>
      </node>
      <node id="11">
        <label>thread</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="29">
        <label>vertex_buffer.h</label>
      </node>
      <node id="20">
        <label>windows.h</label>
      </node>
      <node id="30">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="dd/dc3/zpass__pixel__count__tests_8cpp_1a9748afb1f9fc31d71c665afa5c9d65ee" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char kTestName[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestName</name>
        <initializer>= &quot;ZPass&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/zpass_pixel_count_tests.cpp" line="12" column="23" bodyfile="src/tests/zpass_pixel_count_tests.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dc3/zpass__pixel__count__tests_8cpp_1a8cff90625ea34ae02893fe0888d3713a" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t kDefaultSemaphoreContextChannel</definition>
        <argsstring></argsstring>
        <name>kDefaultSemaphoreContextChannel</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/zpass_pixel_count_tests.cpp" line="16" column="16" bodyfile="src/tests/zpass_pixel_count_tests.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dc3/zpass__pixel__count__tests_8cpp_1a7594433dfdf5983d6bf418fbda3428a7" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t kDefaultReportContextChannel</definition>
        <argsstring></argsstring>
        <name>kDefaultReportContextChannel</name>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/zpass_pixel_count_tests.cpp" line="20" column="16" bodyfile="src/tests/zpass_pixel_count_tests.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="dd/dc3/zpass__pixel__count__tests_8cpp_1afe6868fbb6dae16f936d1ae7ed2315d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string MakePointSizeTestName</definition>
        <argsstring>(uint32_t point_size, bool programmable=false)</argsstring>
        <name>MakePointSizeTestName</name>
        <param>
          <type>uint32_t</type>
          <declname>point_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>programmable</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/zpass_pixel_count_tests.cpp" line="26" column="20" bodyfile="src/tests/zpass_pixel_count_tests.cpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="dd/dc3/zpass__pixel__count__tests_8cpp_1ac319b72fe4577878eb95c9cd9f15f592" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string MakeLineWidthTestName</definition>
        <argsstring>(uint32_t point_size)</argsstring>
        <name>MakeLineWidthTestName</name>
        <param>
          <type>uint32_t</type>
          <declname>point_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/zpass_pixel_count_tests.cpp" line="32" column="20" bodyfile="src/tests/zpass_pixel_count_tests.cpp" bodystart="32" bodyend="36"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;zpass_pixel_count_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nxdk_ext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pbkit_ext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/passthrough_vertex_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vertex_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTestName[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ZPass&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PBKit<sp/>initializes<sp/>channel<sp/>8<sp/>as<sp/>the<sp/>DMA_SEMAPHORE<sp/>context<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/XboxDev/nxdk/blob/4171d5bfe5260c0dd2d42f4efeb9ec1d44788867/lib/pbkit/pbkit.c#L2827</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>kDefaultSemaphoreContextChannel<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PBKit<sp/>initializes<sp/>channel<sp/>12<sp/>as<sp/>the<sp/>DMA_REPORT<sp/>context<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/XboxDev/nxdk/blob/4171d5bfe5260c0dd2d42f4efeb9ec1d44788867/lib/pbkit/pbkit.c#L2828</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>kDefaultReportContextChannel<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/XboxDev/nxdk/blob/4171d5bfe5260c0dd2d42f4efeb9ec1d44788867/lib/pbkit/pbkit.c#L2657</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/XboxDev/nxdk/blob/4171d5bfe5260c0dd2d42f4efeb9ec1d44788867/lib/pbkit/nv_objects.h#L862</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/XboxDev/nxdk/blob/4171d5bfe5260c0dd2d42f4efeb9ec1d44788867/lib/pbkit/nv_regs.h#L44</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>MakePointSizeTestName(uint32_t<sp/>point_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>programmable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[32];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;ZPassPointSize%s-0x%04X&quot;</highlight><highlight class="normal">,<sp/>programmable<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;VS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>point_size);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>MakeLineWidthTestName(uint32_t<sp/>point_size)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[32];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;ZPassLineWidth-0x%04X&quot;</highlight><highlight class="normal">,<sp/>point_size);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="d6/d08/classZPassPixelCountTests_1aad2710de06d0f22c8b02389d70a1a949" kindref="member">ZPassPixelCountTests::ZPassPixelCountTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config<sp/>&amp;config)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;ZPass<sp/>pixel<sp/>count&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>tests_[kTestName]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>Test();<sp/>};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kPointSizeTests[]<sp/>=<sp/>{0,<sp/>1,<sp/>4,<sp/>7,<sp/>8,<sp/>9,<sp/>15,<sp/>16,<sp/>64,<sp/>255,<sp/>256,<sp/>(63<sp/>&lt;&lt;<sp/>3),<sp/>((63<sp/>&lt;&lt;<sp/>3)<sp/>+<sp/>7)};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point_size<sp/>:<sp/>kPointSizeTests)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[MakePointSizeTestName(point_size)]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>point_size]()<sp/>{<sp/>TestPointSize(point_size);<sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[MakePointSizeTestName(point_size,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>point_size]()<sp/>{<sp/>TestPointSizeProgrammable(point_size);<sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kLineWidthTests[]<sp/>=<sp/>{0,<sp/>1,<sp/>4,<sp/>8,<sp/>15,<sp/>16,<sp/>64,<sp/>255,<sp/>504};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line_width<sp/>:<sp/>kLineWidthTests)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>tests_[MakeLineWidthTestName(line_width)]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>line_width]()<sp/>{<sp/>TestLineWidth(line_width);<sp/>};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d08/classZPassPixelCountTests_1a782c0c93d2c64c5c4c205e0c7837ee6d" kindref="member">ZPassPixelCountTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>channel<sp/>=<sp/>kNextContextChannel;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>semaphore_object_size<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>semaphore_context_object_<sp/>=</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(MmAllocateContiguousMemoryEx(semaphore_object_size,<sp/>0,<sp/>MAXRAM,<sp/>0,<sp/>PAGE_READWRITE));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>memset(semaphore_context_object_,<sp/>0,<sp/>semaphore_object_size);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>pb_create_dma_ctx(channel++,<sp/>DMA_CLASS_3D,<sp/>(DWORD)semaphore_context_object_,<sp/>0x20,<sp/>&amp;semaphore_dma_ctx_);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>pb_bind_channel(&amp;semaphore_dma_ctx_);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kReportContextArraySize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*report_context_object_)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>report_context_object_<sp/>=</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ZPassReport<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(MmAllocateContiguousMemoryEx(kReportContextArraySize,<sp/>0,<sp/>MAXRAM,<sp/>0,<sp/>PAGE_READWRITE));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>memset(report_context_object_,<sp/>0,<sp/>kReportContextArraySize);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>pb_create_dma_ctx(channel++,<sp/>DMA_CLASS_3D,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(report_context_object_),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kReportContextArraySize,<sp/>&amp;report_dma_ctx_);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>pb_bind_channel(&amp;report_dma_ctx_);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d08/classZPassPixelCountTests_1a7fcf0954b48e8f04850e78ef2cb97e2b" kindref="member">ZPassPixelCountTests::Deinitialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a28742e0a5438926d43d0814c9694836f" kindref="member">TestSuite::Deinitialize</ref>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(semaphore_context_object_)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>MmFreeContiguousMemory(semaphore_context_object_);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>semaphore_context_object_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(report_context_object_)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>MmFreeContiguousMemory(report_context_object_);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>report_context_object_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ZPassPixelCountTests::Test()<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF333333);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>semaphore_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>test<sp/>assumes<sp/>that<sp/>SET_SEMAPHORE_OFFSET<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Try<sp/>to<sp/>read<sp/>back<sp/>the<sp/>current<sp/>semaphore<sp/>offset<sp/>and<sp/>set<sp/>it<sp/>to<sp/>0<sp/>if<sp/>it<sp/>is<sp/>not,<sp/>then<sp/>restore<sp/>at<sp/>end<sp/>of<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>report_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_CLEAR_REPORT_VALUE,<sp/>NV097_CLEAR_REPORT_VALUE_TYPE_ZPASS_PIXEL_CNT);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_MASK,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_FUNC,<sp/>NV097_SET_DEPTH_FUNC_V_LESS);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>128.f;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontX<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontY<sp/>=<sp/>240.f;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kNonOverlapX<sp/>=<sp/>kFrontX<sp/>+<sp/>kQuadSize<sp/>*<sp/>1.5f;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>quad<sp/>at<sp/>Z<sp/>=<sp/>0<sp/>to<sp/>prime<sp/>the<sp/>depth<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFF773377);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>host_.DrawScreenQuad(kFrontX,<sp/>kFrontY,<sp/>kFrontX<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>another<sp/>quad<sp/>behind<sp/>the<sp/>first<sp/>one,<sp/>it<sp/>should<sp/>be<sp/>entirely<sp/>culled<sp/>and<sp/>not<sp/>affect<sp/>the<sp/>pixel<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFFFF0000);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>host_.DrawScreenQuad(kFrontX,<sp/>kFrontY,<sp/>kFrontX<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ<sp/>+<sp/>1.f);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>quad<sp/>that<sp/>is<sp/>not<sp/>occluded<sp/>to<sp/>establish<sp/>the<sp/>baseline<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFF777733);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>host_.DrawScreenQuad(kNonOverlapX,<sp/>kFrontY,<sp/>kNonOverlapX<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>quad<sp/>partially<sp/>offscreen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>host_.GetFramebufferWidthF()<sp/>-<sp/>kQuadSize<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFFE0E0E0);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>host_.DrawScreenQuad(left,<sp/>kFrontY,<sp/>left<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>should<sp/>be<sp/>written<sp/>by<sp/>the<sp/>test<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kQuadPixels<sp/>=<sp/>kQuadSize<sp/>*<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kHalfQuadPixels<sp/>=<sp/>kQuadPixels<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>2<sp/>full<sp/>quads<sp/>and<sp/>one<sp/>half.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kExpectedPassedPixels<sp/>=<sp/>kQuadPixels<sp/>*<sp/>2<sp/>+<sp/>kHalfQuadPixels;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>z-pass<sp/>counting<sp/>and<sp/>request<sp/>the<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kReportOffset<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>context<sp/>already<sp/>points<sp/>directly<sp/>at<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kSemaphoreReleaseValue<sp/>=<sp/>0xABC;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_GET_REPORT,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_MASK(NV097_GET_REPORT_TYPE,<sp/>NV097_GET_REPORT_TYPE_ZPASS_PIXEL_CNT)<sp/>|<sp/>kReportOffset);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>Pushbuffer::End(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>an<sp/>additional<sp/>quad<sp/>and<sp/>save<sp/>a<sp/>second<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFF33CC33);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>host_.DrawScreenQuad(left,<sp/>kFrontY<sp/>-<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>left<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>kFrontZ<sp/>-<sp/>0.1f);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_GET_REPORT,<sp/>SET_MASK(NV097_GET_REPORT_TYPE,<sp/>NV097_GET_REPORT_TYPE_ZPASS_PIXEL_CNT)<sp/>|</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kReportOffset<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ZPassReport));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_BACK_END_WRITE_SEMAPHORE_RELEASE,<sp/>kSemaphoreReleaseValue);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>kDefaultReportContextChannel);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>kDefaultSemaphoreContextChannel);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>Pushbuffer::End(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>host_.WaitForGPU();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>See<sp/>if<sp/>there<sp/>is<sp/>a<sp/>better<sp/>mechanism<sp/>to<sp/>delay<sp/>until<sp/>the<sp/>report<sp/>is<sp/>fetched<sp/>without<sp/>spin<sp/>locking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32<sp/>&amp;&amp;<sp/>*semaphore_context_object_<sp/>!=<sp/>kSemaphoreReleaseValue;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(1);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kTestName);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;SEMAPHORE<sp/>0x%X<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>*semaphore_context_object_,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*semaphore_context_object_<sp/>==<sp/>kSemaphoreReleaseValue<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>print_report<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](uint32_t<sp/>report_index,<sp/>uint32_t<sp/>expected_pixels)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>kReportOffset<sp/>+<sp/>report_index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ZPassReport);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;report<sp/>=<sp/>report_context_object_[report_index];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;GET_REPORT<sp/>at<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>offset);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timestamp<sp/>is<sp/>a<sp/>64-bit<sp/>nanosecond<sp/>counter.<sp/>To<sp/>avoid<sp/>non-determinism,<sp/>it<sp/>is<sp/>omitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pb_print(&quot;.timestamp:<sp/>0x%llX\n&quot;,<sp/>report.timestamp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.report:<sp/>0x%X<sp/>(%u)<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>report.report,<sp/>report.report,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(report.report<sp/>==<sp/>expected_pixels)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.reserved:<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>report.reserved);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>print_report(0,<sp/>kExpectedPassedPixels);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>print_report(1,<sp/>kExpectedPassedPixels<sp/>+<sp/>kHalfQuadPixels);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kTestName,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ZPassPixelCountTests::TestPointSize(uint32_t<sp/>point_size)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF333333);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>semaphore_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>test<sp/>assumes<sp/>that<sp/>SET_SEMAPHORE_OFFSET<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Try<sp/>to<sp/>read<sp/>back<sp/>the<sp/>current<sp/>semaphore<sp/>offset<sp/>and<sp/>set<sp/>it<sp/>to<sp/>0<sp/>if<sp/>it<sp/>is<sp/>not,<sp/>then<sp/>restore<sp/>at<sp/>end<sp/>of<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>report_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_CLEAR_REPORT_VALUE,<sp/>NV097_CLEAR_REPORT_VALUE_TYPE_ZPASS_PIXEL_CNT);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_MASK,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_FUNC,<sp/>NV097_SET_DEPTH_FUNC_V_LESS);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SIZE,<sp/>point_size);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>128.f;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontX<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontY<sp/>=<sp/>240.f;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kNonOverlapX<sp/>=<sp/>kFrontX<sp/>+<sp/>kQuadSize<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>quad<sp/>at<sp/>Z<sp/>=<sp/>0<sp/>to<sp/>prime<sp/>the<sp/>depth<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFF773377);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>host_.DrawScreenQuad(kFrontX,<sp/>kFrontY,<sp/>kFrontX<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>point<sp/>at<sp/>the<sp/>center<sp/>of<sp/>the<sp/>quad<sp/>and<sp/>another<sp/>point<sp/>in<sp/>a<sp/>fresh<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_POINTS);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>host_.SetScreenVertex(kFrontX<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>kFrontY<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>kFrontZ<sp/>+<sp/>1.5f);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>host_.SetScreenVertex(kNonOverlapX,<sp/>kFrontY<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>should<sp/>be<sp/>written<sp/>by<sp/>the<sp/>test<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kQuadPixels<sp/>=<sp/>kQuadSize<sp/>*<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>1<sp/>full<sp/>quad<sp/>and<sp/>one<sp/>pixel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fractional_point_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(point_size)<sp/>/<sp/>8.f;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>uint32_t<sp/>point_pixels;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fractional_point_size<sp/>&lt;<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fractional_point_size);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>*=<sp/>point_pixels;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>expected_pass_pixels<sp/>=<sp/>kQuadPixels<sp/>+<sp/>point_pixels;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>z-pass<sp/>counting<sp/>and<sp/>request<sp/>the<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kReportOffset<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>context<sp/>already<sp/>points<sp/>directly<sp/>at<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kSemaphoreReleaseValue<sp/>=<sp/>0xCBA;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_GET_REPORT,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_MASK(NV097_GET_REPORT_TYPE,<sp/>NV097_GET_REPORT_TYPE_ZPASS_PIXEL_CNT)<sp/>|<sp/>kReportOffset);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_BACK_END_WRITE_SEMAPHORE_RELEASE,<sp/>kSemaphoreReleaseValue);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>kDefaultReportContextChannel);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>kDefaultSemaphoreContextChannel);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>Pushbuffer::End(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>host_.WaitForGPU();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>See<sp/>if<sp/>there<sp/>is<sp/>a<sp/>better<sp/>mechanism<sp/>to<sp/>delay<sp/>until<sp/>the<sp/>report<sp/>is<sp/>fetched<sp/>without<sp/>spin<sp/>locking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32<sp/>&amp;&amp;<sp/>*semaphore_context_object_<sp/>!=<sp/>kSemaphoreReleaseValue;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>test_name<sp/>=<sp/>MakePointSizeTestName(point_size);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>test_name.c_str());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;SEMAPHORE<sp/>=<sp/>0x%X<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>*semaphore_context_object_,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*semaphore_context_object_<sp/>==<sp/>kSemaphoreReleaseValue<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>kReportOffset;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;report<sp/>=<sp/>report_context_object_[0];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;GET_REPORT<sp/>at<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>offset);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Timestamp<sp/>is<sp/>a<sp/>64-bit<sp/>nanosecond<sp/>counter.<sp/>To<sp/>avoid<sp/>non-determinism,<sp/>it<sp/>is<sp/>omitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pb_print(&quot;.timestamp:<sp/>0x%llX\n&quot;,<sp/>report.timestamp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.report:<sp/>0x%X<sp/>(%u)<sp/>=?<sp/>%d<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>report.report,<sp/>report.report,<sp/>expected_pass_pixels,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(report.report<sp/>==<sp/>expected_pass_pixels)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.reserved:<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>report.reserved);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>test_name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ZPassPixelCountTests::TestPointSizeProgrammable(uint32_t<sp/>point_size)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=<sp/>std::make_shared&lt;PassthroughVertexShader&gt;();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF333333);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>semaphore_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>test<sp/>assumes<sp/>that<sp/>SET_SEMAPHORE_OFFSET<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Try<sp/>to<sp/>read<sp/>back<sp/>the<sp/>current<sp/>semaphore<sp/>offset<sp/>and<sp/>set<sp/>it<sp/>to<sp/>0<sp/>if<sp/>it<sp/>is<sp/>not,<sp/>then<sp/>restore<sp/>at<sp/>end<sp/>of<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>report_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_CLEAR_REPORT_VALUE,<sp/>NV097_CLEAR_REPORT_VALUE_TYPE_ZPASS_PIXEL_CNT);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_MASK,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_FUNC,<sp/>NV097_SET_DEPTH_FUNC_V_LESS);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_POINT_SIZE,<sp/>point_size);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>128.f;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontX<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontY<sp/>=<sp/>240.f;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kNonOverlapX<sp/>=<sp/>kFrontX<sp/>+<sp/>kQuadSize<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>quad<sp/>at<sp/>Z<sp/>=<sp/>0<sp/>to<sp/>prime<sp/>the<sp/>depth<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFF773377);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_QUADS);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>host_.SetVertex(kFrontX,<sp/>kFrontY,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>host_.SetVertex(kFrontX<sp/>+<sp/>kQuadSize,<sp/>kFrontY,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>host_.SetVertex(kFrontX<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>host_.SetVertex(kFrontX,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>point<sp/>at<sp/>the<sp/>center<sp/>of<sp/>the<sp/>quad<sp/>and<sp/>another<sp/>point<sp/>in<sp/>a<sp/>fresh<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_POINTS);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>host_.SetVertex(kFrontX<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>kFrontY<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>kFrontZ<sp/>+<sp/>1.5f);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>host_.SetVertex(kNonOverlapX,<sp/>kFrontY<sp/>+<sp/>kQuadSize<sp/>*<sp/>0.5f,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>should<sp/>be<sp/>written<sp/>by<sp/>the<sp/>test<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kQuadPixels<sp/>=<sp/>kQuadSize<sp/>*<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>1<sp/>full<sp/>quad<sp/>and<sp/>one<sp/>pixel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fractional_point_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(point_size)<sp/>/<sp/>8.f;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>uint32_t<sp/>point_pixels;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>size<sp/>0<sp/>is<sp/>special<sp/>cased<sp/>by<sp/>the<sp/>HW<sp/>to<sp/>be<sp/>1<sp/>pixel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fractional_point_size<sp/>&lt;<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fractional_point_size<sp/>==<sp/>63.f)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>63<sp/>is<sp/>rounded<sp/>up<sp/>to<sp/>64,<sp/>unlike<sp/>all<sp/>the<sp/>other<sp/>whole<sp/>numbers<sp/>which<sp/>remain<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>=<sp/>64<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>fractional<sp/>point<sp/>size<sp/>provides<sp/>the<sp/>size<sp/>of<sp/>one<sp/>side<sp/>of<sp/>a<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ceilf(fractional_point_size));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>point_pixels<sp/>*=<sp/>point_pixels;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>expected_pass_pixels<sp/>=<sp/>kQuadPixels<sp/>+<sp/>point_pixels;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>z-pass<sp/>counting<sp/>and<sp/>request<sp/>the<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kReportOffset<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>context<sp/>already<sp/>points<sp/>directly<sp/>at<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kSemaphoreReleaseValue<sp/>=<sp/>0xCBA;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_GET_REPORT,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_MASK(NV097_GET_REPORT_TYPE,<sp/>NV097_GET_REPORT_TYPE_ZPASS_PIXEL_CNT)<sp/>|<sp/>kReportOffset);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_BACK_END_WRITE_SEMAPHORE_RELEASE,<sp/>kSemaphoreReleaseValue);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>kDefaultReportContextChannel);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>kDefaultSemaphoreContextChannel);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>Pushbuffer::End(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>host_.WaitForGPU();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>See<sp/>if<sp/>there<sp/>is<sp/>a<sp/>better<sp/>mechanism<sp/>to<sp/>delay<sp/>until<sp/>the<sp/>report<sp/>is<sp/>fetched<sp/>without<sp/>spin<sp/>locking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32<sp/>&amp;&amp;<sp/>*semaphore_context_object_<sp/>!=<sp/>kSemaphoreReleaseValue;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(1);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>test_name<sp/>=<sp/>MakePointSizeTestName(point_size,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>test_name.c_str());</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;SEMAPHORE<sp/>=<sp/>0x%X<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>*semaphore_context_object_,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*semaphore_context_object_<sp/>==<sp/>kSemaphoreReleaseValue<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;report<sp/>=<sp/>report_context_object_[0];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Timestamp<sp/>is<sp/>a<sp/>64-bit<sp/>nanosecond<sp/>counter.<sp/>To<sp/>avoid<sp/>non-determinism,<sp/>it<sp/>is<sp/>omitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pb_print(&quot;.timestamp:<sp/>0x%llX\n&quot;,<sp/>report.timestamp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.report:<sp/>0x%X<sp/>(%u)<sp/>=?<sp/>%d<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>report.report,<sp/>report.report,<sp/>expected_pass_pixels,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(report.report<sp/>==<sp/>expected_pass_pixels)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.reserved:<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>report.reserved);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>test_name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ZPassPixelCountTests::TestLineWidth(uint32_t<sp/>line_width)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFF333333);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_DIFFUSE);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>semaphore_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>test<sp/>assumes<sp/>that<sp/>SET_SEMAPHORE_OFFSET<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Try<sp/>to<sp/>read<sp/>back<sp/>the<sp/>current<sp/>semaphore<sp/>offset<sp/>and<sp/>set<sp/>it<sp/>to<sp/>0<sp/>if<sp/>it<sp/>is<sp/>not,<sp/>then<sp/>restore<sp/>at<sp/>end<sp/>of<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>report_dma_ctx_.ChannelID);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_CLEAR_REPORT_VALUE,<sp/>NV097_CLEAR_REPORT_VALUE_TYPE_ZPASS_PIXEL_CNT);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_MASK,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_FUNC,<sp/>NV097_SET_DEPTH_FUNC_V_LESS);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_STENCIL_MASK,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LINE_WIDTH,<sp/>line_width);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kQuadSize<sp/>=<sp/>128.f;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kHalfQuadSize<sp/>=<sp/>kQuadSize<sp/>*<sp/>0.5f;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontX<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontY<sp/>=<sp/>240.f;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kFrontZ<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kNonOverlapX<sp/>=<sp/>kFrontX<sp/>+<sp/>kQuadSize<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>quad<sp/>at<sp/>Z<sp/>=<sp/>0<sp/>to<sp/>prime<sp/>the<sp/>depth<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFF773377);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>host_.DrawScreenQuad(kFrontX,<sp/>kFrontY,<sp/>kFrontX<sp/>+<sp/>kQuadSize,<sp/>kFrontY<sp/>+<sp/>kQuadSize,<sp/>kFrontZ);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>point<sp/>at<sp/>the<sp/>center<sp/>of<sp/>the<sp/>quad<sp/>and<sp/>another<sp/>point<sp/>in<sp/>a<sp/>fresh<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>host_.Begin(TestHost::PRIMITIVE_LINES);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>host_.SetDiffuse(0xFFFFFFFF);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>host_.SetScreenVertex(kFrontX,<sp/>kFrontY<sp/>+<sp/>kHalfQuadSize,<sp/>kFrontZ<sp/>+<sp/>1.5f);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>host_.SetScreenVertex(kFrontX<sp/>+<sp/>kHalfQuadSize,<sp/>kFrontY<sp/>+<sp/>kHalfQuadSize,<sp/>kFrontZ<sp/>+<sp/>1.5f);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>host_.SetScreenVertex(kNonOverlapX,<sp/>kFrontY<sp/>+<sp/>kHalfQuadSize,<sp/>kFrontZ<sp/>+<sp/>1.5f);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>host_.SetScreenVertex(kNonOverlapX<sp/>+<sp/>kHalfQuadSize,<sp/>kFrontY<sp/>+<sp/>kHalfQuadSize,<sp/>kFrontZ<sp/>+<sp/>1.5f);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>host_.End();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>pixels<sp/>that<sp/>should<sp/>be<sp/>written<sp/>by<sp/>the<sp/>test<sp/>quad.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kQuadPixels<sp/>=<sp/>kQuadSize<sp/>*<sp/>kQuadSize;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>fixed<sp/>point<sp/>line<sp/>width<sp/>to<sp/>whole<sp/>pixels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pixel_line_width<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(line_width)<sp/>/<sp/>8.f;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixel_line_width<sp/>&gt;<sp/>0.f<sp/>&amp;&amp;<sp/>pixel_line_width<sp/>&lt;<sp/>1.f)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel_line_width<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel_line_width<sp/>=<sp/>floorf(pixel_line_width);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line_pixel_area<sp/>=<sp/>kHalfQuadSize<sp/>*<sp/>floorf(pixel_line_width);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expect<sp/>1<sp/>full<sp/>quad<sp/>and<sp/>one<sp/>line<sp/>of<sp/>pixels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected_pass_pixels<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kQuadPixels)<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(line_pixel_area);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>z-pass<sp/>counting<sp/>and<sp/>request<sp/>the<sp/>report.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kReportOffset<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>DMA<sp/>context<sp/>already<sp/>points<sp/>directly<sp/>at<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kSemaphoreReleaseValue<sp/>=<sp/>0xCBA;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_ZPASS_PIXEL_COUNT_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_GET_REPORT,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SET_MASK(NV097_GET_REPORT_TYPE,<sp/>NV097_GET_REPORT_TYPE_ZPASS_PIXEL_CNT)<sp/>|<sp/>kReportOffset);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_BACK_END_WRITE_SEMAPHORE_RELEASE,<sp/>kSemaphoreReleaseValue);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_DEPTH_TEST_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_REPORT,<sp/>kDefaultReportContextChannel);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_CONTEXT_DMA_SEMAPHORE,<sp/>kDefaultSemaphoreContextChannel);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>Pushbuffer::End(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>host_.WaitForGPU();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>See<sp/>if<sp/>there<sp/>is<sp/>a<sp/>better<sp/>mechanism<sp/>to<sp/>delay<sp/>until<sp/>the<sp/>report<sp/>is<sp/>fetched<sp/>without<sp/>spin<sp/>locking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32<sp/>&amp;&amp;<sp/>*semaphore_context_object_<sp/>!=<sp/>kSemaphoreReleaseValue;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>Sleep(1);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>test_name<sp/>=<sp/>MakeLineWidthTestName(line_width);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>test_name.c_str());</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;SEMAPHORE<sp/>=<sp/>0x%X<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>*semaphore_context_object_,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*semaphore_context_object_<sp/>==<sp/>kSemaphoreReleaseValue<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;report<sp/>=<sp/>report_context_object_[0];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Timestamp<sp/>is<sp/>a<sp/>64-bit<sp/>nanosecond<sp/>counter.<sp/>To<sp/>avoid<sp/>non-determinism,<sp/>it<sp/>is<sp/>omitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pb_print(&quot;.timestamp:<sp/>0x%llX\n&quot;,<sp/>report.timestamp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.report:<sp/>0x%X<sp/>(%u)<sp/>=?<sp/>%d<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>report.report,<sp/>report.report,<sp/>expected_pass_pixels,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(report.report<sp/>==<sp/>expected_pass_pixels)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;PASS&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;.reserved:<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>report.reserved);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>test_name,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/zpass_pixel_count_tests.cpp"/>
  </compounddef>
</doxygen>
