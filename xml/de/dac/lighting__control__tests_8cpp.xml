<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="de/dac/lighting__control__tests_8cpp" kind="file" language="C++">
    <compoundname>lighting_control_tests.cpp</compoundname>
    <includes refid="d7/ddd/lighting__control__tests_8h" local="yes">lighting_control_tests.h</includes>
    <includes refid="d8/d7c/flat__mesh__grid__model_8h" local="no">models/flat_mesh_grid_model.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes local="no">shaders/perspective_vertex_shader.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes refid="db/d93/light__control__test__mesh__cone__model_8h" local="yes">models/light_control_test_mesh_cone_model.h</includes>
    <includes refid="df/d44/light__control__test__mesh__cylinder__model_8h" local="yes">models/light_control_test_mesh_cylinder_model.h</includes>
    <includes refid="df/dfa/light__control__test__mesh__sphere__model_8h" local="yes">models/light_control_test_mesh_sphere_model.h</includes>
    <includes refid="d7/dcf/light__control__test__mesh__suzanne__model_8h" local="yes">models/light_control_test_mesh_suzanne_model.h</includes>
    <includes refid="d5/d6d/light__control__test__mesh__torus__model_8h" local="yes">models/light_control_test_mesh_torus_model.h</includes>
    <includes refid="d7/d31/pbkit__ext_8h" local="yes">pbkit_ext.h</includes>
    <includes refid="d8/dc4/fixed__function__approximation__shader_8h" local="yes">shaders/fixed_function_approximation_shader.h</includes>
    <includes local="yes">shaders/passthrough_vertex_shader.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes local="yes">texture_generator.h</includes>
    <includes local="yes">vertex_buffer.h</includes>
    <includes local="yes">xbox_math_matrix.h</includes>
    <incdepgraph>
      <node id="23">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>models/flat_mesh_grid_model.h</label>
        <link refid="d8/d7c/flat__mesh__grid__model_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>models/light_control_test_mesh_cone_model.h</label>
        <link refid="db/d93/light__control__test__mesh__cone__model_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>models/light_control_test_mesh_cylinder_model.h</label>
        <link refid="df/d44/light__control__test__mesh__cylinder__model_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>models/light_control_test_mesh_sphere_model.h</label>
        <link refid="df/dfa/light__control__test__mesh__sphere__model_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>models/light_control_test_mesh_suzanne_model.h</label>
        <link refid="d7/dcf/light__control__test__mesh__suzanne__model_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>models/light_control_test_mesh_torus_model.h</label>
        <link refid="d5/d6d/light__control__test__mesh__torus__model_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>shaders/fixed_function_approximation_shader.h</label>
        <link refid="d8/dc4/fixed__function__approximation__shader_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/lighting_control_tests.cpp</label>
        <link refid="de/dac/lighting__control__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lighting_control_tests.h</label>
        <link refid="d7/ddd/lighting__control__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>atomic</label>
      </node>
      <node id="12">
        <label>chrono</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="17">
        <label>list</label>
      </node>
      <node id="13">
        <label>map</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="19">
        <label>models/model_builder.h</label>
      </node>
      <node id="35">
        <label>nv2astate.h</label>
      </node>
      <node id="36">
        <label>nxdk_ext.h</label>
      </node>
      <node id="21">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="25">
        <label>printf/printf.h</label>
      </node>
      <node id="37">
        <label>pushbuffer.h</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="33">
        <label>shaders/passthrough_vertex_shader.h</label>
      </node>
      <node id="22">
        <label>shaders/perspective_vertex_shader.h</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="38">
        <label>texture_format.h</label>
      </node>
      <node id="41">
        <label>texture_generator.h</label>
      </node>
      <node id="39">
        <label>texture_stage.h</label>
      </node>
      <node id="11">
        <label>thread</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="40">
        <label>vertex_buffer.h</label>
      </node>
      <node id="24">
        <label>windows.h</label>
      </node>
      <node id="32">
        <label>xbox_math_matrix.h</label>
      </node>
      <node id="20">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a60badbdfa91cdbe66ac4dbee73c3faf9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kCheckerboardA</definition>
        <argsstring></argsstring>
        <name>kCheckerboardA</name>
        <initializer>= 0xFF202020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="21" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a7fb3ba846c131e16db4e0f482cf869c9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kCheckerboardB</definition>
        <argsstring></argsstring>
        <name>kCheckerboardB</name>
        <initializer>= 0xFF000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="22" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a2265578ef0eb897f81e4188ed3b71e42" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kSceneAmbientColor</definition>
        <argsstring></argsstring>
        <name>kSceneAmbientColor</name>
        <initializer>{0.031373f, 0.031373f, 0.031373f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="24" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a8a2f1b212cd28478d057ea2db505a86c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDirectionalLightDir</definition>
        <argsstring></argsstring>
        <name>kDirectionalLightDir</name>
        <initializer>{1.f, 0.f, 1.f, 1.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="27" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a07a8cd408e1be25029e288a2cf5c0748" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDirectionalLightAmbientColor</definition>
        <argsstring></argsstring>
        <name>kDirectionalLightAmbientColor</name>
        <initializer>{0.f, 0.f, 0.05f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="28" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1ada42b71b6da6b893de7eee53b6c79e98" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDirectionalLightDiffuseColor</definition>
        <argsstring></argsstring>
        <name>kDirectionalLightDiffuseColor</name>
        <initializer>{0.25f, 0.f, 0.f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="29" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a28356b92046f9060270b2908d2348e0b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kDirectionalLightSpecularColor</definition>
        <argsstring></argsstring>
        <name>kDirectionalLightSpecularColor</name>
        <initializer>{0.f, 0.2f, 0.4f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="30" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1abe96a781e075a624d4d5b1b63b8460bf" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kPointLightAmbientColor</definition>
        <argsstring></argsstring>
        <name>kPointLightAmbientColor</name>
        <initializer>{0.f, 0.f, 0.05f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="32" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a6245bf2c0443e179235d08fa239c6d95" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kPointLightDiffuseColor</definition>
        <argsstring></argsstring>
        <name>kPointLightDiffuseColor</name>
        <initializer>{0.25f, 0.f, 0.f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="33" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1a504e4b15f54f4d3b1920c23a933e60a4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr vector_t</type>
        <definition>constexpr vector_t kPointLightSpecularColor</definition>
        <argsstring></argsstring>
        <name>kPointLightSpecularColor</name>
        <initializer>{0.f, 0.2f, 0.4f, 0.f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="34" column="27" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="variable" id="de/dac/lighting__control__tests_8cpp_1ab6e95dbecc7f565959c873329a257fd7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float kShininessFactor</definition>
        <argsstring></argsstring>
        <name>kShininessFactor</name>
        <initializer>= 10.5f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="36" column="24" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="de/dac/lighting__control__tests_8cpp_1a3d9d1aa36cd1a465ca588e73794a1bd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string MakeTestName</definition>
        <argsstring>(uint32_t light_control, bool is_fixed_function, bool specular_enabled)</argsstring>
        <name>MakeTestName</name>
        <param>
          <type>uint32_t</type>
          <declname>light_control</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_fixed_function</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>specular_enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="38" column="20" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="de/dac/lighting__control__tests_8cpp_1a03f11eaaae5140e8024c1c145245e7cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetupLights</definition>
        <argsstring>(TestHost &amp;host, bool specular_enabled)</argsstring>
        <name>SetupLights</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>specular_enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="233" column="13" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="233" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="de/dac/lighting__control__tests_8cpp_1a632f5b4a280e9a52ddcedab331685909" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetupVertexShader</definition>
        <argsstring>(TestHost &amp;host)</argsstring>
        <name>SetupVertexShader</name>
        <param>
          <type><ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/lighting_control_tests.cpp" line="338" column="13" bodyfile="src/tests/lighting_control_tests.cpp" bodystart="338" bodyend="372"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;lighting_control_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;models/flat_mesh_grid_model.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shaders/perspective_vertex_shader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;models/light_control_test_mesh_cone_model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;models/light_control_test_mesh_cylinder_model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;models/light_control_test_mesh_sphere_model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;models/light_control_test_mesh_suzanne_model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;models/light_control_test_mesh_torus_model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pbkit_ext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/fixed_function_approximation_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/passthrough_vertex_shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vertex_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xbox_math_matrix.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerboardA<sp/>=<sp/>0xFF202020;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kCheckerboardB<sp/>=<sp/>0xFF000000;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kSceneAmbientColor{0.031373f,<sp/>0.031373f,<sp/>0.031373f,<sp/>0.f};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From<sp/>the<sp/>left,<sp/>pointing<sp/>right<sp/>and<sp/>into<sp/>the<sp/>screen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDirectionalLightDir{1.f,<sp/>0.f,<sp/>1.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDirectionalLightAmbientColor{0.f,<sp/>0.f,<sp/>0.05f,<sp/>0.f};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDirectionalLightDiffuseColor{0.25f,<sp/>0.f,<sp/>0.f,<sp/>0.f};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kDirectionalLightSpecularColor{0.f,<sp/>0.2f,<sp/>0.4f,<sp/>0.f};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kPointLightAmbientColor{0.f,<sp/>0.f,<sp/>0.05f,<sp/>0.f};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kPointLightDiffuseColor{0.25f,<sp/>0.f,<sp/>0.f,<sp/>0.f};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>vector_t<sp/>kPointLightSpecularColor{0.f,<sp/>0.2f,<sp/>0.4f,<sp/>0.f};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>kShininessFactor<sp/>=<sp/>10.5f;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>MakeTestName(uint32_t<sp/>light_control,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_fixed_function,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specular_enabled)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[36]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/>31,<sp/></highlight><highlight class="stringliteral">&quot;%s_0x%06X%s%s&quot;</highlight><highlight class="normal">,<sp/>is_fixed_function<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;FF&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;VS&quot;</highlight><highlight class="normal">,<sp/>light_control,<sp/>specular_enabled<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;NoSpec&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_fixed_function<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;_LightOff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="d1/d24/classLightingControlTests_1a599d3df2e1ff6cb942c9d30880b2df34" kindref="member">LightingControlTests::LightingControlTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config&amp;<sp/>config)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Lighting<sp/>control&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>local_eye<sp/>:<sp/>{0,<sp/>1})<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>separate_specular<sp/>:<sp/>{0,<sp/>1})<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sout<sp/>:<sp/>{0,<sp/>1})<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>specular_enabled<sp/>:<sp/>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">})<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>light_control<sp/>=<sp/>(sout<sp/>*<sp/>NV097_SET_LIGHT_CONTROL_V_ALPHA_FROM_MATERIAL_SPECULAR)<sp/>+</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(local_eye<sp/>*<sp/>NV097_SET_LIGHT_CONTROL_V_LOCALEYE)<sp/>+</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(separate_specular<sp/>*<sp/>NV097_SET_LIGHT_CONTROL_V_SEPARATE_SPECULAR);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>test_name<sp/>=<sp/>MakeTestName(light_control,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>specular_enabled);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[test_name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>test_name,<sp/>light_control,<sp/>specular_enabled]()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test(test_name,<sp/>light_control,<sp/>specular_enabled,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_name<sp/>=<sp/>MakeTestName(light_control,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>specular_enabled);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tests_[test_name]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>test_name,<sp/>light_control,<sp/>specular_enabled]()<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Test(test_name,<sp/>light_control,<sp/>specular_enabled,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d24/classLightingControlTests_1a03c6a75794f646d8d5fa3405689468ed" kindref="member">LightingControlTests::Deinitialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>vertex_buffer_cone_.reset();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>vertex_buffer_cylinder_.reset();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>vertex_buffer_sphere_.reset();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>vertex_buffer_suzanne_.reset();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>vertex_buffer_torus_.reset();</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LightingControlTests::CreateGeometry()<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SET_COLOR_MATERIAL<sp/>below<sp/>causes<sp/>per-vertex<sp/>diffuse<sp/>color<sp/>to<sp/>be<sp/>ignored<sp/>entirely.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>vector_t<sp/>diffuse{0.f,<sp/>0.f,<sp/>0.0f,<sp/>0.75f};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>the<sp/>alpha<sp/>from<sp/>the<sp/>specular<sp/>value<sp/>is<sp/>added<sp/>to<sp/>the<sp/>material<sp/>alpha.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>the<sp/>color<sp/>is<sp/>added<sp/>to<sp/>the<sp/>computed<sp/>vertex<sp/>color<sp/>if<sp/>SEPARATE_SPECULAR<sp/>is<sp/>OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>vector_t<sp/>specular{0.f,<sp/>0.4,<sp/>0.f,<sp/>0.25f};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>construct_model<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](ModelBuilder&amp;<sp/>model,<sp/>std::shared_ptr&lt;VertexBuffer&gt;&amp;<sp/>vertex_buffer)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_buffer<sp/>=<sp/>host_.AllocateVertexBuffer(model.GetVertexCount());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>model.PopulateVertexBuffer(vertex_buffer);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>model<sp/>=<sp/><ref refid="d6/df1/classLightControlTestMeshConeModel" kindref="compound">LightControlTestMeshConeModel</ref>(diffuse,<sp/>specular);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_model(model,<sp/>vertex_buffer_cone_);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>model<sp/>=<sp/><ref refid="d4/d27/classLightControlTestMeshCylinderModel" kindref="compound">LightControlTestMeshCylinderModel</ref>(diffuse,<sp/>specular);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_model(model,<sp/>vertex_buffer_cylinder_);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>model<sp/>=<sp/><ref refid="d1/de6/classLightControlTestMeshSphereModel" kindref="compound">LightControlTestMeshSphereModel</ref>(diffuse,<sp/>specular);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_model(model,<sp/>vertex_buffer_sphere_);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>model<sp/>=<sp/><ref refid="dc/d32/classLightControlTestMeshSuzanneModel" kindref="compound">LightControlTestMeshSuzanneModel</ref>(diffuse,<sp/>specular);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_model(model,<sp/>vertex_buffer_suzanne_);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>model<sp/>=<sp/><ref refid="d6/d1f/classLightControlTestMeshTorusModel" kindref="compound">LightControlTestMeshTorusModel</ref>(diffuse,<sp/>specular);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_model(model,<sp/>vertex_buffer_torus_);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d24/classLightingControlTests_1a660ca07007d34f41d78b69f4c8d4d487" kindref="member">LightingControlTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>CreateGeometry();</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetupLights(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specular_enabled)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHTING_ENABLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_ENABLE,<sp/>specular_enabled);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>Pushbuffer::Push3F(NV097_SET_SCENE_AMBIENT_COLOR,<sp/>kSceneAmbientColor);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_COLOR_MATERIAL,<sp/>NV097_SET_COLOR_MATERIAL_ALL_FROM_MATERIAL);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_MATERIAL_EMISSION,<sp/>0x0,<sp/>0x0,<sp/>0x0);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>Pushbuffer::PushF(NV097_SET_MATERIAL_ALPHA,<sp/>0.40f);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Values<sp/>taken<sp/>from<sp/>MechAssault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x00,<sp/>0xBF56C33A);<sp/><sp/></highlight><highlight class="comment">//<sp/>-0.838916</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x04,<sp/>0xC038C729);<sp/><sp/></highlight><highlight class="comment">//<sp/>-2.887156</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x08,<sp/>0x4043165A);<sp/><sp/></highlight><highlight class="comment">//<sp/>3.048239</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x0c,<sp/>0xBF34DCE5);<sp/><sp/></highlight><highlight class="comment">//<sp/>-0.706496</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x10,<sp/>0xC020743F);<sp/><sp/></highlight><highlight class="comment">//<sp/>-2.507095</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x14,<sp/>0x40333D06);<sp/><sp/></highlight><highlight class="comment">//<sp/>2.800600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Values<sp/>from<sp/>Ninja<sp/>Gaiden<sp/>Black</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushbuffer::Push(<sp/>NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x00,0xBF6E9EE5);<sp/>//<sp/><sp/>-0.932112)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushbuffer::Push(<sp/>NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x04,0xC0463F88);<sp/>//<sp/><sp/>-3.097628)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushbuffer::Push(<sp/>NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x08,0x404A97CF);<sp/>//<sp/><sp/>3.165516)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushbuffer::Push(<sp/>NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x0c,0xBF5E8491);<sp/>//<sp/><sp/>-0.869210)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushbuffer::Push(<sp/>NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x10,0xC03BDEAB);<sp/>//<sp/><sp/>-2.935466)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushbuffer::Push(<sp/>NV097_SET_SPECULAR_PARAMS<sp/>+<sp/>0x14,0x40443D87);<sp/>//<sp/><sp/>3.066255)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Collects<sp/>the<sp/>modes<sp/>of<sp/>each<sp/>hardware<sp/>light.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>uint32_t<sp/>light_mode_bitvector<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Directional<sp/>light<sp/>from<sp/>the<sp/>left<sp/>pointing<sp/>towards<sp/>the<sp/>right<sp/>and<sp/>into<sp/>the<sp/>screen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kLightNum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>normalized_light_dir{0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorNormalize(kDirectionalLightDir,<sp/>normalized_light_dir);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>Blinn<sp/>half<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://paroj.github.io/gltut/Illumination/Tut11%20BlinnPhong%20Model.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>look<sp/>at<sp/>vector<sp/>from<sp/>the<sp/>default<sp/>XDK<sp/>initialization<sp/>in<sp/>TestHost::BuildDefaultXDKModelViewMatrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>eye{0.0f,<sp/>0.0f,<sp/>-7.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>at{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>look_dir{0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorSubtractVector(at,<sp/>eye,<sp/>look_dir);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorNormalize(look_dir);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>half_angle_vector{0.f,<sp/>0.f,<sp/>0.f,<sp/>1.f};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorAddVector(look_dir,<sp/>normalized_light_dir,<sp/>half_angle_vector);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorNormalize(half_angle_vector);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Infinite<sp/>direction<sp/>is<sp/>the<sp/>direction<sp/>towards<sp/>the<sp/>light<sp/>source.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>ScalarMultVector(normalized_light_dir,<sp/>-1.f);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>ScalarMultVector(half_angle_vector,<sp/>-1.f);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_AMBIENT_COLOR),<sp/>kDirectionalLightAmbientColor);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_DIFFUSE_COLOR),<sp/>kDirectionalLightDiffuseColor);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_SPECULAR_COLOR),<sp/>kDirectionalLightSpecularColor);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_LOCAL_RANGE),<sp/>1e30f);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_INFINITE_HALF_VECTOR),<sp/>half_angle_vector);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_INFINITE_DIRECTION),<sp/>normalized_light_dir);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>light_mode_bitvector<sp/>|=<sp/>LIGHT_MODE(kLightNum,<sp/>NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Point<sp/>light<sp/>on<sp/>the<sp/>right<sp/>between<sp/>the<sp/>geometry<sp/>and<sp/>camera.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kLightNum<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>position{1.5f,<sp/>1.f,<sp/>-2.5f,<sp/>1.f};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>matrix4_t&amp;<sp/>view_matrix<sp/>=<sp/>host.GetFixedFunctionModelViewMatrix();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorMultMatrix(position,<sp/>view_matrix);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>position[3]<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_AMBIENT_COLOR),<sp/>kPointLightAmbientColor);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_DIFFUSE_COLOR),<sp/>kPointLightDiffuseColor);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_SPECULAR_COLOR),<sp/>kPointLightSpecularColor);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_LOCAL_RANGE),<sp/>4.f);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push3F(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_LOCAL_POSITION),<sp/>position);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attenuation<sp/>=<sp/>param1<sp/>+<sp/>(param2<sp/>*<sp/>d)<sp/>+<sp/>(param3<sp/>*<sp/>d^2)<sp/>where<sp/>d<sp/>=<sp/>distance<sp/>from<sp/>light<sp/>to<sp/>surface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::PushF(SET_LIGHT(kLightNum,<sp/>NV097_SET_LIGHT_LOCAL_ATTENUATION),<sp/>0.025f,<sp/>0.15f,<sp/>0.02f);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>light_mode_bitvector<sp/>|=<sp/>LIGHT_MODE(kLightNum,<sp/>NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_ENABLE_MASK,<sp/>light_mode_bitvector);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>host.SetCombinerControl(1);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>host.SetInputColorCombiner(0,<sp/>TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::MAP_UNSIGNED_IDENTITY,<sp/>TestHost::SRC_ZERO,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::MAP_UNSIGNED_INVERT,<sp/>TestHost::SRC_SPECULAR,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::MAP_UNSIGNED_IDENTITY,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::MAP_UNSIGNED_INVERT);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>host.SetInputAlphaCombiner(0,<sp/>TestHost::SRC_DIFFUSE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>TestHost::MAP_UNSIGNED_IDENTITY,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::MAP_UNSIGNED_INVERT,<sp/>TestHost::SRC_SPECULAR,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHost::MAP_UNSIGNED_IDENTITY,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::MAP_UNSIGNED_INVERT);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>host.SetOutputColorCombiner(0,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>host.SetOutputAlphaCombiner(0,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_DISCARD,<sp/>TestHost::DST_R0);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner0Just(TestHost::SRC_R0);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>host.SetFinalCombiner1(TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_ZERO,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>TestHost::SRC_R0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*specular_add_invert_r0*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*<sp/>specular_add_invert_v1*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>specular_clamp<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetupVertexShader(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref>&amp;<sp/>host)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>custom<sp/>shader<sp/>that<sp/>approximates<sp/>the<sp/>interesting<sp/>lighting<sp/>portions<sp/>of<sp/>the<sp/>fixed<sp/>function<sp/>pipeline.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depth_buffer_max_value<sp/>=<sp/>host.GetMaxDepthBufferValue();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shader<sp/>=</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;FixedFunctionApproximationShader&gt;(host.GetFramebufferWidth(),<sp/>host.GetFramebufferHeight(),<sp/>0.0f,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth_buffer_max_value,<sp/>M_PI<sp/>*<sp/>0.25f,<sp/>1.0f,<sp/>200.0f);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>camera_position<sp/>=<sp/>{0.0f,<sp/>0.0f,<sp/>-7.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>camera_look_at<sp/>=<sp/>{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;LookAt(camera_position,<sp/>camera_look_at);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetTransposeOnUpload();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetDirectionalLightCastDirection(kDirectionalLightDir);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>120<sp/>-<sp/>PerspectiveVertexShader::kShaderUserConstantOffset;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#invalid_color<sp/>vector<sp/>120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUniformF(index++,<sp/>1.f,<sp/>0.f,<sp/>1.f,<sp/>1.f);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>vector_t<sp/>combined_ambient<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kDirectionalLightAmbientColor[0]<sp/>+<sp/>kPointLightAmbientColor[0],</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kDirectionalLightAmbientColor[1]<sp/>+<sp/>kPointLightAmbientColor[1],</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kDirectionalLightAmbientColor[2]<sp/>+<sp/>kPointLightAmbientColor[2],</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kDirectionalLightAmbientColor[3]<sp/>+<sp/>kPointLightAmbientColor[3],</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#light_ambient<sp/>vector<sp/>121</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUniform4F(index++,<sp/>combined_ambient);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#light_diffuse<sp/>vector<sp/>122</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUniform4F(index++,<sp/>kDirectionalLightDiffuseColor);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#light_specular<sp/>vector<sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUniform4F(index++,<sp/>kDirectionalLightSpecularColor);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#material_specular_factor<sp/>vector<sp/>124</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUniformF(index++,<sp/>kShininessFactor,<sp/>0.f,<sp/>0.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#scene_ambient<sp/>vector<sp/>125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>shader-&gt;SetUniform4F(index++,<sp/>kSceneAmbientColor);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>host.SetVertexShaderProgram(shader);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LightingControlTests::Test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/>uint32_t<sp/>light_control,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>specular_enabled,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_fixed_function)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_fixed_function)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexShaderProgram(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>SetupVertexShader(host_);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kBackgroundColor<sp/>=<sp/>0xFF232623;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(kBackgroundColor);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>host_.DrawCheckerboardUnproject(kCheckerboardA,<sp/>kCheckerboardB,<sp/>24);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHT_CONTROL,<sp/>light_control);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>SetupLights(host_,<sp/>specular_enabled);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_fixed_function)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Begin();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::Push(NV097_SET_LIGHTING_ENABLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>Pushbuffer::End();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vb<sp/>:<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_buffer_cone_,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_buffer_cylinder_,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_buffer_sphere_,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_buffer_suzanne_,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_buffer_torus_,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.SetVertexBuffer(vb);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>host_.DrawArrays(host_.POSITION<sp/>|<sp/>host_.NORMAL<sp/>|<sp/>host_.DIFFUSE<sp/>|<sp/>host_.SPECULAR);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s<sp/>0x%X\n&quot;</highlight><highlight class="normal">,<sp/>name.c_str(),<sp/>light_control);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;SEPARATE_SPECULAR<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(light_control<sp/>&amp;<sp/>NV097_SET_LIGHT_CONTROL_V_SEPARATE_SPECULAR)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;LOCALEYE<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(light_control<sp/>&amp;<sp/>NV097_SET_LIGHT_CONTROL_V_LOCALEYE)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;ALPHA<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(light_control<sp/>&amp;<sp/>NV097_SET_LIGHT_CONTROL_V_ALPHA_FROM_MATERIAL_SPECULAR)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;FROM<sp/>MATERIAL&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OPAQUE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_fixed_function)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;(Lighting<sp/>disabled)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>name);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/lighting_control_tests.cpp"/>
  </compounddef>
</doxygen>
