<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="df/d45/texture__3d__as__2d__tests_8cpp" kind="file" language="C++">
    <compoundname>texture_3d_as_2d_tests.cpp</compoundname>
    <includes refid="de/d23/texture__3d__as__2d__tests_8h" local="yes">texture_3d_as_2d_tests.h</includes>
    <includes local="no">SDL.h</includes>
    <includes local="no">SDL_image.h</includes>
    <includes local="no">pbkit/pbkit.h</includes>
    <includes refid="d3/dc0/debug__output_8h" local="yes">debug_output.h</includes>
    <includes refid="d7/d3a/perspective__vertex__shader__no__lighting_8h" local="yes">shaders/perspective_vertex_shader_no_lighting.h</includes>
    <includes refid="df/d43/test__host_8h" local="yes">test_host.h</includes>
    <includes local="yes">texture_format.h</includes>
    <includes local="yes">texture_generator.h</includes>
    <includes local="yes">xbox_math_types.h</includes>
    <incdepgraph>
      <node id="20">
        <label>debug_output.h</label>
        <link refid="d3/dc0/debug__output_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ftp_logger.h</label>
        <link refid="d0/dad/ftp__logger_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pbkit_ext.h</label>
        <link refid="d7/d31/pbkit__ext_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pgraph_diff_token.h</label>
        <link refid="d3/d11/pgraph__diff__token_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>shaders/perspective_vertex_shader_no_lighting.h</label>
        <link refid="d7/d3a/perspective__vertex__shader__no__lighting_8h_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>test_host.h</label>
        <link refid="df/d43/test__host_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>test_suite.h</label>
        <link refid="d6/d7a/test__suite_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tests/texture_3d_as_2d_tests.cpp</label>
        <link refid="df/d45/texture__3d__as__2d__tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>texture_3d_as_2d_tests.h</label>
        <link refid="de/d23/texture__3d__as__2d__tests_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>SDL.h</label>
      </node>
      <node id="18">
        <label>SDL_image.h</label>
      </node>
      <node id="6">
        <label>atomic</label>
      </node>
      <node id="11">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="16">
        <label>list</label>
      </node>
      <node id="12">
        <label>map</label>
      </node>
      <node id="26">
        <label>memory</label>
      </node>
      <node id="27">
        <label>nv2astate.h</label>
      </node>
      <node id="28">
        <label>nxdk_ext.h</label>
      </node>
      <node id="19">
        <label>pbkit/pbkit.h</label>
      </node>
      <node id="22">
        <label>printf/printf.h</label>
      </node>
      <node id="29">
        <label>pushbuffer.h</label>
      </node>
      <node id="13">
        <label>set</label>
      </node>
      <node id="24">
        <label>shaders/perspective_vertex_shader.h</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="30">
        <label>texture_format.h</label>
      </node>
      <node id="34">
        <label>texture_generator.h</label>
      </node>
      <node id="31">
        <label>texture_stage.h</label>
      </node>
      <node id="9">
        <label>thread</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
      <node id="32">
        <label>vertex_buffer.h</label>
      </node>
      <node id="21">
        <label>windows.h</label>
      </node>
      <node id="33">
        <label>xbox_math_types.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="df/d45/texture__3d__as__2d__tests_8cpp_1a5e471bd5d80fd56a984140f70622e4c9" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTextureWidth</definition>
        <argsstring></argsstring>
        <name>kTextureWidth</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="16" column="27" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d45/texture__3d__as__2d__tests_8cpp_1aa68568112c7c845891ebf9821978aa81" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTextureHeight</definition>
        <argsstring></argsstring>
        <name>kTextureHeight</name>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="17" column="27" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d45/texture__3d__as__2d__tests_8cpp_1a52fb40082c56b7c36db1d3e7700cf853" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kTexturePitch</definition>
        <argsstring></argsstring>
        <name>kTexturePitch</name>
        <initializer>= kTextureWidth * 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="18" column="27" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d45/texture__3d__as__2d__tests_8cpp_1a5cc141663d984d83108c8fd4f33e1093" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kGeometryWidth</definition>
        <argsstring></argsstring>
        <name>kGeometryWidth</name>
        <initializer>= kTextureWidth * 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="20" column="27" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d45/texture__3d__as__2d__tests_8cpp_1a9cd1ed19d51c9ff6bb589dd5d4d34cce" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t kGeometryHeight</definition>
        <argsstring></argsstring>
        <name>kGeometryHeight</name>
        <initializer>= kTextureHeight * 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="21" column="27" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d45/texture__3d__as__2d__tests_8cpp_1a3502947b71a4dfd612c5320cb6a8e02e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char kTestCubemap[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestCubemap</name>
        <initializer>= &quot;Cubemap_as_2D&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="23" column="23" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/d45/texture__3d__as__2d__tests_8cpp_1aedec8f6df72ea96f6c5ceacfb7727572" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char kTestVolumetric[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestVolumetric</name>
        <initializer>= &quot;Volumetric_as_2D&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="24" column="23" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="df/d45/texture__3d__as__2d__tests_8cpp_1a8f34c03472430a85aa75df8d59fabb17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GenerateCubemap</definition>
        <argsstring>(uint8_t *buffer)</argsstring>
        <name>GenerateCubemap</name>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tests/texture_3d_as_2d_tests.cpp" line="137" column="13" bodyfile="src/tests/texture_3d_as_2d_tests.cpp" bodystart="137" bodyend="157" declfile="src/tests/texture_3d_as_2d_tests.cpp" declline="26" declcolumn="13"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;texture_3d_as_2d_tests.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL_image.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pbkit/pbkit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;debug_output.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shaders/perspective_vertex_shader_no_lighting.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_host.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;texture_generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xbox_math_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">XboxMath;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTextureWidth<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTextureHeight<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kTexturePitch<sp/>=<sp/>kTextureWidth<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kGeometryWidth<sp/>=<sp/>kTextureWidth<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kGeometryHeight<sp/>=<sp/>kTextureHeight<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTestCubemap[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Cubemap_as_2D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTestVolumetric[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Volumetric_as_2D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenerateCubemap(uint8_t<sp/>*buffer);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="d5/d6c/classTexture3DAs2DTests_1ac5245cde9db9c4eb928392a6407e8d4f" kindref="member">Texture3DAs2DTests::Texture3DAs2DTests</ref>(<ref refid="d6/d80/classTestHost" kindref="compound">TestHost</ref><sp/>&amp;host,<sp/>std::string<sp/>output_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Config<sp/>&amp;config)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d3e/classTestSuite" kindref="compound">TestSuite</ref>(host,<sp/>std::move(output_dir),<sp/></highlight><highlight class="stringliteral">&quot;Texture<sp/>3D<sp/>as<sp/>2D&quot;</highlight><highlight class="normal">,<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>tests_[kTestCubemap]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestCubemap();<sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>tests_[kTestVolumetric]<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/>TestVolumetric();<sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/d6c/classTexture3DAs2DTests_1a34bd89219bf323515031e7bfafc943f1" kindref="member">Texture3DAs2DTests::Initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="d2/d3e/classTestSuite_1a1c4756eb905d6d4d35e1630107396c38" kindref="member">TestSuite::Initialize</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>host_.SetXDKDefaultViewportAndFixedFunctionMatrices();</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Texture3DAs2DTests::TestCubemap()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>GenerateCubemap(host_.GetTextureMemoryForStage(0));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stage<sp/>=<sp/>host_.GetTextureStage(0);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>stage.SetEnabled();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>stage.SetTextureDimensions(kTextureWidth,<sp/>kTextureHeight);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>stage.SetCubemapEnable();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFE121212);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>host_.<ref refid="d6/d80/classTestHost_1a6d7644613f0f313c03f990038d995d36" kindref="member">CenterX</ref>(kGeometryWidth);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>host_.<ref refid="d6/d80/classTestHost_1a20f1c9bc7b1155623f1c0fc470de45a9" kindref="member">CenterY</ref>(kGeometryHeight);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>host_.DrawSwizzledTexturedScreenQuad(left,<sp/>top,<sp/>left<sp/>+<sp/>kGeometryWidth,<sp/>top<sp/>+<sp/>kGeometryHeight,<sp/>0.f);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>a<sp/>smaller<sp/>version<sp/>of<sp/>the<sp/>primary<sp/>face<sp/>as<sp/>a<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>stage.SetCubemapEnable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>left<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>top<sp/>=<sp/>host_.<ref refid="d6/d80/classTestHost_1a20f1c9bc7b1155623f1c0fc470de45a9" kindref="member">CenterY</ref>(kTextureHeight);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>host_.DrawSwizzledTexturedScreenQuad(left,<sp/>top,<sp/>left<sp/>+<sp/>kTextureWidth,<sp/>top<sp/>+<sp/>kTextureHeight,<sp/>0.f);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>stage.SetEnabled(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>stage.SetCubemapEnable(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kTestCubemap);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>pb_printat(6,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kTestCubemap);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Texture3DAs2DTests::TestVolumetric()<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>texture_memory<sp/>=<sp/>host_.GetTextureMemoryForStage(0);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBACheckerboard(texture_memory,<sp/>0,<sp/>0,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>kTexturePitch,<sp/>0xEFBBCC33,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x33449988);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>texture_memory<sp/>+=<sp/>kTextureHeight<sp/>*<sp/>kTexturePitch;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBATestPattern(texture_memory,<sp/>kTextureWidth,<sp/>kTextureHeight);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;stage<sp/>=<sp/>host_.GetTextureStage(0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>stage.SetEnabled();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>stage.SetTextureDimensions(kTextureWidth,<sp/>kTextureHeight,<sp/>2);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>stage.SetFormat(GetTextureFormatInfo(NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>host_.SetShaderStageProgram(TestHost::STAGE_2D_PROJECTIVE);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>host_.PrepareDraw(0xFE131313);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>host_.<ref refid="d6/d80/classTestHost_1a6d7644613f0f313c03f990038d995d36" kindref="member">CenterX</ref>(kGeometryWidth);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>host_.<ref refid="d6/d80/classTestHost_1a20f1c9bc7b1155623f1c0fc470de45a9" kindref="member">CenterY</ref>(kGeometryHeight);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner0Just(TestHost::SRC_TEX0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>host_.SetFinalCombiner1Just(TestHost::SRC_TEX0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>out<sp/>the<sp/>STQR<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>host_.SetTexCoord0(0.f,<sp/>0.f,<sp/>0.f,<sp/>0.f);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>host_.DrawSwizzledTexturedScreenQuad(left,<sp/>top,<sp/>left<sp/>+<sp/>kGeometryWidth,<sp/>top<sp/>+<sp/>kGeometryHeight,<sp/>0.f);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>stage.SetTextureDimensions(kTextureWidth,<sp/>kTextureHeight);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>host_.SetupTextureStages();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>left<sp/>=<sp/>32.f;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>top<sp/>=<sp/>host_.<ref refid="d6/d80/classTestHost_1a20f1c9bc7b1155623f1c0fc470de45a9" kindref="member">CenterY</ref>(kTextureHeight<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>host_.DrawSwizzledTexturedScreenQuad(left,<sp/>top,<sp/>left<sp/>+<sp/>kTextureWidth,<sp/>top<sp/>+<sp/>kTextureHeight,<sp/>0.f);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>TestHost::PBKitBusyWait();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>memcpy(host_.GetTextureMemoryForStage(0),<sp/>texture_memory,<sp/>kTextureHeight<sp/>*<sp/>kTexturePitch);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>top<sp/>+=<sp/>kTextureHeight<sp/>*<sp/>2.f;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>host_.DrawSwizzledTexturedScreenQuad(left,<sp/>top,<sp/>left<sp/>+<sp/>kTextureWidth,<sp/>top<sp/>+<sp/>kTextureHeight,<sp/>0.f);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>pb_print(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>kTestVolumetric);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>pb_printat(3,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Reference&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>pb_draw_text_screen();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>host_.<ref refid="d6/d80/classTestHost_1a8e1914535ca75d5b94cfb3cf28f52b17" kindref="member">FinishDraw</ref>(allow_saving_,<sp/>output_dir_,<sp/>suite_name_,<sp/>kTestVolumetric);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenerateCubemap(uint8_t<sp/>*buffer)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint32_t<sp/>kSliceSize<sp/>=<sp/>kTextureHeight<sp/>*<sp/>kTexturePitch;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>very<sp/>distinct<sp/>faces<sp/>in<sp/>order<sp/>+X,<sp/>-X,<sp/>+Y,<sp/>-Y,<sp/>+Z,<sp/>-Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBTestPattern(buffer,<sp/>kTextureWidth,<sp/>kTextureHeight);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>kSliceSize;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBRadialGradient(buffer,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>0x00FFFF,<sp/>0xFF,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>kSliceSize;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBMaxContrastNoisePattern(buffer,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>0xFF00FF);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>kSliceSize;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBACheckerboard(buffer,<sp/>0,<sp/>0,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>kTexturePitch,<sp/>0xFFFFFF00,<sp/>0xFF00FFFF);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>kSliceSize;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBMaxContrastNoisePattern(buffer,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>0x0000FF);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>buffer<sp/>+=<sp/>kSliceSize;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>GenerateSwizzledRGBACheckerboard(buffer,<sp/>0,<sp/>0,<sp/>kTextureWidth,<sp/>kTextureHeight,<sp/>kTexturePitch,<sp/>0xFF777777,<sp/>0xFF000000);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tests/texture_3d_as_2d_tests.cpp"/>
  </compounddef>
</doxygen>
