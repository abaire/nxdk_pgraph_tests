{
  "test_suites": [
    {
      "class": "AlphaFuncTests",
      "description": [
        "Tests the behavior of NV097_SET_ALPHA_FUNC (0x0000033C)."
      ],
      "source_file": "src/tests/alpha_func_tests.h",
      "source_file_line": 12,
      "suite": "AlphaFuncTests",
      "test_descriptions": {
        "AlphaFuncAlways_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_ALWAYS with NV097_SET_ALPHA_TEST_ENABLE = false ",
        "AlphaFuncAlways_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_ALWAYS with NV097_SET_ALPHA_TEST_ENABLE = true",
        "AlphaFuncEqual_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_EQUAL with NV097_SET_ALPHA_TEST_ENABLE = false",
        "AlphaFuncEqual_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_EQUAL with NV097_SET_ALPHA_TEST_ENABLE = true",
        "AlphaFuncGreaterThanOrEqual_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_GEQUAL with NV097_SET_ALPHA_TEST_ENABLE = false",
        "AlphaFuncGreaterThanOrEqual_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_GEQUAL with NV097_SET_ALPHA_TEST_ENABLE = true",
        "AlphaFuncGreaterThan_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_GREATER with NV097_SET_ALPHA_TEST_ENABLE = false",
        "AlphaFuncGreaterThan_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_GREATER with NV097_SET_ALPHA_TEST_ENABLE = true",
        "AlphaFuncLessThanOrEqual_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_LEQUAL with NV097_SET_ALPHA_TEST_ENABLE = false",
        "AlphaFuncLessThanOrEqual_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_LEQUAL with NV097_SET_ALPHA_TEST_ENABLE = true",
        "AlphaFuncLessThan_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_LESS with NV097_SET_ALPHA_TEST_ENABLE = false",
        "AlphaFuncLessThan_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_LESS with NV097_SET_ALPHA_TEST_ENABLE = true",
        "AlphaFuncNever_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_NEVER with NV097_SET_ALPHA_TEST_ENABLE = false",
        "AlphaFuncNever_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_NEVER with NV097_SET_ALPHA_TEST_ENABLE = true",
        "AlphaFuncNotEqual_Disabled": "Tests NV097_SET_ALPHA_FUNC_V_NOTEQUAL with NV097_SET_ALPHA_TEST_ENABLE = false",
        "AlphaFuncNotEqual_Enabled": "Tests NV097_SET_ALPHA_FUNC_V_NOTEQUAL with NV097_SET_ALPHA_TEST_ENABLE = true"
      }
    },
    {
      "class": "AntialiasingTests",
      "description": [
        "Tests the effects of NV097_SET_SURFACE_FORMAT_ANTI_ALIASING in various scenarios.",
        "Many of these tests were created to demonstrate specific bugs in xemu and are not of practical value in typical hardware use cases."
      ],
      "source_file": "src/tests/antialiasing_tests.h",
      "source_file_line": 22,
      "suite": "AntialiasingTests",
      "test_descriptions": {
        "AAOnThenOffCPUWrite": "Configure the framebuffer surface with some antialiasing mode, clear, change the mode, modify the framebuffer by writing directly to VRAM, then render. Used to reproduce xemu-project/xemu#652.",
        "CPUWriteIgnoresSurfaceConfig": "This test verifies that direct writes to VRAM bypass any surface configuration. It sets up a texture surface with antialiasing enabled, then writes directly to texture memory and renders the texture to the screen. It is expected that antialiasing has no effect.",
        "CreateSurfaceWithCenter1": "Tests rendering with NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_CENTER_1",
        "CreateSurfaceWithCenterCorner2": "Tests rendering with NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_CENTER_CORNER_2",
        "CreateSurfaceWithSquareOffset4": "Tests rendering with NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_SQUARE_OFFSET_4",
        "FBSurfaceWithCenter1": "",
        "FBSurfaceWithCenterCorner2": "",
        "FramebufferNotModifiedBySurfaceState": "",
        "GPUAAWriteAfterCPUWrite": "",
        "NonAACPURoundTrip": "",
        "SurfaceStatesAreIndependent": ""
      }
    },
    {
      "class": "AttributeCarryoverTests",
      "description": [
        "Tests behavior when vertex attributes are not provided but are used by shaders.",
        "For various types of geometry, a fully specified primitive is rendered, followed by an identical (but position-transformed) primitive where only the vertex positions are provided and all other attributes bleed over from the fully specified primitive.\n\nEach test picks a separate vertex attribute (e.g., weight, normal, ...) and sets it to a test value. The shader code will convert the attribute under test into a color.\n\nAttributes with three parameters (iNormal) will have their alpha forced to 1.f.\n\nAttributes with one parameter (e.g., iWeight) will be repeated into the red and green channels with their blue and alpha forced to 1.f.",
        "For various types of geometry, a fully specified primitive is rendered, followed by an identical (but position-transformed) primitive where only the vertex positions are provided and all other attributes bleed over from the fully specified primitive.",
        "Each test picks a separate vertex attribute (e.g., weight, normal, ...) and sets it to a test value. The shader code will convert the attribute under test into a color.",
        "Attributes with three parameters (iNormal) will have their alpha forced to 1.f.",
        "Attributes with one parameter (e.g., iWeight) will be repeated into the red and green channels with their blue and alpha forced to 1.f."
      ],
      "source_file": "src/tests/attribute_carryover_tests.h",
      "source_file_line": 35,
      "suite": "AttributeCarryoverTests",
      "test_descriptions": {
        "L-bd0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from back diffuse using draw mode draw arrays.",
        "L-bd0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from back diffuse using draw mode inline elements.",
        "L-bd0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from back diffuse using draw mode inline arrays.",
        "L-bd0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from back diffuse using draw mode inline buffers.",
        "L-bs0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from back specular using draw mode draw arrays.",
        "L-bs0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from back specular using draw mode inline elements.",
        "L-bs0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from back specular using using draw mode inline arrays.",
        "L-bs0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from back specular using draw mode inline buffers.",
        "L-d0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from diffuse using draw mode draw arrays.",
        "L-d0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from diffuse using draw mode inline elements.",
        "L-d0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from diffuse using draw mode inline arrays.",
        "L-d0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from diffuse using draw mode inline buffers.",
        "L-fc0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from fog using draw mode draw arrays.",
        "L-fc0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from fog using draw mode inline elements.",
        "L-fc0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from fog using draw mode inline arrays.",
        "L-fc0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from fog using draw mode inline buffers.",
        "L-n0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from normal using draw mode draw arrays.",
        "L-n0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from normal using draw mode inline elements.",
        "L-n0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from normal using draw mode inline arrays.",
        "L-n0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from normal using draw mode inline buffers.",
        "L-ps0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from point size using draw mode draw arrays.",
        "L-ps0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from point size using draw mode inline elements.",
        "L-ps0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from point size using draw mode inline arrays.",
        "L-ps0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from point size using draw mode inline buffers.",
        "L-s0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from specular using draw mode draw arrays.",
        "L-s0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from specular using draw mode inline elements.",
        "L-s0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from specular using draw mode inline arrays.",
        "L-s0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from specular using draw mode inline buffers.",
        "L-t00.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex0 using draw mode draw arrays.",
        "L-t00.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex0 using draw mode inline elements.",
        "L-t00.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex0 using draw mode inline arrays.",
        "L-t00.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex0 using draw mode inline buffers.",
        "L-t10.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex1 using draw mode draw arrays.",
        "L-t10.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex1 using draw mode inline elements.",
        "L-t10.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex1 using draw mode inline arrays.",
        "L-t10.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex1 using draw mode inline buffers.",
        "L-t20.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex2 using draw mode draw arrays.",
        "L-t20.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex2 using draw mode inline elements.",
        "L-t20.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex2 using draw mode inline arrays.",
        "L-t20.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex2 using draw mode inline buffers.",
        "L-t30.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex3 using draw mode draw arrays.",
        "L-t30.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex3 using draw mode inline elements.",
        "L-t30.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex3 using draw mode inline arrays.",
        "L-t30.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from tex3 using draw mode inline buffers.",
        "L-w0.1_0.0_1.0_1.0-da": "Renders a fully specified line, then renders a test line that takes its diffuse color from weight using draw mode draw arrays.",
        "L-w0.2_0.0_0.6_1.0-ie": "Renders a fully specified line, then renders a test line that takes its diffuse color from weight using draw mode inline elements.",
        "L-w0.5_0.0_0.0_1.0-ia": "Renders a fully specified line, then renders a test line that takes its diffuse color from weight using draw mode inline arrays.",
        "L-w0.8_0.0_0.0_1.0-ib": "Renders a fully specified line, then renders a test line that takes its diffuse color from weight using draw mode inline buffers.",
        "T-bd0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back diffuse using draw mode draw arrays.",
        "T-bd0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back diffuse using draw mode inline elements.",
        "T-bd0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back diffuse using draw mode inline arrays.",
        "T-bd0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back diffuse using draw mode inline buffers.",
        "T-bs0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back specular using draw mode draw arrays.",
        "T-bs0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back specular using draw mode inline elements.",
        "T-bs0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back specular using using draw mode inline arrays.",
        "T-bs0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from back specular using draw mode inline buffers.",
        "T-d0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from diffuse using draw mode draw arrays.",
        "T-d0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from diffuse using draw mode inline elements.",
        "T-d0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from diffuse using draw mode inline arrays.",
        "T-d0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from diffuse using draw mode inline buffers.",
        "T-fc0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from fog using draw mode draw arrays.",
        "T-fc0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from fog using draw mode inline elements.",
        "T-fc0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from fog using draw mode inline arrays.",
        "T-fc0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from fog using draw mode inline buffers.",
        "T-n0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from normal using draw mode draw arrays.",
        "T-n0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from normal using draw mode inline elements.",
        "T-n0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from normal using draw mode inline arrays.",
        "T-n0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from normal using draw mode inline buffers.",
        "T-ps0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from point size using draw mode draw arrays.",
        "T-ps0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from point size using draw mode inline elements.",
        "T-ps0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from point size using draw mode inline arrays.",
        "T-ps0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from point size using draw mode inline buffers.",
        "T-s0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from specular using draw mode draw arrays.",
        "T-s0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from specular using draw mode inline elements.",
        "T-s0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from specular using draw mode inline arrays.",
        "T-s0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from specular using draw mode inline buffers.",
        "T-t00.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex0 using draw mode draw arrays.",
        "T-t00.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex0 using draw mode inline elements.",
        "T-t00.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex0 using draw mode inline arrays.",
        "T-t00.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex0 using draw mode inline buffers.",
        "T-t10.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex1 using draw mode draw arrays.",
        "T-t10.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex1 using draw mode inline elements.",
        "T-t10.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex1 using draw mode inline arrays.",
        "T-t10.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex1 using draw mode inline buffers.",
        "T-t20.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex2 using draw mode draw arrays.",
        "T-t20.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex2 using draw mode inline elements.",
        "T-t20.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex2 using draw mode inline arrays.",
        "T-t20.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex2 using draw mode inline buffers.",
        "T-t30.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex3 using draw mode draw arrays.",
        "T-t30.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex3 using draw mode inline elements.",
        "T-t30.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex3 using draw mode inline arrays.",
        "T-t30.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from tex3 using draw mode inline buffers.",
        "T-w0.1_0.0_1.0_1.0-da": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from weight using draw mode draw arrays.",
        "T-w0.2_0.0_0.6_1.0-ie": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from weight using draw mode inline elements.",
        "T-w0.5_0.0_0.0_1.0-ia": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from weight using draw mode inline arrays.",
        "T-w0.8_0.0_0.0_1.0-ib": "Renders a fully specified tri, then renders a test tri that takes its diffuse color from weight using draw mode inline buffers. "
      }
    },
    {
      "class": "AttributeExplicitSetterTests",
      "description": [],
      "source_file": "src/tests/attribute_explicit_setter_tests.h",
      "source_file_line": 11,
      "suite": "AttributeExplicitSetterTests",
      "test_descriptions": {}
    },
    {
      "class": "AttributeFloatTests",
      "description": [
        "Tests behavior of various float inputs to vertex shaders including NaN, INF, etc.",
        "The test renders a number of quads. The leftmost quad passes through the raw value as",
        "diffuse.rgb",
        " and subsequent columns multiply each component by the value listed in the column header.",
        "The values vary from the top to the bottom of the quad with the top and bottom values displayed above the \"Multiplier\" header."
      ],
      "source_file": "src/tests/attribute_float_tests.h",
      "source_file_line": 18,
      "suite": "AttributeFloatTests",
      "test_descriptions": {
        "-1_1": "Ranges values from -1 to 1.",
        "-8_1": "Ranges values from -8 to 1.",
        "-INF_INF": "Ranges values from -infinity to infinity.",
        "-MaxSN_MaxSN": "Ranges values from -Max (subnormal) to +Max (subnormal).",
        "-Max_Max": "Ranges values from -Max (normal) to +Max (normal).",
        "-MinN_MinN": "Ranges values from -Min (normal) to +Min (normal).",
        "-Min_Min": "Ranges values from -Min (subnormal) to +Min (subnormal).",
        "-NaNq_NaNq": "Ranges values from -NaN to +NaN (quiet).",
        "-NaNs_NaNs": "Ranges values from -NaN to +NaN (signaling).",
        "0_1": "Ranges values from 0 to 1.",
        "0_8": "Ranges values from 0 to 8.",
        "colors": "Tests behavior of the color channels when given -NaN and NaN. "
      }
    },
    {
      "class": "BlendSurfaceTests",
      "description": [],
      "source_file": "src/tests/blend_surface_tests.h",
      "source_file_line": 8,
      "suite": "BlendSurfaceTests",
      "test_descriptions": {
        "1-DstAlpha_ARGB8": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "1-DstAlpha_R5G6B5": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "1-DstAlpha_XA_O1A7RGB8": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "1-DstAlpha_XA_Z1A7RGB8": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "1-DstAlpha_X_O1RGB5": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "1-DstAlpha_X_ORGB8": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "1-DstAlpha_X_Z1RGB5": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "1-DstAlpha_X_ZRGB8": "Demonstrates behavior of blend func ADD (1 - DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "ARGB8_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "ARGB8_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "DstAlpha_ARGB8": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "DstAlpha_R5G6B5": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "DstAlpha_XA_O1A7RGB8": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "DstAlpha_XA_Z1A7RGB8": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "DstAlpha_X_O1RGB5": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "DstAlpha_X_ORGB8": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "DstAlpha_X_Z1RGB5": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "DstAlpha_X_ZRGB8": "Demonstrates behavior of blend func ADD (DstAlpha) (Zero) with surface mode NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8. The background is initialized to various colors (see labels) via a DIFFUSE quad render. A white quad is then blended on top and the final composition rendered to the backbuffer with alpha forced to 1.0 to display the effect on the color channels.",
        "R5G6B5_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "R5G6B5_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "XA_O1A7RGB8_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "XA_O1A7RGB8_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "XA_Z1A7RGB8_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "XA_Z1A7RGB8_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right. ",
        "X_O1RGB5_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "X_O1RGB5_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "X_ORGB8_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "X_ORGB8_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "X_Z1RGB5_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "X_Z1RGB5_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "X_ZRGB8_Add_SrcA_1-SrcA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8 and blend factors {SrcAlpha, 1 - SrcAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right.",
        "X_ZRGB8_Add_SrcA_DstA": "Demonstrates the behavior of blending various texture formats with the surface mode set to NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8 and blend factors {SrcAlpha, DstAlpha}. A test pattern is rendered multiple times, partially overlapping itself. A low opacity grey quad is rendered in the upper left, then composited against itself multiple times in the upper right. A zero alpha (or zero high nibble for non-alpha formats) quad is rendered in the lower left and composited against itself in the lower right."
      }
    },
    {
      "class": "BlendTests",
      "description": [
        "Tests the effects of NV097_SET_BLEND_EQUATION, NV097_SET_BLEND_FUNC_SFACTOR, and NV097_SET_BLEND_FUNC_DFACTOR on rendering unsigned textures.",
        "All test names are of the form <sfactor>-<equation>-<dfactor> where:",
        "sfactor/dfactor are one of: 0 - ZERO, 1 - ONE, srcRGB - SRC_COLOR, 1-srcRGB - ONE_MINUS_SRC_COLOR, srcA - SRC_ALPHA, 1-srcA - ONE_MINUS_SRC_ALPHA, dstA - DST_ALPHA, 1-dstA - ONE_MINUS_DST_ALPHA, dstRGB - DST_COLOR, 1-dstRGB - ONE_MINUS_DST_COLOR, srcAsat - SRC_ALPHA_SATURATE, cRGB - CONSTANT_COLOR, 1-cRGB - ONE_MINUS_CONSTANT_COLOR, cA - CONSTANT_ALPHA, 1-cA - ONE_MINUS_CONSTANT_ALPHA",
        "equation is one of: ADD - NV097_SET_BLEND_EQUATION_V_FUNC_ADD, SUB - NV097_SET_BLEND_EQUATION_V_FUNC_SUBTRACT, REVSUB - NV097_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT, MIN - NV097_SET_BLEND_EQUATION_V_MIN, MAX - NV097_SET_BLEND_EQUATION_V_MAX, SADD - NV097_SET_BLEND_EQUATION_V_FUNC_ADD_SIGNED, SREVSUB - NV097_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT_SIGNED,",
        "The left, center, and right renders are all composited against a 16 pixel checkerboard pattern alternating between a background color and fully opaque black.",
        "On the left side of the screen, a column of squares is rendered with colors blended with the checkerboard and alpha always set to 0xDD.",
        "In the center of the screen, a stack of concentric squares is rendered with colors that are not blended and alpha values blended with the checkerboard (the first 16x16 will be blended with the BG color, the next with full opaque black, etc...). Each square is composited with the previous square from outside to inside, so the outermost is only blended with the checkerboard, the next is blended with both the checkerboard and the result of the outermost blend, etc...",
        "On the right side of the screen, a column of squares is rendered with both color and alpha values blended."
      ],
      "source_file": "src/tests/blend_tests.h",
      "source_file_line": 57,
      "suite": "BlendTests",
      "test_descriptions": {}
    },
    {
      "class": "ClearTests",
      "description": [
        "Tests the behavior of various write masks on NV097_CLEAR_SURFACE.",
        "Color mask (C*) tests: Each test draws some geometry, then modifies the NV097_SET_COLOR_MASK, NV097_SET_DEPTH_MASK, and NV097_SET_STENCIL_MASK settings, then invokes NV097_CLEAR_SURFACE.",
        "In all cases, the clear color is set to 0x7F7F7F7F and the depth value is set to 0xFFFFFFFF.",
        "Surface format color (SFC*) tests: Each test clears a render target surface and then renders it as a texture with alpha blending disabled in order to test the interaction of surface format with NV097_CLEAR_SURFACE_COLOR."
      ],
      "source_file": "src/tests/clear_tests.h",
      "source_file_line": 23,
      "suite": "ClearTests",
      "test_descriptions": {
        "C00000000_Depth_n": "Framebuffer result after disabling writing to all color channels and to the depth/stencil buffer.",
        "C00000000_Depth_n_ZB": "Z-buffer result after disabling writing to all color channels and to the depth/stencil buffer.",
        "C00000000_Depth_y": "Framebuffer result after disabling writing to all color channels and enabling writes to the depth/stencil buffer.",
        "C00000000_Depth_y_ZB": "Z-buffer result after disabling writing to all color channels and enabling writes to the depth/stencil buffer.",
        "C00000001_Depth_n": "Framebuffer result after disabling writing to all color channels except blue and to the depth/stencil buffer.",
        "C00000001_Depth_n_ZB": "Z-buffer result after disabling writing to all color channels except blue and to the depth/stencil buffer.",
        "C00000001_Depth_y": "Framebuffer result after disabling writing to all color channels except blue enabling writes to the depth/stencil buffer.",
        "C00000001_Depth_y_ZB": "Z-buffer result after disabling writing to all color channels except blue enabling writes to the depth/stencil buffer.",
        "C00000100_Depth_n": "Framebuffer result after disabling writing to all color channels except green and to the depth/stencil buffer.",
        "C00000100_Depth_n_ZB": "Z-buffer result after disabling writing to all color channels except green and to the depth/stencil buffer.",
        "C00000100_Depth_y": "Framebuffer result after disabling writing to all color channels except green and enabling writes to the depth/stencil buffer.",
        "C00000100_Depth_y_ZB": "Z-buffer result after disabling writing to all color channels except green and enabling writes to the depth/stencil buffer.",
        "C00010000_Depth_n": "Framebuffer result after disabling writing to all color channels except red and to the depth/stencil buffer.",
        "C00010000_Depth_n_ZB": "Z-buffer result after disabling writing to all color channels except red and to the depth/stencil buffer.",
        "C00010000_Depth_y": "Framebuffer result after disabling writing to all color channels except red and enabling writes to the depth/stencil buffer.",
        "C00010000_Depth_y_ZB": "Z-buffer result after disabling writing to all color channels except red and enabling writes to the depth/stencil buffer.",
        "C01000000_Depth_n": "Framebuffer result after disabling writing to all color channels except alpha and to the depth/stencil buffer.",
        "C01000000_Depth_n_ZB": "Z-buffer result after disabling writing to all color channels except alpha and to the depth/stencil buffer.",
        "C01000000_Depth_y": "Framebuffer result after disabling writing to all color channels except alpha and enabling writes to the depth/stencil buffer.",
        "C01000000_Depth_y_ZB": "Z-buffer result after disabling writing to all color channels except alpha and enabling writes to the depth/stencil buffer.",
        "C01010101_Depth_n": "Framebuffer result after enabling writing to all color channels but disabling writes to the depth/stencil buffer.",
        "C01010101_Depth_n_ZB": "Z-buffer result after enabling writing to all color channels but disabling writes to the depth/stencil buffer.",
        "C01010101_Depth_y": "Framebuffer result after enabling writing to all color channels and the depth/stencil buffer.",
        "C01010101_Depth_y_ZB": "Z-buffer result after enabling writing to all color channels and the depth/stencil buffer.",
        "SCF_R5G6B5": "Tests the effect of clear color on LE_R5G6B5 surface format. (Note that the surface is rendered as an ARGB8 texture)",
        "SCF_X1A7R8G8B8_O1A7R8G8B8": "Tests the effect of clear color on LE_X1A7R8G8B8_O1A7R8G8B8 surface format. The cleared surface will have its most significant bit set to 1. ",
        "SCF_X1A7R8G8B8_Z1A7R8G8B8": "Tests the effect of clear color on LE_X1A7R8G8B8_Z1A7R8G8B8 surface format. The cleared surface will have its most significant bit set to 0.",
        "SCF_X8R8G8B8_O8R8G8B8": "Tests the effect of clear color on LE_X8R8G8B8_O8R8G8B8 surface format. The cleared surface will have its most significant byte set to 1.",
        "SCF_X8R8G8B8_Z8R8G8B8": "Tests the effect of clear color on LE_X8R8G8B8_Z8R8G8B8 surface format. The cleared surface will have its most significant byte set to 0.",
        "SFC_A8R8G8B8": "Tests the effect of clear color on LE_A8R8G8B8 surface format.",
        "SFC_X1R5G5B5_O1R5G5B5": "Tests the effect of clear color on LE_X1R5G5B5_O1R5G5B5 surface format. The cleared surface will have its most significant bit set to 1. (Note that the surface is rendered as an ARGB8 texture)",
        "SFC_X1R5G5B5_Z1R5G5B5": "Tests the effect of clear color on LE_X1R5G5B5_Z1R5G5B5 surface format. The cleared surface will have its most significant bit set to 0. (Note that the surface is rendered as an ARGB8 texture)"
      }
    },
    {
      "class": "ColorKeyTests",
      "description": [
        "Tests NV097_SET_COLOR_KEY_COLOR (0x0AE0) and the NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_MODE color key functions.",
        "NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_MODE is used to instruct the hardware what to do when a texel's value matches a color key. See ColorKeyMode for the supported modes.",
        "NV097_SET_COLOR_KEY_COLOR is used to instruct the hardware which texels should have the color key mode applied.",
        "Each test renders a series of quads, with each quad being divided into four subcomponents (NW = northwest/top left, etc...):",
        "NW: Checkerboard alternating a color-keyed color and a light grey. NE: Checkerboard alternating a dark grey and an alpha-keyed color. SW: Checkerboard alternating the color-keyed color with alpha from the alpha key and the color keyed color with 0xFF alpha that matches none of the keys. SE: Checkerboard alternating a non-keyed color with alpha from the color key and a non-keyed color with alpha from the alpha key."
      ],
      "source_file": "src/tests/color_key_tests.h",
      "source_file_line": 33,
      "suite": "ColorKeyTests",
      "test_descriptions": {
        "FixedTex_Alpha": "With the fixed function pipeline, zero out just the alpha channel for all places where the colorkey matches the value of a texel. RGB channels are unaffected. This should omit all texels that match the color key.",
        "FixedTex_AlphaColor": "With the fixed function pipeline, kill the texel completely for wherever the color key matches the value of a texel. This completely masks the texel rather than simply zero-ing out values. See IgnAlphaCh_FixedTex_AlphaColor. This should omit all texels that match the color key.",
        "FixedTex_Color": "With the fixed function pipeline, zero out the color and alpha channels for all places where the color key matches the value of a texel. Note that the Alpha channel is also set to zero. This should omit all texels that match the color key.",
        "FixedTex_Disabled": "With the fixed function pipeline, make no changes to any texel whose value matches the color key. This should render all texels as fully opaque with their original colors.",
        "IgnAlphaCh_FixedTex_Alpha": "With the fixed function pipeline, set the color key mode to clear just the alpha channel for matching texels. When rendering, set the final combiner to use an alpha value of 0xFF for all texels, forcing pixels to be rendered opaque despite matching the color key. This should render all texels fully opaque with their original colors, since the texel alpha is ignored during texturing.",
        "IgnAlphaCh_FixedTex_AlphaColor": "With the fixed function pipeline, kill the texel completely for wherever the color key matches the value of a texel. This completely masks the texel rather than simply zero-ing out values. When rendering, set the final combiner to use an alpha value of 0xFF for all texels. This omits killed texels even though the combiner sets them to fully opaque during texturing.",
        "IgnAlphaCh_FixedTex_Color": "With the fixed function pipeline, zero out the color and alpha channels for all places where the color key matches the value of a texel. When rendering, set the final combiner to use an alpha value of 0xFF for all texels, forcing pixels to be rendered opaque despite matching the color key. This should render matching texels as fully black, since their RGB values were zeroed out and the zeroed alpha channel is ignored.",
        "IgnAlphaCh_FixedTex_Disabled": "With the fixed function pipeline, make no changes to any texel whose value matches the color key. When rendering, set the final combiner to use an alpha value of 0xFF for all texels. This should render all texels as fully opaque with their original colors.",
        "IgnAlphaCh_ProgTex_Alpha": "With a programmable shader, set the color key mode to clear just the alpha channel for matching texels. When rendering, set the final combiner to use an alpha value of 0xFF for all texels, forcing pixels to be rendered opaque despite matching the color key. This should render all texels fully opaque with their original colors, since the texel alpha is ignored during texturing.",
        "IgnAlphaCh_ProgTex_AlphaColor": "With a programmable shader, kill the texel completely for wherever the color key matches the value of a texel. This completely masks the texel rather than simply zero-ing out values. When rendering, set the final combiner to use an alpha value of 0xFF for all texels. This omits killed texels even though the combiner sets them to fully opaque during texturing.",
        "IgnAlphaCh_ProgTex_Color": "With a programmable shader, zero out the color and alpha channels for all places where the color key matches the value of a texel. When rendering, set the final combiner to use an alpha value of 0xFF for all texels, forcing pixels to be rendered opaque despite matching the color key. This should render matching texels as fully black, since their RGB values were zeroed out and the zeroed alpha channel is ignored.",
        "IgnAlphaCh_ProgTex_Disabled": "With a programmable shader, make no changes to any texel whose value matches the color key. When rendering, set the final combiner to use an alpha value of 0xFF for all texels. This should render all texels as fully opaque with their original colors.",
        "ProgTex_Alpha": "With a programmable shader, zero out just the alpha channel for all places where the colorkey matches the value of a texel. RGB channels are unaffected. This should omit all texels that match the color key.",
        "ProgTex_AlphaColor": "With a programmable shader, kill the texel completely for wherever the color key matches the value of a texel. This completely masks the texel rather than simply zero-ing out values. See IgnAlphaCh_FixedTex_AlphaColor. This should omit all texels that match the color key.",
        "ProgTex_Color": "With a programmable shader, zero out the color and alpha channels for all places where the color key matches the value of a texel. Note that the Alpha channel is also set to zero. This should omit all texels that match the color key.",
        "ProgTex_Disabled": "With a programmable shader, make no changes to any texel whose value matches the color key. This should render all texels as fully opaque with their original colors.",
        "UnsampledTex": "Demonstrates that the color keys are independent of whether the associated texture stage is used in the final composition or not. With a programable shader, draw two quads with the color key mode set to kill matching texels. In both cases, the final color combiner only samples from texture 0. The left quad renders with the blue color key as key 0. The right quad enables the second texture stage, keeps key 0, and adds the magenta color key with an alpha value forced to 0xFF as key 1. The left image should have the blue color in the NW checkerboard killed. The right image should have the blue color in the NW checkerboard killed, but also the secondary blue color in the SW checkerboard killed. This is because the unsampled magenta texture's SW secondary color matches the magenta + 0xFF alpha enabled as a color key in the second operation.",
        "XAlphaFormat": "Demonstrates that the alpha component of textures using an \"X\" alpha mode (e.g., NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_X8R8G8B8) are matched against color keys without respect to their alpha value. "
      }
    },
    {
      "class": "ColorMaskBlendTests",
      "description": [],
      "source_file": "src/tests/color_mask_blend_tests.h",
      "source_file_line": 8,
      "suite": "ColorMaskBlendTests",
      "test_descriptions": {}
    },
    {
      "class": "ColorZetaDisableTests",
      "description": [],
      "source_file": "src/tests/color_zeta_disable_tests.h",
      "source_file_line": 10,
      "suite": "ColorZetaDisableTests",
      "test_descriptions": {}
    },
    {
      "class": "ColorZetaOverlapTests",
      "description": [
        "Tests behavior when the color buffer and z/stencil buffers overlap in RAM.",
        "WARNING: These tests are non-deterministic on Xbox hardware. The primary intent of these tests is to verify that emulators do not crash."
      ],
      "source_file": "src/tests/color_zeta_overlap_tests.h",
      "source_file_line": 16,
      "suite": "ColorZetaOverlapTests",
      "test_descriptions": {}
    },
    {
      "class": "CombinerTests",
      "description": [
        "Tests behavior of NV097_SET_COMBINER_* and NV097_SET_SPECULAR_* final combiner operations."
      ],
      "source_file": "src/tests/combiner_tests.h",
      "source_file_line": 17,
      "suite": "CombinerTests",
      "test_descriptions": {
        "AlphaFromBlue": "Demonstrates behavior of the \"blue to alpha\" flags.",
        "ColorAlphaIndependence": "Demonstrates that setting color on a combiner register does not affect alpha.",
        "CombinerOps": "Tests the various output operations.",
        "Flags": "Tests behavior of specular_add_invert_r0, specular_add_invert_v1, and specular_clamp on final combiners.",
        "Independence": "Demonstrates that setting a register's value in a combiner stage does not mutate the value until after it is assigned as an output. The test performs several draws where R0 is initialized to some color then both mutated and copied into R1, demonstrating that the original value of R0 is copied into R1 before being replaced with the new value.",
        "Mux": "Tests behavior of the \"MUX\" combiner mode, in which R0.a is used to select between the AB and CD outputs.",
        "SpecialInputs": "Tests the special input registers in the final combiner. ",
        "UnboundTex": "Demonstrates that the alpha channel for unbound textures is set to 1.0."
      }
    },
    {
      "class": "ContextSwitchTests",
      "description": [
        "Tests behavior when modifying the NV097_PGRAPH_CTX_SWITCHx registers."
      ],
      "source_file": "src/tests/context_switch_tests.h",
      "source_file_line": 12,
      "suite": "ContextSwitchTests",
      "test_descriptions": {
        "GraphicsClassZero": "Tests PGRAPH_CTX_SWITCH1 with the graphics class set to 0. "
      }
    },
    {
      "class": "DegenerateBeginEndTests",
      "description": [
        "Tests atypical situations involving NV097_SET_BEGIN_END."
      ],
      "source_file": "src/tests/degenerate_begin_end_tests.h",
      "source_file_line": 13,
      "suite": "DegenerateBeginEndTests",
      "test_descriptions": {
        "BeginWithoutEnd": "Renders a series of 3 triangles and one quad. The middle two triangles send NV097_SET_BEGIN_END with a triangle primitive, but do not send NV097_SET_BEGIN_END with NV097_SET_BEGIN_END_OP_END when completed. The final quad is treated as a triangle by the nv2a as the previous triangle primitive was never ended. "
      }
    },
    {
      "class": "DepthFormatFixedFunctionTests",
      "description": [],
      "source_file": "src/tests/depth_format_fixed_function_tests.h",
      "source_file_line": 12,
      "suite": "DepthFormatFixedFunctionTests",
      "test_descriptions": {}
    },
    {
      "class": "DepthFormatTests",
      "description": [],
      "source_file": "src/tests/depth_format_tests.h",
      "source_file_line": 12,
      "suite": "DepthFormatTests",
      "test_descriptions": {}
    },
    {
      "class": "DepthFunctionTests",
      "description": [],
      "source_file": "src/tests/depth_function_tests.h",
      "source_file_line": 12,
      "suite": "DepthFunctionTests",
      "test_descriptions": {
        "DepthFunc": "Demonstrates the behavior of the various depth test functions, including undefined values (which are ignored entirely). "
      }
    },
    {
      "class": "DMACorruptionAroundSurfaceTests",
      "description": [],
      "source_file": "src/tests/dma_corruption_around_surface_tests.h",
      "source_file_line": 10,
      "suite": "DMACorruptionAroundSurfaceTests",
      "test_descriptions": {}
    },
    {
      "class": "EdgeFlagTests",
      "description": [],
      "source_file": "src/tests/edge_flag_tests.h",
      "source_file_line": 11,
      "suite": "EdgeFlagTests",
      "test_descriptions": {}
    },
    {
      "class": "FogCarryoverTests",
      "description": [
        "Tests the behavior when fog is enabled but the fog coordinate is not specified by the shader.",
        "This test reproduces behavior observed in \"Blade 2\"",
        "https://github.com/xemu-project/xemu/issues/1852",
        ""
      ],
      "source_file": "src/tests/fog_carryover_tests.h",
      "source_file_line": 17,
      "suite": "FogCarryoverTests",
      "test_descriptions": {
        "CarryoverLineLoop": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverLineStrip": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverLines": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverPoints": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverPoly": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP. ",
        "CarryoverQuadStrip": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverQuads": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverTriFan": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverTriStrip": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "CarryoverTris": "Renders a series of primitives using various draw modes on the left, setting fog coordinates. Then renders a quad using the same draw mode on the right without specifying a fog coordinate at all. The fog mode is set to EXP.",
        "FogCarryover": "The left column triangles are rendered with the fog coordinate explicitly passed through from the vertex by the shader. The right column triangles do not specify the fog coordinate at all."
      }
    },
    {
      "class": "FogExceptionalValueTests",
      "description": [
        "Tests the effects of exceptional values (e.g., inf, nan) on the vertex fog coordinate. Fog is set to bright red.",
        "Each test renders a series of blueish quads with their fog coordinate set to interesting test values to observe the resulting behavior."
      ],
      "source_file": "src/tests/fog_exceptional_value_tests.h",
      "source_file_line": 18,
      "suite": "FogExceptionalValueTests",
      "test_descriptions": {
        "FogExc-exp-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR.",
        "FogExc-exp-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X.",
        "FogExc-exp-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR.",
        "FogExc-exp-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL.",
        "FogExc-exp-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA.",
        "FogExc-exp2-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR.",
        "FogExc-exp2-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X.",
        "FogExc-exp2-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR.",
        "FogExc-exp2-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL.",
        "FogExc-exp2-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA.",
        "FogExc-exp2_abs-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR.",
        "FogExc-exp2_abs-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X.",
        "FogExc-exp2_abs-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR.",
        "FogExc-exp2_abs-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL.",
        "FogExc-exp2_abs-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA.",
        "FogExc-exp_abs-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR.",
        "FogExc-exp_abs-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X.",
        "FogExc-exp_abs-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR.",
        "FogExc-exp_abs-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL.",
        "FogExc-exp_abs-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA.",
        "FogExc-linear-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR.",
        "FogExc-linear-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X.",
        "FogExc-linear-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR.",
        "FogExc-linear-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL.",
        "FogExc-linear-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA.",
        "FogExc-linear_abs-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR.",
        "FogExc-linear_abs-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X.",
        "FogExc-linear_abs-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR.",
        "FogExc-linear_abs-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL.",
        "FogExc-linear_abs-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA.",
        "Inf-FogExc-exp-abs_planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp-fog_x": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp-planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp-radial": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp-spec_alpha": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2-abs_planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2-fog_x": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2-planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2-radial": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2-spec_alpha": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2_abs-abs_planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2_abs-fog_x": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2_abs-planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2_abs-radial": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp2_abs-spec_alpha": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp_abs-abs_planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp_abs-fog_x": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp_abs-planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp_abs-radial": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-exp_abs-spec_alpha": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear-abs_planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear-fog_x": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear-planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear-radial": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear-spec_alpha": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear_abs-abs_planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear_abs-fog_x": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear_abs-planar": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear_abs-radial": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "Inf-FogExc-linear_abs-spec_alpha": "Tests infinite fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp-abs_planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp-fog_x": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp-planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp-radial": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp-spec_alpha": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2-abs_planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2-fog_x": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2-planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2-radial": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2-spec_alpha": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2_abs-abs_planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2_abs-fog_x": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2_abs-planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2_abs-radial": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp2_abs-spec_alpha": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp_abs-abs_planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp_abs-fog_x": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp_abs-planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp_abs-radial": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-exp_abs-spec_alpha": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear-abs_planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear-fog_x": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear-planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear-radial": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear-spec_alpha": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear_abs-abs_planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear_abs-fog_x": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear_abs-planar": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear_abs-radial": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The bias param is listed on the right edge of the screen and the multiplier above each quad.",
        "NaN-FogExc-linear_abs-spec_alpha": "Tests NaN fog value with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The bias param is listed on the right edge of the screen and the multiplier above each quad. ",
        "RCP-FogExc-exp-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2 and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2_abs-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2_abs-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2_abs-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2_abs-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp2_abs-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP2_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp_abs-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp_abs-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp_abs-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp_abs-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-exp_abs-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_EXP_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear_abs-abs_planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear_abs-fog_x": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_FOG_X. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear_abs-planar": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_PLANAR. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear_abs-radial": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_RADIAL. The vertex shader uses RCP to determine the fog value.",
        "RCP-FogExc-linear_abs-spec_alpha": "Tests various fog values with fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS and fog generation mode NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA. The vertex shader uses RCP to determine the fog value."
      }
    },
    {
      "class": "FogGenTests",
      "description": [
        "Tests the effects of NV097_SET_FOG_GEN_MODE.",
        "Each test renders a series of blueish quads placed progressively further from the eye position. Each quad's left side is 1.0f closer to the eye than its right.",
        "Each quad's specular alpha components are hardcoded to 0.0, 1.0, 0.75, 0.25 as viewed clockwise from the upper left.",
        "The fog coordinate starts at 50.0 and is decremented by 0.2 for each quad rendered from upper left to lower right."
      ],
      "source_file": "src/tests/fog_gen_tests.h",
      "source_file_line": 22,
      "suite": "FogGenTests",
      "test_descriptions": {}
    },
    {
      "class": "FogParamTests",
      "description": [
        "Tests the effects of NV097_SET_FOG_PARAMS.",
        "Note that the 3rd parameter to SET_FOG_PARAMS always appears to be set to 0.0 in practice and alternative values do not appear to have any effect. Non-zero values are omitted from these tests for brevity."
      ],
      "source_file": "src/tests/fog_param_tests.h",
      "source_file_line": 17,
      "suite": "FogParamTests",
      "test_descriptions": {
        "FogParam-0.25-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to -0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.25-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to -0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.25-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to -0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.25-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to -0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.25-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to -0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.25-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to -0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.50-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to -0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.50-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to -0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.50-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to -0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.50-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to -0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.50-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to -0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-0.50-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to -0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-1.00-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to -1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-1.00-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to -1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-1.00-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to -1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-1.00-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to -1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-1.00-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to -1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-1.00-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to -1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-2.00-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to -2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-2.00-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to -2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-2.00-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to -2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-2.00-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to -2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-2.00-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to -2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam-2.00-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to -2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.25-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to 0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.25-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to 0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.25-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to 0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.25-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to 0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.25-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to 0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.25-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to 0.25. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.50-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to 0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.50-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to 0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.50-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to XXXX. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.50-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to 0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.50-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to 0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam0.50-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to 0.50. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam1.00-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to 1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam1.00-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to 1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam1.00-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to 1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam1.00-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to 1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam1.00-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to 1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam1.00-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to 1.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam2.00-exp": "Tests fog mode NV097_SET_FOG_MODE_V_EXP with the bias param set to the zero point for the type and the multiplier set to 2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam2.00-exp2": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2 with the bias param set to the zero point for the type and the multiplier set to 2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam2.00-exp2_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP2_ABS with the bias param set to the zero point for the type and the multiplier set to 2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam2.00-exp_abs": "Tests fog mode NV097_SET_FOG_MODE_V_EXP_ABS with the bias param set to the zero point for the type and the multiplier set to 2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogParam2.00-lin": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR with the bias param set to the zero point for the type and the multiplier set to 2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad. ",
        "FogParam2.00-lin_abs": "Tests fog mode NV097_SET_FOG_MODE_V_LINEAR_ABS with the bias param set to the zero point for the type and the multiplier set to 2.0. Quads are rendered with fog coordinates starting at -1.4 and increasing by 0.01 per quad.",
        "FogZeroBias-exp": "Tests the bias parameter for NV097_SET_FOG_MODE_V_EXP. Renders a series of quads and increments the bias fog param by 0.005 for each, starting at 1.0. The multiplier params are set to 0 so the fog coord (1.0) is irrelevant.",
        "FogZeroBias-exp2": "Tests the bias parameter for NV097_SET_FOG_MODE_V_EXP2. Renders a series of quads and increments the bias fog param by 0.005 for each, starting at 1.0. The multiplier params are set to 0 so the fog coord (1.0) is irrelevant.",
        "FogZeroBias-exp2_abs": "Tests the bias parameter for NV097_SET_FOG_MODE_V_EXP2_ABS. Renders a series of quads and increments the bias fog param by 0.005 for each, starting at 1.0. The multiplier params are set to 0 so the fog coord (1.0) is irrelevant.",
        "FogZeroBias-exp_abs": "Tests the bias parameter for NV097_SET_FOG_MODE_V_EXP_ABS. Renders a series of quads and increments the bias fog param by 0.005 for each, starting at 1.0. The multiplier params are set to 0 so the fog coord (1.0) is irrelevant.",
        "FogZeroBias-lin": "Tests the bias parameter for NV097_SET_FOG_MODE_V_LINEAR. Renders a series of quads and increments the bias fog param by 0.005 for each, starting at 1.0. The multiplier params are set to 0 so the fog coord (1.0) is irrelevant.",
        "FogZeroBias-lin_abs": "Tests the bias parameter for NV097_SET_FOG_MODE_V_LINEAR_ABS. Renders a series of quads and increments the bias fog param by 0.005 for each, starting at 1.0. The multiplier params are set to 0 so the fog coord (1.0) is irrelevant."
      }
    },
    {
      "class": "FogTests",
      "description": [],
      "source_file": "src/tests/fog_tests.h",
      "source_file_line": 19,
      "suite": "FogTests",
      "test_descriptions": {}
    },
    {
      "class": "FrontFaceTests",
      "description": [
        "Tests handling of NV097_SET_FRONT_FACE and NV097_SET_CULL_FACE, including degenerate winding values."
      ],
      "source_file": "src/tests/front_face_tests.h",
      "source_file_line": 12,
      "suite": "FrontFaceTests",
      "test_descriptions": {
        "FrontFace_0_CF_B": "Sets the winding to 0 with back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Only the right quad should be rendered.",
        "FrontFace_0_CF_F": "Sets the winding to 0 with front faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Only the left quad should be rendered.",
        "FrontFace_0_CF_FaB": "Sets the winding to 0 with front and back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Neither quad should be rendered.",
        "FrontFace_63_CF_B": "Sets the winding to 0x63 with back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Only the right quad should be rendered.",
        "FrontFace_63_CF_F": "Sets the winding to 0x63 with front faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Only the left quad should be rendered.",
        "FrontFace_63_CF_FaB": "Sets the winding to 0x63 with front and back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Neither quad should be rendered.",
        "FrontFace_CCW_CF_B": "Sets the winding to counter-clockwise with back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Only the left quad should be rendered.",
        "FrontFace_CCW_CF_F": "Sets the winding to counter-clockwise with front faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Only the right quad should be rendered.",
        "FrontFace_CCW_CF_FaB": "Sets the winding to counter-clockwise with front and back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CW. Neither quad should be rendered.",
        "FrontFace_CW_CF_B": "Sets the winding to clockwise with back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CCW. Only the right quad should be rendered.",
        "FrontFace_CW_CF_F": "Sets the winding to clockwise with front faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CCW. Only the left quad should be rendered.",
        "FrontFace_CW_CF_FaB": "Sets the winding to clockwise with front and back faces culled. Prior to starting the test, NV097_SET_FRONT_FACE is set to CCW. Neither quad should be rendered. "
      }
    },
    {
      "class": "HighVertexCountTests",
      "description": [
        "Tests behavior when massive numbers of vertices are specified without an END call."
      ],
      "source_file": "src/tests/high_vertex_count_tests.h",
      "source_file_line": 20,
      "suite": "HighVertexCountTests",
      "test_descriptions": {}
    },
    {
      "class": "ImageBlitTests",
      "description": [
        "Tests behavior of the 2D blitting commands.",
        "NV09F, NV012, NV019, NV072"
      ],
      "source_file": "src/tests/image_blit_tests.h",
      "source_file_line": 15,
      "suite": "ImageBlitTests",
      "test_descriptions": {
        "BlitRenderBlit": "Blits an image into a render surface, then performs a 3d render on top of the surface, then another blit on top of the composited two. Finally does a srccopy to blit the finished composition to the framebuffer. Demonstrates apparent incorrect ordering in various versions of xemu.",
        "DirtyOverlappedDestSurf": "Performs a 3d render into the backbuffer, then a 2D srccopy that completely overwrites it. Finally performs another 3d render, demonstrating incorrect behavior in various versions of xemu.",
        "ImgBlt_BLENDAND_XRGB_B00000000": "Demonstrates expected behavior of the contextual beta (class 0x12) during image blits. ",
        "ImgBlt_Clip_0_0_640_480": "Demonstrates expected behavior of the contextual clip rectangle (class 0x19) during image blits."
      }
    },
    {
      "class": "InlineArraySizeMismatchTests",
      "description": [
        "Verifies that using an NV097_INLINE_ARRAY draw loop that ends with a partial vertex description silently ignores any partial vertices.",
        "See xemu#985"
      ],
      "source_file": "src/tests/inline_array_size_mismatch.h",
      "source_file_line": 14,
      "suite": "InlineArraySizeMismatchTests",
      "test_descriptions": {}
    },
    {
      "class": "LightingAccumulationTests",
      "description": [
        "Tests the effects of multiple lights.",
        "Each test renders a grid mesh in the center and renders multiple lights with low color multipliers in order to evaluate how they are accumulated into final pixel colors."
      ],
      "source_file": "src/tests/lighting_accumulation_tests.h",
      "source_file_line": 24,
      "suite": "LightingAccumulationTests",
      "test_descriptions": {}
    },
    {
      "class": "LightingControlTests",
      "description": [
        "Tests the effects of NV097_SET_LIGHT_CONTROL (0x294) in conjunction with NV097_SET_SPECULAR_ENABLE.",
        "A number of test meshes are rendered and lit with two lights:",
        "1) A directional light coming from the left and pointing into the screen (direction is {1, 0, 1}).",
        "2) An attenuated point light on the right at {1.5f, 1.f, -2.5f} with a max rannge of 4. and attenuation of {0.025f, 0.15f, 0.02f}.",
        "Both lights have ambient {0.f, 0.f, 0.05f}, diffuse {0.25f, 0.f, 0.f}, specular {0.f, 0.2f, 0.4f}.",
        "Meshes have the specular color of each vertex at {0.f, 0.4, 0.f, 0.25f}.",
        "All colors are taken from the material (i.e., contributed by the lights). NV097_SET_MATERIAL_ALPHA is set to 0.4 and the scene ambient is a very dark grey at 0.031373.",
        "See also: the OpenGL 2.1 specification lighting model",
        "https://registry.khronos.org/OpenGL/specs/gl/glspec21.pdf",
        "Notes on use with the programmable pipeline:",
        "While it is possible to enable lights when using a vertex shader, it appears that parts of the pipeline are not fully initialized, leading to non-deterministic color effects that change with each draw and often differ across cold boots of the hardware.",
        "Leaving lighting enabled without enabling any lights via NV097_SET_LIGHT_ENABLE_MASK will cause all vertices to be black in color, but alpha will still come from the material when allowed by the light control and specular enable settings.",
        "Disabling specular with lighting enabled will still disable the alpha application.",
        "Enabling specular with lighting disabled will apply the material alpha and use the vertex shader output colors."
      ],
      "source_file": "src/tests/lighting_control_tests.h",
      "source_file_line": 58,
      "suite": "LightingControlTests",
      "test_descriptions": {
        "FF_0x000000": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is off, causing the green of the mesh specular to be retained. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is forced to opaque.",
        "FF_0x000000NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off. Visually equivalent to FF_0x000001.",
        "FF_0x000001": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is on, so the green of the mesh specular is not seen. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is forced to opaque.",
        "FF_0x000001NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off.",
        "FF_0x010000": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is off, causing the green of the mesh specular to be retained. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is forced to opaque.",
        "FF_0x010000NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off.",
        "FF_0x010001": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is on, so the green of the mesh specular is not seen. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is forced to opaque.",
        "FF_0x010001NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off.",
        "FF_0x020000": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is off, causing the green of the mesh specular to be retained. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is set to compute the alpha from the specular and light effects, so the model is transluscent.",
        "FF_0x020000NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off.",
        "FF_0x020001": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is on, so the green of the mesh specular is not seen. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is set to compute the alpha from the specular and light effects, so the model is transluscent.",
        "FF_0x020001NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is off, using a simplified model for specular highlighting, causing artifacts for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off.",
        "FF_0x030000": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is off, causing the green of the mesh specular to be retained. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is set to compute the alpha from the specular and light effects, so the model is transluscent.",
        "FF_0x030000NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off.",
        "FF_0x030001": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED on. Separate specular is on, so the green of the mesh specular is not seen. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is set to compute the alpha from the specular and light effects, so the model is transluscent.",
        "FF_0x030001NoSpec": "Tests behavior using the fixed function pipeline with SET_SPECULAR_ENABLED off. Separate specular is ignored because SPECULAR_ENABLED is off, so the green of the mesh specular is not seen. Localeye is on, using a slower model for specular highlighting that results in more realistic behavior for the point light on the cylinder mesh. Light control alpha is ignored and the mesh is forced to opaque because SPECULAR_ENABLED is off. "
      }
    },
    {
      "class": "LightingNormalTests",
      "description": [
        "Tests behavior when lighting is enabled but a normal is not provided in the vertex data.",
        "The observed behavior on hardware is that the last set normal is reused for the unspecified vertices."
      ],
      "source_file": "src/tests/lighting_normal_tests.h",
      "source_file_line": 21,
      "suite": "LightingNormalTests",
      "test_descriptions": {}
    },
    {
      "class": "LightingRangeTests",
      "description": [
        "Tests the effects of NV097_SET_LIGHT_LOCAL_RANGE (0x1024).",
        "Each test renders a grid mesh in the center, angled such that the left side is closer to the camera than the right. Two quads are also rendered to the left and the right of the main mesh, the one on the left at a depth close to the camera and the one on the right farther away.",
        "A light is then projected onto the geometry with a range cutoff set such that a portion of the vertices should not be lit."
      ],
      "source_file": "src/tests/lighting_range_tests.h",
      "source_file_line": 27,
      "suite": "LightingRangeTests",
      "test_descriptions": {
        "Directional": "Tests behavior using the fixed function pipeline with a directional (infinite) light.",
        "Point": "Tests behavior using the fixed function pipeline with a point (local) light. Attenuation is set to 0 for the light, resulting in hard edges.",
        "Spot": "Tests behavior using the fixed function pipeline with a spotlight. Attenuation is set to 0 for the light, resulting in hard edges. "
      }
    },
    {
      "class": "LightingSpotlightTests",
      "description": [
        "Tests the behavior of spotlight falloff and attenuation settings.",
        "The spotlight is placed at {0, 0, -7} (the camera position) pointing directly into the screen, with a maximum range of 15.f. A plane is rendered at {0, 0, 0}, and a cylinder at ~ {1, 1, 0}.",
        "For the \"At\" prefixed tests, the attenuation factor of the light is adjusted. This factor should decrease the light intensity relative to the distance between the vertex and the light.",
        "For the \"Fo\" prefixed tests, the falloff factor of the light is adjusted. This factor modifies how the intensity falls off in the zone between the penumbra (the outermost illuminated region) and the umbra (the region within which the light's full intensity is applied). Note that all pixels are still modified by attenuation, which is set to a constant value.",
        "For the \"PT\" prefixed tests, the phi (penumbra) and theta (umbra) angles are set to various values, including some that would be prevented by DirectX.",
        "See",
        "https://learn.microsoft.com/en-us/windows/uwp/graphics-concepts/attenuation-and-spotlight-factor",
        ""
      ],
      "source_file": "src/tests/lighting_spotlight_tests.h",
      "source_file_line": 40,
      "suite": "LightingSpotlightTests",
      "test_descriptions": {}
    },
    {
      "class": "LightingTwoSidedTests",
      "description": [],
      "source_file": "src/tests/lighting_two_sided_tests.h",
      "source_file_line": 18,
      "suite": "LightingTwoSidedTests",
      "test_descriptions": {}
    },
    {
      "class": "LineWidthTests",
      "description": [],
      "source_file": "src/tests/line_width_tests.h",
      "source_file_line": 11,
      "suite": "LineWidthTests",
      "test_descriptions": {}
    },
    {
      "class": "MaterialAlphaTests",
      "description": [],
      "source_file": "src/tests/material_alpha_tests.h",
      "source_file_line": 8,
      "suite": "MaterialAlphaTests",
      "test_descriptions": {}
    },
    {
      "class": "MaterialColorSourceTests",
      "description": [
        "Tests behavior when lighting is enabled and color components are requested from various sources. Also tests the behavior of non-zero NV097_SET_MATERIAL_EMISSION values.",
        "A color legend is rendered along the left hand side: vD = vertex diffuse. vS = vertex specular. sA = scene ambient. mD = material diffuse. mS = material specular. mE = material emissive. mA = material ambient. A single directional light is used with ambient, diffuse, and specular multipliers all set to 1.0.",
        "NV097_SET_SCENE_AMBIENT_COLOR is set to scene ambient + material emissive."
      ],
      "source_file": "src/tests/material_color_source_tests.h",
      "source_file_line": 23,
      "suite": "MaterialColorSourceTests",
      "test_descriptions": {
        "Emissive_me0": "Draws 9 quads with combinations of emissive and ambient color taken from vertex diffuse and specular. The combinations in (emissive_src, ambient_src) format are: (D, D), (S, D), (D, S), (S, S), (M, S), (S, M), (M, D), (D, M), (M, M). Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0, 0, 0). ",
        "FromMaterial": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0.",
        "FromMaterial_2light": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromMaterial_me0_15": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.15, 0.15, 0.15).",
        "FromMaterial_me0_15_2light": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.15, 0.15, 0.15). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromMaterial_me0_5": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.5, 0.5, 0.5).",
        "FromMaterial_me0_5_2light": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.5, 0.5, 0.5). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromMaterial_me1_0": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. Each quad is broken into thirds: the top is just diffuse, the center is just specular, the bottom is both. NV097_SET_MATERIAL_EMISSION is set to (1, 1, 1).",
        "FromMaterial_me1_0_2light": "Draws 9 quads with all colors taken from the material settings. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. Each quad is broken into thirds: the top is just diffuse, the center is just specular, the bottom is both. NV097_SET_MATERIAL_EMISSION is set to (1, 1, 1). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexDiffuse": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0.",
        "FromVertexDiffuse_2light": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexDiffuse_me0_15": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.15, 0.15, 0.15).",
        "FromVertexDiffuse_me0_15_2light": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.15, 0.15, 0.15). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexDiffuse_me0_5": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.5, 0.5, 0.5).",
        "FromVertexDiffuse_me0_5_2light": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.5, 0.5, 0.5). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexDiffuse_me1_0": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (1, 1, 1).",
        "FromVertexDiffuse_me1_0_2light": "Draws 9 quads with some colors taken from the vertex diffuse color {0.f, 0.25f, 0.5f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (1, 1, 1). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexSpecular": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0.",
        "FromVertexSpecular_2light": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexSpecular_me0_15": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.15, 0.15, 0.15).",
        "FromVertexSpecular_me0_15_2light": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.15, 0.15, 0.15). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexSpecular_me0_5": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.5, 0.5, 0.5).",
        "FromVertexSpecular_me0_5_2light": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (0.5, 0.5, 0.5). There are two lights with all colors set to (0.25, 0.25, 0.25).",
        "FromVertexSpecular_me1_0": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (1, 1, 1).",
        "FromVertexSpecular_me1_0_2light": "Draws 9 quads with some colors taken from the vertex specular color {0.5f, 0.25f, 0.f, 0.25f}. Each quad is divided into rows: the top is just diffuse, the center is just specular, the bottom is both. It is also divided into columns: the left column retains material alpha, the right forces alpha to 1.0. NV097_SET_MATERIAL_EMISSION is set to (1, 1, 1). There are two lights with all colors set to (0.25, 0.25, 0.25)."
      }
    },
    {
      "class": "MaterialColorTests",
      "description": [],
      "source_file": "src/tests/material_color_tests.h",
      "source_file_line": 18,
      "suite": "MaterialColorTests",
      "test_descriptions": {}
    },
    {
      "class": "NullSurfaceTests",
      "description": [],
      "source_file": "src/tests/null_surface_tests.h",
      "source_file_line": 10,
      "suite": "NullSurfaceTests",
      "test_descriptions": {}
    },
    {
      "class": "OverlappingDrawModesTests",
      "description": [],
      "source_file": "src/tests/overlapping_draw_modes_tests.h",
      "source_file_line": 11,
      "suite": "OverlappingDrawModesTests",
      "test_descriptions": {}
    },
    {
      "class": "PixelShaderTests",
      "description": [
        "Tests various D3D PixelShader / NV097_SET_SHADER_STAGE_PROGRAM operations.",
        "See",
        "https://xboxdevwiki.net/NV2A/Pixel_Combiner",
        " See",
        "https://web.archive.org/web/20240607015835/https://developer.download.nvidia.com/assets/gamedev/docs/GDC2K1_DX8_Pixel_Shaders.pdf",
        ""
      ],
      "source_file": "src/tests/pixel_shader_tests.h",
      "source_file_line": 14,
      "suite": "PixelShaderTests",
      "test_descriptions": {
        "BumpEnvMap": "Demonstrates behavior of PS_TEXTUREMODES_BUMPENVMAP with various values for the NV097_SET_TEXTURE_SET_BUMP_ENV_MAT matrix. Values are {-1.f, 0.f, 1.f, 0.f}, {1.f, 1.f, 1.f, 1.f}, {0.f, 0.2f, 0.f, 0.75f}, {0.5f, -0.5f, 0.5f, -0.5f}, {0.3f, 0.5f, 0.7f, 1.f}, {0.f, 1.f, -1.f, 0.f}, {0.f, 0.f, 1.f, 1.f}, {0.5f, 0.8f, 0.f, 0.f},",
        "BumpEnvMapLuminance": "Demonstrates behavior of PS_TEXTUREMODES_BUMPENVMAP_LUM with various values for NV097_SET_TEXTURE_SET_BUMP_ENV_SCALE and NV097_SET_TEXTURE_SET_BUMP_ENV_OFFSET. Outputs are grouped by the env bump matrix (the value of each element is identical and printed in row 1). Columns are divided up by the scale factor, whose value is printed in row 2. Rows are defined by the offset value: {0, 0.25, 0.75, 1.0}.",
        "ClipPlane": "Demonstrates behavior of PS_TEXTUREMODES_CLIPPLANE. Various mock values for clipping planes are assigned to texture coordinates for stages 0 (red), 1 (green), and 2 (blue). The values of the coordinates are summarized in the image, with \"1\" used to indicate a positive value and \"-\" to indicate a negative one. The comparator function is set for each quad in the image with a similar shorthand indicating whether results < 0 are clipped (\"-\") or >= 0 (\"0\").",
        "DotST": "Renders a quad using PS_TEXTUREMODES_DOT_ST. Texture stage 0 is set to a bump map, stage 2 to an image with diagonal lines. Texture coordinates 1 are set to a normalized vector from the eye coordinate to each vertex (technically to a virtual position rather than the actual vertex position) and coordinate 2 is set to a normalized vector from the vertex to a virtual light. See ",
        "DotZW": "Renders a quad using PS_TEXTUREMODES_DOT_ZW. Texture stage 0 is set to a bump map. Tex coords for stages 1 and 2 define a 3x2 matrix multiplied against the texture 0 sampler to determine the Z and W components of the fragment's depth (z = tex1.uvw * tex0.rgb, w = tex2.uvw * tex0.rgb, final depth = z/w). See ",
        "Passthru": "Demonstrates behavior of PS_TEXTUREMODES_PASSTHRU, which simply utilizes texture coordinates as colors.",
        "StageDependentAlphaRed": "Renders a quad using PS_TEXTUREMODES_DPNDNT_AR. Texture stage 0 is set to a gradient textured. The sampled alpha and red channels from this texture are used as UV coordinates into the texture at stage 2.",
        "StageDependentGreenBlue": "Renders a quad using PS_TEXTUREMODES_DPNDNT_GB. Texture stage 0 is set to a gradient textured. The sampled green and blue channels from this texture are used as UV coordinates into the texture at stage 2. "
      }
    },
    {
      "class": "PointParamsTests",
      "description": [
        "Tests the behavior of NV097_SET_POINT_PARAMS_ENABLE (0x00000318) and NV097_SET_POINT_PARAMS (0x00000A30).",
        "The scale factors are used to calculate a multiplier for the point size using the formula SFactor = sqrt(1/(A + B * Deye + C * Deye ^ 2)).",
        "See",
        "https://learn.microsoft.com/en-us/windows/win32/direct3d9/point-sprites",
        "PointParamsX_SmoothX_PtSize_(FF | VS) Each test renders a grid of points. Point size is set to a test value for all points.",
        "As points go from top to bottom: Z starts at -5 (eye at -7) and increases by 25 per row (max depth = 193).",
        "In each row, as points go from left to right, point params are set from the following:",
        "",
        "No scale factors, min size 0, size range 0. Should be 1 pixel.",
        "",
        "No scale factors, min size 16, size range 0. Should be 16 pixels square.",
        "",
        "Negligible constant scale, size range 16, min size 0. Should be 16 pixels.",
        "",
        "Negligible constant scale, size range 16, min size 8. Should be 24 pixels.",
        "",
        "4 constant scale, size range 14, min size 16. Should be ~23 pixels.",
        "",
        "4 constant scale, size range 36, min size 4. Should be ~21 pixels.",
        "",
        "256 constant scale, size range 36, min size 4. Should be ~7 pixels.",
        "",
        "0.25 linear scale, size range 39, min 1.",
        "",
        "0.05 quadratic scale, size range 39, min 1.",
        "",
        "4 constant scale, size range 14, min size 16, bias -0.5.",
        "",
        "4 constant scale, size range 14, min size 16, bias 0.5.",
        "",
        "No scale factors, size range 15, min size 1, bias -100.",
        "",
        "No scale factors, size range 15, min size 1, bias 100.",
        "",
        "",
        "",
        "Detailed_(FF | VS) Each test renders a grid of points. Point size is set to 128 (16 pixels) for all points.",
        "",
        "",
        "No scale factors, min size 0, size range 0. Should be 1 pixel.",
        "No scale factors, min size 16, size range 0. Should be 16 pixels square.",
        "Negligible constant scale, size range 16, min size 0. Should be 16 pixels.",
        "Negligible constant scale, size range 16, min size 8. Should be 24 pixels.",
        "4 constant scale, size range 14, min size 16. Should be ~23 pixels.",
        "4 constant scale, size range 36, min size 4. Should be ~21 pixels.",
        "256 constant scale, size range 36, min size 4. Should be ~7 pixels.",
        "0.25 linear scale, size range 39, min 1.",
        "0.05 quadratic scale, size range 39, min 1.",
        "4 constant scale, size range 14, min size 16, bias -0.5.",
        "4 constant scale, size range 14, min size 16, bias 0.5.",
        "No scale factors, size range 15, min size 1, bias -100.",
        "No scale factors, size range 15, min size 1, bias 100.",
        "Detailed_(FF | VS) Each test renders a grid of points. Point size is set to 128 (16 pixels) for all points.",
        "As points go from top to bottom: Z starts at -5 (eye at -7) and increases by 25 per row (max depth = 193).",
        "In each row, as points go from left to right, point params are set from the following:",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -1.0",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.5",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.25",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.01",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias 0",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.01",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.25",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.5",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -1.0",
        "",
        "4 constant scale, size range 36, min size 4, scale bias -0.4",
        "",
        "4 constant scale, size range 36, min size 4, scale bias -0.25",
        "",
        "4 constant scale, size range 36, min size 4, scale bias 0.25",
        "",
        "4 constant scale, size range 36, min size 4, scale bias 0.4",
        "",
        "",
        "0.25 linear scale, size range 39, min size 1, scale bias -1.0",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.5",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.25",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.01",
        "0.25 linear scale, size range 39, min size 1, scale bias 0",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.01",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.25",
        "0.25 linear scale, size range 39, min size 1, scale bias -0.5",
        "0.25 linear scale, size range 39, min size 1, scale bias -1.0",
        "4 constant scale, size range 36, min size 4, scale bias -0.4",
        "4 constant scale, size range 36, min size 4, scale bias -0.25",
        "4 constant scale, size range 36, min size 4, scale bias 0.25",
        "4 constant scale, size range 36, min size 4, scale bias 0.4"
      ],
      "source_file": "src/tests/point_params_tests.h",
      "source_file_line": 66,
      "suite": "PointParamsTests",
      "test_descriptions": {
        "Detailed_FF": "Renders points using the fixed function pipeline with more complex point params.",
        "Detailed_VS": "Renders points using a programmable shader with more complex point params.",
        "PointParamsOff_SmoothOff_128_FF": "Renders points using the fixed function pipeline with point size 128 (16px), point smoothing and point params disabled.",
        "PointParamsOff_SmoothOff_128_VS": "Renders points using a programmable shader with point size 128 (16px), point smoothing and point params disabled.",
        "PointParamsOn_SmoothOff_128_FF": "Renders points using the fixed function pipeline with point size 128 (16px), point smoothing disabled and point params enabled.",
        "PointParamsOn_SmoothOff_128_VS": "Renders points using a programmable shader with point size 128 (16px), point smoothing disabled and point params enabled.",
        "PointParamsOn_SmoothOn_001_FF": "Renders points using the fixed function pipeline with point size 1, point smoothing and point params enabled. Demonstrates that point size is ignored when point params are enabled.",
        "PointParamsOn_SmoothOn_128_FF": "Renders points using the fixed function pipeline with point size 128 (16px), point smoothing and point params enabled.",
        "PointParamsOn_SmoothOn_128_VS": "Renders points using a programmable shader with point size 128 (16px), point smoothing and point params enabled.",
        "Scale_0_0_0_FF": "Renders points using the fixed function pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 0.0, 0.0, 0.0. Minimum size is set to 0.5.",
        "Scale_0_0_0_VS": "Renders points using the programmable pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 0.0, 0.0, 0.0. Minimum size is set to 0.5.",
        "Scale_0_0_1_FF": "Renders points using the fixed function pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 0.0, 0.0, 1.0. Minimum size is set to 0.5.",
        "Scale_0_0_1_VS": "Renders points using the programmable pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 0.0, 0.0, 1.0. Minimum size is set to 0.5. ",
        "Scale_0_1_0_FF": "Renders points using the fixed function pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 0.0, 1.0, 0.0. Minimum size is set to 0.5.",
        "Scale_0_1_0_VS": "Renders points using the programmable pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 0.0, 1.0, 0.0. Minimum size is set to 0.5.",
        "Scale_4_0_0_FF": "Renders points using the fixed function pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 4.0, 0.0, 0.0. Minimum size is set to 0.5.",
        "Scale_4_0_0_VS": "Renders points using the programmable pipeline at varying distances from the eye point with point size 130 (16.25px) and point scale params 4.0, 0.0, 0.0. Minimum size is set to 0.5."
      }
    },
    {
      "class": "PointSizeTests",
      "description": [
        "Tests the behavior of NV097_SET_POINT_SIZE and NV097_SET_POINT_SMOOTH_ENABLE",
        "See",
        "https://registry.khronos.org/OpenGL-Refpages/gl2.1/xhtml/glPointSize.xml",
        "Each test renders a grid of points.",
        "As points go from left to right: point size starts at 0 and increases by point_size_increment per point."
      ],
      "source_file": "src/tests/point_size_tests.h",
      "source_file_line": 19,
      "suite": "PointSizeTests",
      "test_descriptions": {
        "PointSmoothOff_01_FF": "Renders points using the fixed function pipeline with point smoothing disabled. Point size starts at 0 and increases by 1 per point starting at the upper left point.",
        "PointSmoothOff_01_VS": "Renders points using a programmable shader with point smoothing disabled. Point size starts at 0 and increases by 1 per point starting at the upper left point.",
        "PointSmoothOff_04_FF": "Renders points using the fixed function pipeline with point smoothing disabled. Point size starts at 0 and increases by 4 per point starting at the upper left point.",
        "PointSmoothOff_04_VS": "Renders points using a programmable shader with point smoothing disabled. Point size starts at 0 and increases by 1 per point starting at the upper left point.",
        "PointSmoothOff_08_FF": "Renders points using the fixed function pipeline with point smoothing disabled. Point size starts at 0 and increases by 8 per point starting at the upper left point.",
        "PointSmoothOff_08_VS": "Renders points using a programmable shader with point smoothing disabled. Point size starts at 0 and increases by 8 per point starting at the upper left point.",
        "PointSmoothOff_16_FF": "Renders points using the fixed function pipeline with point smoothing disabled. Point size starts at 0 and increases by 16 per point starting at the upper left point.",
        "PointSmoothOff_16_VS": "Renders points using a programmable shader with point smoothing disabled. Point size starts at 0 and increases by 16 per point starting at the upper left point. ",
        "PointSmoothOn_01_FF": "Renders points using the fixed function pipeline with point smoothing enabled. Point size starts at 0 and increases by 1 per point starting at the upper left point.",
        "PointSmoothOn_01_VS": "Renders points using a programmable shader with point smoothing enabled. Point size starts at 0 and increases by 1 per point starting at the upper left point.",
        "PointSmoothOn_04_FF": "Renders points using the fixed function pipeline with point smoothing enabled. Point size starts at 0 and increases by 4 per point starting at the upper left point.",
        "PointSmoothOn_04_VS": "Renders points using a programmable shader with point smoothing enabled. Point size starts at 0 and increases by 1 per point starting at the upper left point.",
        "PointSmoothOn_08_FF": "Renders points using the fixed function pipeline with point smoothing enabled. Point size starts at 0 and increases by 8 per point starting at the upper left point.",
        "PointSmoothOn_08_VS": "Renders points using a programmable shader with point smoothing enabled. Point size starts at 0 and increases by 8 per point starting at the upper left point.",
        "PointSmoothOn_16_FF": "Renders points using the fixed function pipeline with point smoothing enabled. Point size starts at 0 and increases by 16 per point starting at the upper left point.",
        "PointSmoothOn_16_VS": "Renders points using a programmable shader with point smoothing enabled. Point size starts at 0 and increases by 16 per point starting at the upper left point."
      }
    },
    {
      "class": "PvideoTests",
      "description": [
        "Tests the PVIDEO subsystem."
      ],
      "source_file": "src/tests/pvideo_tests.h",
      "source_file_line": 12,
      "suite": "PvideoTests",
      "test_descriptions": {}
    },
    {
      "class": "SetVertexDataTests",
      "description": [],
      "source_file": "src/tests/set_vertex_data_tests.h",
      "source_file_line": 21,
      "suite": "SetVertexDataTests",
      "test_descriptions": {}
    },
    {
      "class": "ShadeModelTests",
      "description": [],
      "source_file": "src/tests/shade_model_tests.h",
      "source_file_line": 14,
      "suite": "ShadeModelTests",
      "test_descriptions": {}
    },
    {
      "class": "SmoothingTests",
      "description": [],
      "source_file": "src/tests/smoothing_tests.h",
      "source_file_line": 12,
      "suite": "SmoothingTests",
      "test_descriptions": {}
    },
    {
      "class": "SpecularBackTests",
      "description": [
        "Tests handling of back specular color with interesting combinations of lighting settings and specular params."
      ],
      "source_file": "src/tests/specular_back_tests.h",
      "source_file_line": 17,
      "suite": "SpecularBackTests",
      "test_descriptions": {
        "ControlFlagsLightDisable_FF": "Demonstrates that setting NV097_SET_LIGHT_TWO_SIDE_ENABLE will cause specular and diffuse channels to be {0, 0, 0, 1} for back facing polygons even with lighting disbled.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is disabled.\nEach quad has back specular and back diffuse colors of:\nUL: {1.f, 0.f, 0.0f, 0.15f}, {0.5f, 0.f, 0.f, 1.f} UR: {1.f, 0.f, 0.0f, 0.75f}, {0.75f, 0.f, 0.f, 1.f} LR: {0.f, 1.f, 0.0f, 1.f}, {1.f, 0.f, 0.f, 1.f} LL: {0.f, 1.f, 0.0f, 0.20f}, {0.25f, 0.f, 0.f, 1.f}\nFront specular is set to {0.f, 0.f, 1.f, 0.33f} and diffuse {0.0f, 1.0f, 0.5f, 1.0f}.\nThe upper two rows have SET_SPECULAR_ENABLE = false. The lower rows have it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0 ",
        "ControlFlagsLightDisable_VS": "Demonstrates that SET_SPECULAR_ENABLE = false forces back specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1. The vertex shader back color outputs are applied directly.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is disabled.\nEach quad has back specular and back diffuse colors of:\nUL: {1.f, 0.f, 0.0f, 0.15f}, {0.5f, 0.f, 0.f, 1.f} UR: {1.f, 0.f, 0.0f, 0.75f}, {0.75f, 0.f, 0.f, 1.f} LR: {0.f, 1.f, 0.0f, 1.f}, {1.f, 0.f, 0.f, 1.f} LL: {0.f, 1.f, 0.0f, 0.20f}, {0.25f, 0.f, 0.f, 1.f}\nFront specular is set to {0.f, 0.f, 1.f, 0.33f} and diffuse {0.0f, 1.0f, 0.5f, 1.0f}.\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0 ",
        "ControlFlagsNoLight_FF": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex \nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but no light exists.\nEach quad has back specular and back diffuse colors of:\nUL: {1.f, 0.f, 0.0f, 0.15f}, {0.5f, 0.f, 0.f, 1.f} UR: {1.f, 0.f, 0.0f, 0.75f}, {0.75f, 0.f, 0.f, 1.f} LR: {0.f, 1.f, 0.0f, 1.f}, {1.f, 0.f, 0.f, 1.f} LL: {0.f, 1.f, 0.0f, 0.20f}, {0.25f, 0.f, 0.f, 1.f}\nFront specular is set to {0.f, 0.f, 1.f, 0.33f} and diffuse {0.0f, 1.0f, 0.5f, 1.0f}.\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "ControlFlagsNoLight_VS": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the back specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex back specular RGB in the specular channel instead of performing the light calculation (which is black due to lack of light). Diffuse alpha is defined via SET_MATERIAL_ALPHA_BACK.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but no light exists.\nEach quad has back specular and back diffuse colors of:\nUL: {1.f, 0.f, 0.0f, 0.15f}, {0.5f, 0.f, 0.f, 1.f} UR: {1.f, 0.f, 0.0f, 0.75f}, {0.75f, 0.f, 0.f, 1.f} LR: {0.f, 1.f, 0.0f, 1.f}, {1.f, 0.f, 0.f, 1.f} LL: {0.f, 1.f, 0.0f, 0.20f}, {0.25f, 0.f, 0.f, 1.f}\nFront specular is set to {0.f, 0.f, 1.f, 0.33f} and diffuse {0.0f, 1.0f, 0.5f, 1.0f}.\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "ControlFlags_FF": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex \nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but with a directional light pointing at {1, 0, 1}.\nEach quad has back specular and back diffuse colors of:\nUL: {1.f, 0.f, 0.0f, 0.15f}, {0.5f, 0.f, 0.f, 1.f} UR: {1.f, 0.f, 0.0f, 0.75f}, {0.75f, 0.f, 0.f, 1.f} LR: {0.f, 1.f, 0.0f, 1.f}, {1.f, 0.f, 0.f, 1.f} LL: {0.f, 1.f, 0.0f, 0.20f}, {0.25f, 0.f, 0.f, 1.f}\nFront specular is set to {0.f, 0.f, 1.f, 0.33f} and diffuse {0.0f, 1.0f, 0.5f, 1.0f}.\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "ControlFlags_VS": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex back specular RGB instead of performing the light calculation.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but with a directional light pointing at {1, 0, 1}.\nEach quad has back specular and back diffuse colors of:\nUL: {1.f, 0.f, 0.0f, 0.15f}, {0.5f, 0.f, 0.f, 1.f} UR: {1.f, 0.f, 0.0f, 0.75f}, {0.75f, 0.f, 0.f, 1.f} LR: {0.f, 1.f, 0.0f, 1.f}, {1.f, 0.f, 0.f, 1.f} LL: {0.f, 1.f, 0.0f, 0.20f}, {0.25f, 0.f, 0.f, 1.f}\nFront specular is set to {0.f, 0.f, 1.f, 0.33f} and diffuse {0.0f, 1.0f, 0.5f, 1.0f}.\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "SpecParams_FF_AllZero": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS_BACK is set to the values displayed in the image. The Z coordinate of model normals is inverted and winding is swapped to make front faces back.",
        "SpecParams_FF_InvMechAssault": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS_BACK is set to the values displayed in the image. The Z coordinate of model normals is inverted and winding is swapped to make front faces back.",
        "SpecParams_FF_MechAssault": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS_BACK is set to the values displayed in the image. The Z coordinate of model normals is inverted and winding is swapped to make front faces back.",
        "SpecParams_FF_NinjaGaidenBlack": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS_BACK is set to the values displayed in the image. The Z coordinate of model normals is inverted and winding is swapped to make front faces back. "
      }
    },
    {
      "class": "SpecularTests",
      "description": [
        "Tests handling of specular color with interesting combinations of lighting settings and specular params."
      ],
      "source_file": "src/tests/specular_tests.h",
      "source_file_line": 17,
      "suite": "SpecularTests",
      "test_descriptions": {
        "ControlFlagsLightDisable_FF": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is disabled.\nEach quad has specular and diffuse colors of: UL = {1.f, 0.f, 0.f, 0.15f}, {0.f, 0.f, 0.5f, 1.f} UR = {1.f, 0.f, 0.f, 0.75f}, {0.f, 0.f, 0.75f, 1.f} LR = {0.f, 1.f, 0.f, 1.f}, {0.f, 0.f, 1.f, 1.f} LL = {0.f, 1.f, 0.f, 0.2f}, {0.f, 0.f, 0.25f, 1.f}\nThe upper two rows have SET_SPECULAR_ENABLE = false. The lower rows have it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0 ",
        "ControlFlagsLightDisable_VS": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is disabled.\nEach quad has specular and diffuse colors of: UL = {1.f, 0.f, 0.f, 0.15f}, {0.f, 0.f, 0.5f, 1.f} UR = {1.f, 0.f, 0.f, 0.75f}, {0.f, 0.f, 0.75f, 1.f} LR = {0.f, 1.f, 0.f, 1.f}, {0.f, 0.f, 1.f, 1.f} LL = {0.f, 1.f, 0.f, 0.2f}, {0.f, 0.f, 0.25f, 1.f}\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0 ",
        "ControlFlagsNoLight_FF": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex specular RGB instead of performing the light calculation.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but no light exists.\nEach quad has specular and diffuse colors of: UL = {1.f, 0.f, 0.f, 0.15f}, {0.f, 0.f, 0.5f, 1.f} UR = {1.f, 0.f, 0.f, 0.75f}, {0.f, 0.f, 0.75f, 1.f} LR = {0.f, 1.f, 0.f, 1.f}, {0.f, 0.f, 1.f, 1.f} LL = {0.f, 1.f, 0.f, 0.2f}, {0.f, 0.f, 0.25f, 1.f}\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "ControlFlagsNoLight_VS": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex specular RGB instead of performing the light calculation.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but no light exists.\nEach quad has specular and diffuse colors of: UL = {1.f, 0.f, 0.f, 0.15f}, {0.f, 0.f, 0.5f, 1.f} UR = {1.f, 0.f, 0.f, 0.75f}, {0.f, 0.f, 0.75f, 1.f} LR = {0.f, 1.f, 0.f, 1.f}, {0.f, 0.f, 1.f, 1.f} LL = {0.f, 1.f, 0.f, 0.2f}, {0.f, 0.f, 0.25f, 1.f}\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "ControlFlags_FF": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex specular RGB instead of performing the light calculation.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but with a directional light pointing at {1, 0, 1}.\nEach quad has specular and diffuse colors of: UL = {1.f, 0.f, 0.f, 0.15f}, {0.f, 0.f, 0.5f, 1.f} UR = {1.f, 0.f, 0.f, 0.75f}, {0.f, 0.f, 0.75f, 1.f} LR = {0.f, 1.f, 0.f, 1.f}, {0.f, 0.f, 1.f, 1.f} LL = {0.f, 1.f, 0.f, 0.2f}, {0.f, 0.f, 0.25f, 1.f}\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "ControlFlags_VS": "Demonstrates that SET_SPECULAR_ENABLE = false forces specular values to {0, 0, 0, 1}. Also demonstrates that failing to set ALPHA_FROM_MATERIAL_SPECULAR will cause the specular alpha to be set to 1 and failing to set SEPARATE_SPECULAR will pass through vertex specular RGB instead of performing the light calculation.\nRenders two groups of two rows of 4 quads each with the fixed function pipeline. The first row is the specular component, the second is the diffuse. Lighting is enabled but with a directional light pointing at {1, 0, 1}.\nEach quad has specular and diffuse colors of: UL = {1.f, 0.f, 0.f, 0.15f}, {0.f, 0.f, 0.5f, 1.f} UR = {1.f, 0.f, 0.f, 0.75f}, {0.f, 0.f, 0.75f, 1.f} LR = {0.f, 1.f, 0.f, 1.f}, {0.f, 0.f, 1.f, 1.f} LL = {0.f, 1.f, 0.f, 0.2f}, {0.f, 0.f, 0.25f, 1.f}\nThe upper row has SET_SPECULAR_ENABLE = false. The lower row has it true. The first column has SET_LIGHT_CONTROL = SEPARATE_SPECULAR + ALPHA_FROM_MATERIAL_SPECULAR The second has SET_LIGHT_CONTROL = SEPARATE_SPECULAR The third has SET_LIGHT_CONTROL = ALPHA_FROM_MATERIAL_SPECULAR The fourth has SET_LIGHT_CONTROL = 0\nBecause lighting is enabled, the diffuse alpha is entirely dictated by SET_MATERIAL_ALPHA, and RGB is entirely set by the lighting calculations. ",
        "NonUnitNormal_0.972": "Renders a triangle fan with spherical normals that are scaled to be 0.972 in length. 0.972 is small enough that no pixels are illuminated.",
        "NonUnitNormal_0.973": "Renders a triangle fan with spherical normals that are scaled to be 0.973 in length. 0.973 is large enough that center pixels are non-0.",
        "NonUnitNormal_1.000": "Renders a triangle fan with spherical unit-length normals. This is the control image.",
        "NonUnitNormal_1.008": "Renders a triangle fan with spherical normals that are scaled to be 1.008 in length. This is close enough to 1.0 that the color is still applied.",
        "NonUnitNormal_1.009": "Renders a triangle fan with spherical normals that are scaled to be 1.009 in length. This demonstrates that specular color is reset to 0 when overflowing ~1.0. ",
        "SpecParams_FF_AllZero": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS is set to the values displayed in the image.",
        "SpecParams_FF_InvMechAssault": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS is set to the values displayed in the image.",
        "SpecParams_FF_MechAssault": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS is set to the values displayed in the image.",
        "SpecParams_FF_NinjaGaidenBlack": "Renders a number of meshes with a directional light and a point light, shading the specular channel only. LIGHT_CONTROL is set to SEPARATE_SPECULAR and SET_SPECULAR_PARAMS is set to the values displayed in the image."
      }
    },
    {
      "class": "StencilFuncTests",
      "description": [
        "Tests the behavior of NV097_SET_STENCIL_FUNC (0x00000364).",
        "Each test renders a series of red quads unconditionally, then renders an invisible quad on top to set the value of the stencil buffer to various test values. Finally, a green quad is rendered across all test patches using the selected stencil function, causing areas that pass the function to turn green, while failing pixels remain red."
      ],
      "source_file": "src/tests/stencil_func_tests.h",
      "source_file_line": 21,
      "suite": "StencilFuncTests",
      "test_descriptions": {
        "Always": "Tests NV097_SET_STENCIL_FUNC_V_ALWAYS - the entire test region should be green.",
        "Equal": "Tests NV097_SET_STENCIL_FUNC_V_EQUAL - only the 0x7F patch should be green.",
        "Greater": "Tests NV097_SET_STENCIL_FUNC_V_GREATER - all patches less than 0x7F and the test area (stencil = 0) should be green.",
        "GreaterThanOrEqual": "Tests NV097_SET_STENCIL_FUNC_V_GEQUAL - the test area (stencil = 0) and all patches less than 0x7F and the 0x7F patch should be green.",
        "Less": "Tests NV097_SET_STENCIL_FUNC_V_LESS - all patches greater than 0x7F should be green.",
        "LessThanOrEqual": "Tests NV097_SET_STENCIL_FUNC_V_LEQUAL - all patches greater than 0x7F and the 0x7F patch should be green.",
        "Never": "Tests NV097_SET_STENCIL_FUNC_V_NEVER - all patches should be blue.",
        "NotEqual": "Tests NV097_SET_STENCIL_FUNC_V_NOTEQUAL - the 0x7F patch should be blue, all other patches and the test area (stencil = 0) should be green. "
      }
    },
    {
      "class": "StencilTests",
      "description": [
        "Tests the behavior of NV097_SET_STENCIL_OP_ZPASS.",
        "Each test renders a red quad, then enables stencil testing, renders a smaller quad into the depth/stencil buffer to update stencil values, then renders a green quad over the original red. Areas that pass the stencil test will be green, other areas will remain red."
      ],
      "source_file": "src/tests/stencil_tests.h",
      "source_file_line": 20,
      "suite": "StencilTests",
      "test_descriptions": {}
    },
    {
      "class": "StippleTests",
      "description": [],
      "source_file": "src/tests/stipple_tests.h",
      "source_file_line": 11,
      "suite": "StippleTests",
      "test_descriptions": {}
    },
    {
      "class": "SurfaceClipTests",
      "description": [
        "Tests behavior of NV097_SET_SURFACE_CLIP_HORIZONTAL and NV097_SET_SURFACE_CLIP_VERTICAL."
      ],
      "source_file": "src/tests/surface_clip_tests.h",
      "source_file_line": 14,
      "suite": "SurfaceClipTests",
      "test_descriptions": {
        "DebugTextShouldClip": "Sets a tiny clip area and renders debug text. No text should be visible.",
        "XemuBug420": "Reproduction case for xemu#420. A 32-bit surface is created, then immediately changed to a 16-bit one, followed by a region clear. This caused an assertion in versions before xemu#919",
        "rt_x0y0_w0h0": "Configures a texture target as R5G6B5 and sets the clip region to 0,0 0x0, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. The texture is then rendered into an 8888 backbuffer.",
        "rt_x0y0_w512h384": "Configures a texture target as R5G6B5 and sets the clip region to 0,0 512x384, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. The texture is then rendered into an 8888 backbuffer. No red should be seen, and the light green quads should be fully visible.",
        "rt_x0y0_w640h480": "Configures a texture target as R5G6B5 and sets the clip region to 0,0 640x480, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary.The texture is then rendered into an 8888 backbuffer. No red should be seen, and the light green quads should be fully visible.",
        "rt_x0y240_w640h240": "Configures a texture target as R5G6B5 and sets the clip region to 0,240 640x240, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. The texture is then rendered into an 8888 backbuffer. No red should be seen, and the light green quads should be fully visible.",
        "rt_x16y8_w512h384": "Configures a texture target as R5G6B5 and sets the clip region to 16,8 512x384, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. The texture is then rendered into an 8888 backbuffer. No red should be seen, and the light green quads should be fully visible.",
        "rt_x320y240_w320h240": "Configures a texture target as R5G6B5 and sets the clip region to 320,240 320x240, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. The texture is then rendered into an 8888 backbuffer. No red should be seen, and the light green quads should be fully visible.",
        "rt_x8y16_w632h464": "Configures a texture target as R5G6B5 and sets the clip region to 8,16 632x464, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. The texture is then rendered into an 8888 backbuffer. No red should be seen, and the light green quads should be fully visible.",
        "x0y0_w0h0": "Configures the backbuffer as R5G6B5 and sets the clip region to 0,0 0x0, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. Because the format is 565, the colors are shifted from red -> green, light green -> light pink, and dark green -> pink.",
        "x0y0_w0h0_A8R8G8B8": "Configures the backbuffer as A8R8G8B8 and sets the clip region to 0,0 0x0, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No geometry should be seen, since width and height of the clip region are 0.",
        "x0y0_w512h384": "Configures the backbuffer as R5G6B5 and sets the clip region to 0,0 512x384, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible. Because the format is 565, the colors are shifted from red -> green, light green -> light pink, and dark green -> pink.",
        "x0y0_w512h384_A8R8G8B8": "Configures the backbuffer as A8R8G8B8 and sets the clip region to 0,0 512x384, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible.",
        "x0y0_w640h480": "Configures the backbuffer as R5G6B5 and sets the clip region to 0,0 640x480, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible. Because the format is 565, the colors are shifted from red -> green, light green -> light pink, and dark green -> pink.",
        "x0y0_w640h480_A8R8G8B8": "Configures the backbuffer as A8R8G8B8 and sets the clip region to 0,0 640x480, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible.",
        "x0y240_w640h240": "Configures the backbuffer as R5G6B5 and sets the clip region to 0,240 640x240, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible. Because the format is 565, the colors are shifted from red -> green, light green -> light pink, and dark green -> pink.",
        "x0y240_w640h240_A8R8G8B8": "Configures the backbuffer as A8R8G8B8 and sets the clip region to 0,240 640x240, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible.",
        "x16y8_w512h384": "Configures the backbuffer as R5G6B5 and sets the clip region to 16,8 512x384, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible. Because the format is 565, the colors are shifted from red -> green, light green -> light pink, and dark green -> pink.",
        "x16y8_w512h384_A8R8G8B8": "Configures the backbuffer as A8R8G8B8 and sets the clip region to 16,8 512x384, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible.",
        "x320y240_w320h240": "Configures the backbuffer as R5G6B5 and sets the clip region to 320,240 320x240, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible. Because the format is 565, the colors are shifted from red -> green, light green -> light pink, and dark green -> pink.",
        "x320y240_w320h240_A8R8G8B8": "Configures the backbuffer as A8R8G8B8 and sets the clip region to 320,240 320x240, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible. ",
        "x8y16_w632h464": "Configures the backbuffer as R5G6B5 and sets the clip region to 8,16 632x464, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible. Because the format is 565, the colors are shifted from red -> green, light green -> light pink, and dark green -> pink.",
        "x8y16_w632h464_A8R8G8B8": "Configures the backbuffer as A8R8G8B8 and sets the clip region to 8,16 632x464, then clears the clipped region and draws 4 red quads just outside the clip region, a dark green quad 1 pixel within the clip region, and 4 lighter green quads along the clip boundary. No red should be seen, and the light green quads should be fully visible."
      }
    },
    {
      "class": "SurfaceFormatTests",
      "description": [
        "Tests behavior of NV097_SET_SURFACE_FORMAT_COLOR. Tests render two quads into a render target with the surface color format under test. The left quad consists of 4 color gradient patches (red, yellow, cyan, blue) with alpha forced to fully opaque. The second quad uses the same color gradients but has alpha set in a radial pattern such that it is 0 at the corners and fully opaque in the center.",
        "The resultant surface is then rendered to an RGBA framebuffer twice, once at the top of the screen with the alpha channel preserved, and again at the bottom of the screen with alpha forced to fully opaque."
      ],
      "source_file": "src/tests/surface_format_tests.h",
      "source_file_line": 19,
      "suite": "SurfaceFormatTests",
      "test_descriptions": {
        "Fmt_A8R8G8B8": "Tests the A8R8G8B8 surface format. Quads appear the same as if they were rendered directly into the framebuffer.",
        "Fmt_B8": "Tests the B8 surface format. Quads appear as alpha+luma ramps and are distorted and repeated due to the difference in bytes per pixel.",
        "Fmt_G8B8": "Tests the G8B8 surface format. Quads set the red channel equal to the blue channel and alpha equal to the green channel. Quads are once again repeated due to the difference in bytes per pixel.",
        "Fmt_R5G6B5": "Tests the R5G6B5 surface format.",
        "Fmt_X1A7R8G8B8_O1A7R8G8B8": "Tests the X1A7R8G8B8_O1A7R8G8B8 surface format. Quads appear similar to A8R8G8B8, but the high bit of the alpha is set to 1, causing all quads to be less translucent.",
        "Fmt_X1A7R8G8B8_Z1A7R8G8B8": "Tests the X1A7R8G8B8_Z1A7R8G8B8 surface format. Quads appear similar to A8R8G8B8, but the high bit of the alpha is set to 0, causing all quads to be translucent.",
        "Fmt_X1R5G5B5_O1R5G5B5": "Tests the X1R5G5B5_O1R5G5B5 surface format.",
        "Fmt_X1R5G5B5_Z1R5G5B5": "Tests the X1R5G5B5_Z1R5G5B5 surface format.",
        "Fmt_X8R8G8B8_O8R8G8B8": "Tests the X8R8G8B8_O8R8G8B8 surface format. Quads appear similar to A8R8G8B8, but the alpha is set to fully opaque.",
        "Fmt_X8R8G8B8_Z8R8G8B8": "Tests the X8R8G8B8_Z8R8G8B8 surface format. Quads appear similar to A8R8G8B8, but the alpha is set to fully transparent (no quads should appear in the top half of the image). "
      }
    },
    {
      "class": "SurfacePitchTests",
      "description": [],
      "source_file": "src/tests/surface_pitch_tests.h",
      "source_file_line": 10,
      "suite": "SurfacePitchTests",
      "test_descriptions": {}
    },
    {
      "class": "SwathWidthTests",
      "description": [
        "Tests the behavior of NV097_SET_SWATH_WIDTH (0x09f8)."
      ],
      "source_file": "src/tests/swath_width_tests.h",
      "source_file_line": 12,
      "suite": "SwathWidthTests",
      "test_descriptions": {
        "SwathWidth00": "Sets NV097_SET_SWATH_WIDTH to 0x00.",
        "SwathWidth01": "Sets NV097_SET_SWATH_WIDTH to 0x01.",
        "SwathWidth02": "Sets NV097_SET_SWATH_WIDTH to 0x02.",
        "SwathWidth03": "Sets NV097_SET_SWATH_WIDTH to 0x03.",
        "SwathWidth04": "Sets NV097_SET_SWATH_WIDTH to 0x04.",
        "SwathWidth0F": "Sets NV097_SET_SWATH_WIDTH to 0x0F (correlated with turning antialiasing off). "
      }
    },
    {
      "class": "TexgenMatrixTests",
      "description": [],
      "source_file": "src/tests/texgen_matrix_tests.h",
      "source_file_line": 10,
      "suite": "TexgenMatrixTests",
      "test_descriptions": {}
    },
    {
      "class": "TexgenTests",
      "description": [],
      "source_file": "src/tests/texgen_tests.h",
      "source_file_line": 10,
      "suite": "TexgenTests",
      "test_descriptions": {}
    },
    {
      "class": "Texture2DAsCubemapTests",
      "description": [
        "Tests the behavior of various texture stage modes that require cubemap/volumetric textures but are given textures registered as 2d.",
        "NOTE: This suite tests behavior of incorrectly configured textures. Please see",
        "TextureCubemapTests",
        " for examples of how these modes should actually be used."
      ],
      "source_file": "src/tests/texture_2d_as_cubemap_tests.h",
      "source_file_line": 15,
      "suite": "Texture2DAsCubemapTests",
      "test_descriptions": {
        "Cubemap_Bad2D": "Renders two angles of a cube utilizing a cubemap texture.",
        "DotReflectDiffuse_Bad2D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_DIFF pixel shading mode but passing a 2d texture instead of a cubemap for the final lookup.",
        "DotReflectSpecConst_Bad2D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST but passing a 2d texture instead of a cubemap for the final lookup.",
        "DotReflectSpec_Bad2D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC pixel shading mode but passing a 2d texture instead of a cubemap for the final lookup.",
        "DotSTR3D_Bad2D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_3D pixel shading mode but passing a 2d texture instead of a cubemap for the final lookup.",
        "DotSTRCube_Bad2D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_CUBE pixel shading mode but passing a 2d texture instead of a cubemap for the final lookup. "
      }
    },
    {
      "class": "Texture3DAs2DTests",
      "description": [
        "Tests the behavior of various texture stage modes that require 2D textures but are given cubemap/volumetric textures.",
        "NOTE: This suite tests behavior of incorrectly configured textures. Please see",
        "TextureFormatTests",
        " for examples of how 2D textures should generally be used."
      ],
      "source_file": "src/tests/texture_3d_as_2d_tests.h",
      "source_file_line": 14,
      "suite": "Texture3DAs2DTests",
      "test_descriptions": {
        "Cubemap_as_2D": "Renders a textured quad using a cubemap texture sampled as 2D_PROJECTIVE. The +X face is rendered as a native-sized reference image. The quad is rendered at 4x the native size of the texture.",
        "Volumetric_as_2D": "Renders a textured quad using a volumetric texture sampled as 2D_PROJECTIVE. The first two layers are rendered as native sized reference images on the left. The quad is rendered at 4x the native size of the texture. "
      }
    },
    {
      "class": "TextureAnisotropyTests",
      "description": [
        "Tests behavior of the anisotropic filtering components of NV097_SET_TEXTURE_CONTROL0."
      ],
      "source_file": "src/tests/texture_anisotropy_tests.h",
      "source_file_line": 10,
      "suite": "TextureAnisotropyTests",
      "test_descriptions": {
        "Anisotropy-1": "Renders a flat, checkerboard-textured quad with perspective and anisotropic filtering set to off.",
        "Anisotropy-2": "Renders a flat, checkerboard-textured quad with perspective and anisotropic filtering set to 2x.",
        "Anisotropy-4": "Renders a flat, checkerboard-textured quad with perspective and anisotropic filtering set to 4x.",
        "Anisotropy-8": "Renders a flat, checkerboard-textured quad with perspective and anisotropic filtering set to 8x. "
      }
    },
    {
      "class": "TextureBorderColorTests",
      "description": [],
      "source_file": "src/tests/texture_border_color_tests.h",
      "source_file_line": 12,
      "suite": "TextureBorderColorTests",
      "test_descriptions": {
        "TextureBorderColor": "Demonstrates that texture format has no effect on texture border color. "
      }
    },
    {
      "class": "TextureBorderTests",
      "description": [],
      "source_file": "src/tests/texture_border_tests.h",
      "source_file_line": 15,
      "suite": "TextureBorderTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureCPUUpdateTests",
      "description": [],
      "source_file": "src/tests/texture_cpu_update_tests.h",
      "source_file_line": 9,
      "suite": "TextureCPUUpdateTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureCubemapTests",
      "description": [],
      "source_file": "src/tests/texture_cubemap_tests.h",
      "source_file_line": 12,
      "suite": "TextureCubemapTests",
      "test_descriptions": {
        "Cubemap": "Renders two angles of a cube utilizing a cubemap texture.",
        "DotReflectDiffuse_-1to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_DIFF pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1.",
        "DotReflectDiffuse_-1to1D3D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_DIFF pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_d3d.",
        "DotReflectDiffuse_-1to1GL": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_DIFF pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_gl.",
        "DotReflectDiffuse_0to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_DIFF pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_zero_to_one.",
        "DotReflectDiffuse_HiLoHemi": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_DIFF pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_hemisphere.",
        "DotReflectDiffuse_HiLo_1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_DIFF pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_1.",
        "DotReflectSpecConst_-1to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1.",
        "DotReflectSpecConst_-1to1D3D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_d3d.",
        "DotReflectSpecConst_-1to1GL": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_gl.",
        "DotReflectSpecConst_0to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_zero_to_one.",
        "DotReflectSpecConst_HiLoHemi": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_hemisphere.",
        "DotReflectSpecConst_HiLo_1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC_CONST pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_1.",
        "DotReflectSpec_-1to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1.",
        "DotReflectSpec_-1to1D3D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_d3df.",
        "DotReflectSpec_-1to1GL": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_glf.",
        "DotReflectSpec_0to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_zero_to_onef.",
        "DotReflectSpec_HiLoHemi": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_hemispheref.",
        "DotReflectSpec_HiLo_1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_RFLCT_SPEC pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_1f.",
        "DotSTR3D_-1to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_3D pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1.",
        "DotSTR3D_-1to1D3D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_3D pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_d3d.",
        "DotSTR3D_-1to1GL": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_3D pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_gl.",
        "DotSTR3D_0to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_3D pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_zero_to_one.",
        "DotSTR3D_HiLoHemi": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_3D pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_hemisphere.",
        "DotSTR3D_HiLo_1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_3D pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_1.",
        "DotSTRCube_-1to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_CUBE pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1.",
        "DotSTRCube_-1to1D3D": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_CUBE pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_d3d.",
        "DotSTRCube_-1to1GL": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_CUBE pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_minus1_to_1_gl.",
        "DotSTRCube_0to1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_CUBE pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_zero_to_one.",
        "DotSTRCube_HiLoHemi": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_CUBE pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_hemisphere. ",
        "DotSTRCube_HiLo_1": "Renders two angles of a cube utilizing PS_TEXTUREMODES_DOT_STR_CUBE pixel shading mode. The NV097_DOT_RGBMAPPING is set to dotmap_hilo_1."
      }
    },
    {
      "class": "TextureFormatDXTTests",
      "description": [],
      "source_file": "src/tests/texture_format_dxt_tests.h",
      "source_file_line": 9,
      "suite": "TextureFormatDXTTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureFormatTests",
      "description": [],
      "source_file": "src/tests/texture_format_tests.h",
      "source_file_line": 14,
      "suite": "TextureFormatTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureFramebufferBlitTests",
      "description": [],
      "source_file": "src/tests/texture_framebuffer_blit_tests.h",
      "source_file_line": 11,
      "suite": "TextureFramebufferBlitTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureLodBiasTests",
      "description": [
        "Tests the behavior of",
        "NV097_SET_TEXTURE_FILTER",
        "'s",
        "NV097_SET_TEXTURE_FILTER_MIPMAP_LOD_BIAS",
        " component."
      ],
      "source_file": "src/tests/texture_lod_bias_tests.h",
      "source_file_line": 9,
      "suite": "TextureLodBiasTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureMatrixTests",
      "description": [],
      "source_file": "src/tests/texture_matrix_tests.h",
      "source_file_line": 10,
      "suite": "TextureMatrixTests",
      "test_descriptions": {}
    },
    {
      "class": "TexturePerspectiveEnableTests",
      "description": [
        "Tests handling of bit 20 in NV097_SET_CONTROL0."
      ],
      "source_file": "src/tests/texture_perspective_enable_tests.h",
      "source_file_line": 11,
      "suite": "TexturePerspectiveEnableTests",
      "test_descriptions": {
        "TexPerspective_Textured": "Renders two pairs of quads, each of which have interesting W parameters. The quads are textured with a checkerboard pattern. The left quads have bit 20 unset. The right have it set. ",
        "TexPerspective_Untextured": "Renders two pairs of quads, each of which have interesting W parameters. The quads are not textured. The left quads have bit 20 unset. The right have it set."
      }
    },
    {
      "class": "TextureRenderTargetTests",
      "description": [],
      "source_file": "src/tests/texture_render_target_tests.h",
      "source_file_line": 17,
      "suite": "TextureRenderTargetTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureRenderUpdateInPlaceTests",
      "description": [],
      "source_file": "src/tests/texture_render_update_in_place_tests.h",
      "source_file_line": 16,
      "suite": "TextureRenderUpdateInPlaceTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureShadowComparatorTests",
      "description": [],
      "source_file": "src/tests/texture_shadow_comparator_tests.h",
      "source_file_line": 17,
      "suite": "TextureShadowComparatorTests",
      "test_descriptions": {}
    },
    {
      "class": "TextureSignedComponentTests",
      "description": [],
      "source_file": "src/tests/texture_signed_component_tests.h",
      "source_file_line": 15,
      "suite": "TextureSignedComponentTests",
      "test_descriptions": {}
    },
    {
      "class": "ThreeDPrimitiveTests",
      "description": [
        "Tests behavior when rendering various 3D primitives."
      ],
      "source_file": "src/tests/three_d_primitive_tests.h",
      "source_file_line": 13,
      "suite": "3D primitive",
      "test_descriptions": {
        "LineLoop": "Draws vertices as a line loop using NV097_DRAW_ARRAYS",
        "LineLoop-inlinearrays": "Draws vertices as a line loop using NV097_INLINE_ARRAY",
        "LineLoop-inlinearrays-ls": "Draws vertices as a line loop using NV097_INLINE_ARRAY with line smoothing enabled.",
        "LineLoop-inlinearrays-ls-ps": "Draws vertices as a line loop using NV097_INLINE_ARRAY with line smoothing and polygon smoothing enabled.",
        "LineLoop-inlinearrays-ps": "Draws vertices as a line loop using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "LineLoop-inlinebuf": "Draws vertices as a line loop using NV097_SET_VERTEX3F",
        "LineLoop-inlinebuf-ls": "Draws vertices as a line loop using NV097_SET_VERTEX3F with line smoothing enabled.",
        "LineLoop-inlinebuf-ls-ps": "Draws vertices as a line loop using NV097_SET_VERTEX3F with line smoothing and polygon smoothing enabled.",
        "LineLoop-inlinebuf-ps": "Draws vertices as a line loop using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "LineLoop-inlineelements": "Draws vertices as a line loop using NV097_ARRAY_ELEMENT16",
        "LineLoop-inlineelements-ls": "Draws vertices as a line loop using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "LineLoop-inlineelements-ls-ps": "Draws vertices as a line loop using NV097_ARRAY_ELEMENT16 with line smoothing and polygon smoothing enabled.",
        "LineLoop-inlineelements-ps": "Draws vertices as a line loop using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "LineLoop-ls": "Draws vertices as a line loop using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "LineLoop-ls-ps": "Draws vertices as a line loop using NV097_DRAW_ARRAYS with line smoothing and polygon smoothing enabled.",
        "LineLoop-ps": "Draws vertices as a line loop using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "LineStrip": "Draws vertices as a line strip using NV097_DRAW_ARRAYS",
        "LineStrip-inlinearrays": "Draws vertices as a line strip using NV097_INLINE_ARRAY",
        "LineStrip-inlinearrays-ls": "Draws vertices as a line strip using NV097_INLINE_ARRAY with line smoothing enabled.",
        "LineStrip-inlinearrays-ls-ps": "Draws vertices as a line strip using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "LineStrip-inlinearrays-ps": "Draws vertices as a line strip using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "LineStrip-inlinebuf": "Draws vertices as a line strip using NV097_SET_VERTEX3F",
        "LineStrip-inlinebuf-ls": "Draws vertices as a line strip using NV097_SET_VERTEX3F with line smoothing enabled.",
        "LineStrip-inlinebuf-ls-ps": "Draws vertices as a line strip using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "LineStrip-inlinebuf-ps": "Draws vertices as a line strip using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "LineStrip-inlineelements": "Draws vertices as a line strip using NV097_ARRAY_ELEMENT16",
        "LineStrip-inlineelements-ls": "Draws vertices as a line strip using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "LineStrip-inlineelements-ls-ps": "Draws vertices as a line strip using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "LineStrip-inlineelements-ps": "Draws vertices as a line strip using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "LineStrip-ls": "Draws vertices as a line strip using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "LineStrip-ls-ps": "Draws vertices as a line strip using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "LineStrip-ps": "Draws vertices as a line strip using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "Lines": "Draws vertices as lines using NV097_DRAW_ARRAYS",
        "Lines-inlinearrays": "Draws vertices as lines using NV097_INLINE_ARRAY",
        "Lines-inlinearrays-ls": "Draws vertices as lines using NV097_INLINE_ARRAY with line smoothing enabled.",
        "Lines-inlinearrays-ls-ps": "Draws vertices as lines using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "Lines-inlinearrays-ps": "Draws vertices as lines using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "Lines-inlinebuf": "Draws vertices as lines using NV097_SET_VERTEX3F",
        "Lines-inlinebuf-ls": "Draws vertices as lines using NV097_SET_VERTEX3F with line smoothing enabled.",
        "Lines-inlinebuf-ls-ps": "Draws vertices as lines using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "Lines-inlinebuf-ps": "Draws vertices as lines using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "Lines-inlineelements": "Draws vertices as lines using NV097_ARRAY_ELEMENT16",
        "Lines-inlineelements-ls": "Draws vertices as lines using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "Lines-inlineelements-ls-ps": "Draws vertices as lines using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "Lines-inlineelements-ps": "Draws vertices as lines using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "Lines-ls": "Draws vertices as lines using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "Lines-ls-ps": "Draws vertices as lines using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "Lines-ps": "Draws vertices as lines using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "Points": "Draws vertices as points using NV097_DRAW_ARRAYS",
        "Points-inlinearrays": "Draws vertices as points using NV097_INLINE_ARRAY",
        "Points-inlinearrays-ls": "Draws vertices as points using NV097_INLINE_ARRAY with line smoothing enabled.",
        "Points-inlinearrays-ls-ps": "Draws vertices as points using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "Points-inlinearrays-ps": "Draws vertices as points using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "Points-inlinebuf": "Draws vertices as points using NV097_SET_VERTEX3F",
        "Points-inlinebuf-ls": "Draws vertices as points using NV097_SET_VERTEX3F with line smoothing enabled.",
        "Points-inlinebuf-ls-ps": "Draws vertices as points using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "Points-inlinebuf-ps": "Draws vertices as points using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "Points-inlineelements": "Draws vertices as points using NV097_ARRAY_ELEMENT16",
        "Points-inlineelements-ls": "Draws vertices as points using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "Points-inlineelements-ls-ps": "Draws vertices as points using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "Points-inlineelements-ps": "Draws vertices as points using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "Points-ls": "Draws vertices as points using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "Points-ls-ps": "Draws vertices as points using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "Points-ps": "Draws vertices as points using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "Polygon": "Draws vertices as a polygon using NV097_DRAW_ARRAYS",
        "Polygon-inlinearrays": "Draws vertices as a polygon using NV097_INLINE_ARRAY",
        "Polygon-inlinearrays-ls": "Draws vertices as a polygon using NV097_INLINE_ARRAY with line smoothing enabled.",
        "Polygon-inlinearrays-ls-ps": "Draws vertices as a polygon using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "Polygon-inlinearrays-ps": "Draws vertices as a polygon using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "Polygon-inlinebuf": "Draws vertices as a polygon using NV097_SET_VERTEX3F",
        "Polygon-inlinebuf-ls": "Draws vertices as a polygon using NV097_SET_VERTEX3F with line smoothing enabled.",
        "Polygon-inlinebuf-ls-ps": "Draws vertices as a polygon using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "Polygon-inlinebuf-ps": "Draws vertices as a polygon using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "Polygon-inlineelements": "Draws vertices as a polygon using NV097_ARRAY_ELEMENT16",
        "Polygon-inlineelements-ls": "Draws vertices as a polygon using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "Polygon-inlineelements-ls-ps": "Draws vertices as a polygon using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "Polygon-inlineelements-ps": "Draws vertices as a polygon using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "Polygon-ls": "Draws vertices as a polygon using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "Polygon-ls-ps": "Draws vertices as a polygon using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "Polygon-ps": "Draws vertices as a polygon using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "QuadStrip": "Draws vertices as a strip of quads using NV097_DRAW_ARRAYS",
        "QuadStrip-inlinearrays": "Draws vertices as a strip of quads using NV097_INLINE_ARRAY",
        "QuadStrip-inlinearrays-ls": "Draws vertices as a strip of quads using NV097_INLINE_ARRAY with line smoothing enabled.",
        "QuadStrip-inlinearrays-ls-ps": "Draws vertices as a strip of quads using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "QuadStrip-inlinearrays-ps": "Draws vertices as a strip of quads using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "QuadStrip-inlinebuf": "Draws vertices as a strip of quads using NV097_SET_VERTEX3F",
        "QuadStrip-inlinebuf-ls": "Draws vertices as a strip of quads using NV097_SET_VERTEX3F with line smoothing enabled.",
        "QuadStrip-inlinebuf-ls-ps": "Draws vertices as a strip of quads using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "QuadStrip-inlinebuf-ps": "Draws vertices as a strip of quads using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "QuadStrip-inlineelements": "Draws vertices as a strip of quads using NV097_ARRAY_ELEMENT16",
        "QuadStrip-inlineelements-ls": "Draws vertices as a strip of quads using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "QuadStrip-inlineelements-ls-ps": "Draws vertices as a strip of quads using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "QuadStrip-inlineelements-ps": "Draws vertices as a strip of quads using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "QuadStrip-ls": "Draws vertices as a strip of quads using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "QuadStrip-ls-ps": "Draws vertices as a strip of quads using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "QuadStrip-ps": "Draws vertices as a strip of quads using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "Quads": "Draws vertices as quads using NV097_DRAW_ARRAYS",
        "Quads-inlinearrays": "Draws vertices as quads using NV097_INLINE_ARRAY",
        "Quads-inlinearrays-ls": "Draws vertices as quads using NV097_INLINE_ARRAY with line smoothing enabled.",
        "Quads-inlinearrays-ls-ps": "Draws vertices as quads using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "Quads-inlinearrays-ps": "Draws vertices as quads using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "Quads-inlinebuf": "Draws vertices as quads using NV097_SET_VERTEX3F",
        "Quads-inlinebuf-ls": "Draws vertices as quads using NV097_SET_VERTEX3F with line smoothing enabled.",
        "Quads-inlinebuf-ls-ps": "Draws vertices as quads using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "Quads-inlinebuf-ps": "Draws vertices as quads using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "Quads-inlineelements": "Draws vertices as quads using NV097_ARRAY_ELEMENT16",
        "Quads-inlineelements-ls": "Draws vertices as quads using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "Quads-inlineelements-ls-ps": "Draws vertices as quads using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "Quads-inlineelements-ps": "Draws vertices as quads using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "Quads-ls": "Draws vertices as quads using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "Quads-ls-ps": "Draws vertices as quads using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "Quads-ps": "Draws vertices as quads using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "TriFan": "Draws vertices as a triangle fan using NV097_DRAW_ARRAYS",
        "TriFan-inlinearrays": "Draws vertices as a triangle fan using NV097_INLINE_ARRAY",
        "TriFan-inlinearrays-ls": "Draws vertices as a triangle fan using NV097_INLINE_ARRAY with line smoothing enabled.",
        "TriFan-inlinearrays-ls-ps": "Draws vertices as a triangle fan using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "TriFan-inlinearrays-ps": "Draws vertices as a triangle fan using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "TriFan-inlinebuf": "Draws vertices as a triangle fan using NV097_SET_VERTEX3F",
        "TriFan-inlinebuf-ls": "Draws vertices as a triangle fan using NV097_SET_VERTEX3F with line smoothing enabled.",
        "TriFan-inlinebuf-ls-ps": "Draws vertices as a triangle fan using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "TriFan-inlinebuf-ps": "Draws vertices as a triangle fan using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "TriFan-inlineelements": "Draws vertices as a triangle fan using NV097_ARRAY_ELEMENT16",
        "TriFan-inlineelements-ls": "Draws vertices as a triangle fan using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "TriFan-inlineelements-ls-ps": "Draws vertices as a triangle fan using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "TriFan-inlineelements-ps": "Draws vertices as a triangle fan using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "TriFan-ls": "Draws vertices as a triangle fan using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "TriFan-ls-ps": "Draws vertices as a triangle fan using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "TriFan-ps": "Draws vertices as a triangle fan using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "TriStrip": "Draws vertices as a strip of triangles using NV097_DRAW_ARRAYS",
        "TriStrip-inlinearrays": "Draws vertices as a strip of triangles using NV097_INLINE_ARRAY",
        "TriStrip-inlinearrays-ls": "Draws vertices as a strip of triangles using NV097_INLINE_ARRAY with line smoothing enabled.",
        "TriStrip-inlinearrays-ls-ps": "Draws vertices as a strip of triangles using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "TriStrip-inlinearrays-ps": "Draws vertices as a strip of triangles using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "TriStrip-inlinebuf": "Draws vertices as a strip of triangles using NV097_SET_VERTEX3F",
        "TriStrip-inlinebuf-ls": "Draws vertices as a strip of triangles using NV097_SET_VERTEX3F with line smoothing enabled.",
        "TriStrip-inlinebuf-ls-ps": "Draws vertices as a strip of triangles using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "TriStrip-inlinebuf-ps": "Draws vertices as a strip of triangles using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "TriStrip-inlineelements": "Draws vertices as a strip of triangles using NV097_ARRAY_ELEMENT16",
        "TriStrip-inlineelements-ls": "Draws vertices as a strip of triangles using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "TriStrip-inlineelements-ls-ps": "Draws vertices as a strip of triangles using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "TriStrip-inlineelements-ps": "Draws vertices as a strip of triangles using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "TriStrip-ls": "Draws vertices as a strip of triangles using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "TriStrip-ls-ps": "Draws vertices as a strip of triangles using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "TriStrip-ps": "Draws vertices as a strip of triangles using NV097_DRAW_ARRAYS with polygon smoothing enabled.",
        "Triangles": "Draws vertices as triangles using NV097_DRAW_ARRAYS ",
        "Triangles-inlinearrays": "Draws vertices as triangles using NV097_INLINE_ARRAY",
        "Triangles-inlinearrays-ls": "Draws vertices as triangles using NV097_INLINE_ARRAY with line smoothing enabled.",
        "Triangles-inlinearrays-ls-ps": "Draws vertices as triangles using NV097_INLINE_ARRAY with line and polygon smoothing enabled.",
        "Triangles-inlinearrays-ps": "Draws vertices as triangles using NV097_INLINE_ARRAY with polygon smoothing enabled.",
        "Triangles-inlinebuf": "Draws vertices as triangles using NV097_SET_VERTEX3F",
        "Triangles-inlinebuf-ls": "Draws vertices as triangles using NV097_SET_VERTEX3F with line smoothing enabled.",
        "Triangles-inlinebuf-ls-ps": "Draws vertices as triangles using NV097_SET_VERTEX3F with line and polygon smoothing enabled.",
        "Triangles-inlinebuf-ps": "Draws vertices as triangles using NV097_SET_VERTEX3F with polygon smoothing enabled.",
        "Triangles-inlineelements": "Draws vertices as triangles using NV097_ARRAY_ELEMENT16",
        "Triangles-inlineelements-ls": "Draws vertices as triangles using NV097_ARRAY_ELEMENT16 with line smoothing enabled.",
        "Triangles-inlineelements-ls-ps": "Draws vertices as triangles using NV097_ARRAY_ELEMENT16 with line and polygon smoothing enabled.",
        "Triangles-inlineelements-ps": "Draws vertices as triangles using NV097_ARRAY_ELEMENT16 with polygon smoothing enabled.",
        "Triangles-ls": "Draws vertices as triangles using NV097_DRAW_ARRAYS with line smoothing enabled.",
        "Triangles-ls-ps": "Draws vertices as triangles using NV097_DRAW_ARRAYS with line and polygon smoothing enabled.",
        "Triangles-ps": "Draws vertices as triangles using NV097_DRAW_ARRAYS with polygon smoothing enabled."
      }
    },
    {
      "class": "TwoDLineTests",
      "description": [
        "Tests various NV04_SOLID_LINE_* 2D graphics acceleration functions by rendering lines into buffers of different color depths."
      ],
      "source_file": "src/tests/two_d_line_tests.h",
      "source_file_line": 14,
      "suite": "2D Lines",
      "test_descriptions": {
        "2DLine-15-C000003E0-400_200-400_400": "XRGB 555 color depth - green vertical line from 400, 200 - 400, 400. ",
        "2DLine-16-C000007E0-400_200-400_400": "XRGB 565 color depth - green vertical line from 400, 200 - 400, 400. ",
        "2DLine-24-C00000000-400_200-400_400": "XRGB 888 - black vertical line from 400, 200 - 400, 400 ",
        "2DLine-24-C0000FF00-400_200-400_400": "XRGB 888 - green vertical line from 400, 200 - 400, 400 ",
        "2DLine-24-C0000FF00-444_222-444_444": "XRGB 888 - green vertical line from 444, 222 - 444, 444 ",
        "2DLine-24-C00FF0000-400_200-400_400": "XRGB 888 - red vertical line from 400, 200 - 400, 400 ",
        "2DLine-24-C00FFFFFF-0_0-639_479": "XRGB 888 - white diagonal line from 0, 0, - 639, 479 (one pixel short of bottom right corner) ",
        "2DLine-24-C00FFFFFF-222_222-222_222": "XRGB 888 - should display nothing, the line has no length ",
        "2DLine-24-C00FFFFFF-400_0-400_479": "XRGB 888 - white vertical line from 400, 0 - 400, 479 (one pixel short of bottom) ",
        "2DLine-24-C00FFFFFF-400_300-400_301": "XRGB 888 - white dot at 400, 300 ",
        "2DLine-24-C00FFFFFF-400_300-401_300": "XRGB 888 - white dot at 400, 300 ",
        "2DLine-24-C00FFFFFF-639_479-0_0": "XRGB 888 - white diagonal line from 639, 479 - 0, 0 (one pixel short of the upper left corner) ",
        "2DLine-24-CFFFFFFFF-100_100-100_400": "XRGB 888 - white vertical line from 100, 100 - 100, 400 - alpha is ignored "
      }
    },
    {
      "class": "VertexShaderIndependenceTests",
      "description": [],
      "source_file": "src/tests/vertex_shader_independence_tests.h",
      "source_file_line": 10,
      "suite": "VertexShaderIndependenceTests",
      "test_descriptions": {}
    },
    {
      "class": "VertexShaderRoundingTests",
      "description": [],
      "source_file": "src/tests/vertex_shader_rounding_tests.h",
      "source_file_line": 16,
      "suite": "VertexShaderRoundingTests",
      "test_descriptions": {}
    },
    {
      "class": "VertexShaderSwizzleTests",
      "description": [],
      "source_file": "src/tests/vertex_shader_swizzle_tests.h",
      "source_file_line": 10,
      "suite": "VertexShaderSwizzleTests",
      "test_descriptions": {}
    },
    {
      "class": "ViewportTests",
      "description": [
        "Tests the effects of NV097_SET_VIEWPORT_OFFSET and NV097_SET_VIEWPORT_SCALE on quads rendered via the fixed function and programmable pipelines."
      ],
      "source_file": "src/tests/viewport_tests.h",
      "source_file_line": 14,
      "suite": "ViewportTests",
      "test_descriptions": {}
    },
    {
      "class": "VolumeTextureTests",
      "description": [],
      "source_file": "src/tests/volume_texture_tests.h",
      "source_file_line": 18,
      "suite": "VolumeTextureTests",
      "test_descriptions": {}
    },
    {
      "class": "WeightSetterTests",
      "description": [
        "Tests the effects of NV097_SET_WEIGHTxF."
      ],
      "source_file": "src/tests/weight_setter_tests.h",
      "source_file_line": 14,
      "suite": "WeightSetterTests",
      "test_descriptions": {}
    },
    {
      "class": "WindowClipTests",
      "description": [],
      "source_file": "src/tests/window_clip_tests.h",
      "source_file_line": 14,
      "suite": "WindowClipTests",
      "test_descriptions": {}
    },
    {
      "class": "WParamTests",
      "description": [],
      "source_file": "src/tests/w_param_tests.h",
      "source_file_line": 11,
      "suite": "WParamTests",
      "test_descriptions": {}
    },
    {
      "class": "ZeroStrideTests",
      "description": [],
      "source_file": "src/tests/zero_stride_tests.h",
      "source_file_line": 15,
      "suite": "ZeroStrideTests",
      "test_descriptions": {}
    },
    {
      "class": "ZMinMaxControlTests",
      "description": [],
      "source_file": "src/tests/z_min_max_control_tests.h",
      "source_file_line": 14,
      "suite": "ZMinMaxControlTests",
      "test_descriptions": {}
    },
    {
      "class": "ZPassPixelCountTests",
      "description": [
        "Tests behavior of NV097_GET_REPORT."
      ],
      "source_file": "src/tests/zpass_pixel_count_tests.h",
      "source_file_line": 17,
      "suite": "ZPassPixelCountTests",
      "test_descriptions": {
        "ZPass": "Tests the basic behavior of ZPASS_PIXEL_COUNT reports. The counter is cleared via NV097_CLEAR_REPORT_VALUE and then four quads are rendered with depth testing enabled. The second quad is completely obscured by the first. The final quad is halfway offscreen. The expected pixel count is then compared to the report value. Next, without clearing the report, one final quad is rendered partially on top of the fourth quad and the report is fetched again, confirming that it now contains the result of the entire draw. "
      }
    }
  ]
}